/*!
 * surveyjs Builder(Editor) v1.0.14
 * (c) Devsoft Baltic O� - http://surveyjs.io/
 * Github: https://github.com/surveyjs/editor
 * License: https://surveyjs.io/Licenses#BuildSurvey
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("knockout"), require("survey-knockout"));
	else if(typeof define === 'function' && define.amd)
		define("SurveyEditor", ["knockout", "survey-knockout"], factory);
	else if(typeof exports === 'object')
		exports["SurveyEditor"] = factory(require("knockout"), require("survey-knockout"));
	else
		root["SurveyEditor"] = factory(root["ko"], root["Survey"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 104);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return editorLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return defaultStrings; });
var editorLocalization = {
    currentLocale: "",
    locales: {},
    getString: function (strName, locale) {
        if (locale === void 0) { locale = null; }
        var loc = this.getLocale(locale);
        var path = strName.split(".");
        var obj = loc;
        for (var i = 0; i < path.length; i++) {
            obj = obj[path[i]];
            if (!obj) {
                if (loc === defaultStrings)
                    return path[i];
                return this.getString(strName, "en");
            }
        }
        return obj;
    },
    getPropertyName: function (strName, locale) {
        if (locale === void 0) { locale = null; }
        var obj = this.getProperty(strName, locale);
        if (obj["name"])
            return obj["name"];
        return obj;
    },
    getPropertyTitle: function (strName, locale) {
        if (locale === void 0) { locale = null; }
        var obj = this.getProperty(strName, locale);
        if (obj["title"])
            return obj["title"];
        return "";
    },
    getProperty: function (strName, locale) {
        if (locale === void 0) { locale = null; }
        var obj = this.getString("p." + strName, locale);
        if (obj !== strName)
            return obj;
        var pos = strName.indexOf("_");
        if (pos < -1)
            return obj;
        strName = strName.substr(pos + 1);
        return this.getString("p." + strName, locale);
    },
    getPropertyValue: function (value, locale) {
        if (locale === void 0) { locale = null; }
        return this.getValueInternal(value, "pv", locale);
    },
    getValidatorName: function (name, locale) {
        if (locale === void 0) { locale = null; }
        return this.getValueInternal(name, "validators", locale);
    },
    getTriggerName: function (name, locale) {
        if (locale === void 0) { locale = null; }
        return this.getValueInternal(name, "triggers", locale);
    },
    getLocale: function (locale) {
        if (!locale)
            locale = this.currentLocale;
        var loc = locale ? this.locales[locale] : defaultStrings;
        if (!loc)
            loc = defaultStrings;
        return loc;
    },
    getValueInternal: function (value, prefix, locale) {
        if (locale === void 0) { locale = null; }
        if (value === "" || value === null || value === undefined)
            return "";
        value = value.toString();
        var loc = this.getLocale(locale);
        var res = loc[prefix] ? loc[prefix][value] : null;
        if (!res)
            res = defaultStrings[prefix][value];
        return res ? res : value;
    },
    getLocales: function () {
        var res = [];
        res.push("");
        for (var key in this.locales) {
            res.push(key);
        }
        return res;
    }
};
var defaultStrings = {
    //survey templates
    survey: {
        edit: "Edit",
        dropQuestion: "Please drop a question here from the Toolbox on the left.",
        copy: "Copy",
        addToToolbox: "Add to toolbox",
        deletePanel: "Delete Panel",
        deleteQuestion: "Delete Question",
        convertTo: "Convert to"
    },
    //questionTypes
    qt: {
        checkbox: "Checkbox",
        comment: "Comment",
        dropdown: "Dropdown",
        file: "File",
        html: "Html",
        matrix: "Matrix (single choice)",
        matrixdropdown: "Matrix (multiple choice)",
        matrixdynamic: "Matrix (dynamic rows)",
        multipletext: "Multiple Text",
        panel: "Panel",
        paneldynamic: "Panel (dynamic panels)",
        radiogroup: "Radiogroup",
        rating: "Rating",
        text: "Single Input",
        boolean: "Boolean",
        expression: "Expression"
    },
    //Strings in Editor
    ed: {
        survey: "Survey",
        editSurvey: "Edit Survey",
        addNewPage: "Add New Page",
        deletePage: "Delete Page",
        editPage: "Edit Page",
        newPageName: "page",
        newQuestionName: "question",
        newPanelName: "panel",
        testSurvey: "Test Survey",
        testSurveyAgain: "Test Survey Again",
        testSurveyWidth: "Survey width: ",
        embedSurvey: "Embed Survey",
        saveSurvey: "Save Survey",
        designer: "Survey Designer",
        jsonEditor: "JSON Editor",
        undo: "Undo",
        redo: "Redo",
        options: "Options",
        generateValidJSON: "Generate Valid JSON",
        generateReadableJSON: "Generate Readable JSON",
        toolbox: "Toolbox",
        toolboxGeneralCategory: "General",
        delSelObject: "Delete selected object",
        editSelObject: "Edit selected object",
        correctJSON: "Please correct JSON.",
        surveyResults: "Survey Result: ",
        modified: "Modified",
        saving: "Saving",
        saved: "Saved"
    },
    //Property Editors
    pe: {
        apply: "Apply",
        ok: "OK",
        cancel: "Cancel",
        reset: "Reset",
        close: "Close",
        delete: "Delete",
        addNew: "Add New",
        addItem: "Click to add an item...",
        removeAll: "Remove All",
        edit: "Edit",
        move: "Move",
        empty: "<empty>",
        notEmpty: "<edit value>",
        fastEntry: "Fast Entry",
        formEntry: "Form Entry",
        testService: "Test the service",
        conditionSelectQuestion: "Select question...",
        conditionButtonAdd: "Add",
        conditionButtonReplace: "Replace",
        conditionHelp: "Please enter a boolean expression. It should return true to keep the question/page visible. For example: {question1} = 'value1' or ({question2} * {question4}  > 20 and {question3} < 5)",
        expressionHelp: "Please enter an expression. You may use curly brackets to get access to the question values: '{question1} + {question2}', '({price}*{quantity}) * (100 - {discount})'",
        aceEditorHelp: "Press ctrl+space to get expression completion hint",
        aceEditorRowTitle: "Current row",
        aceEditorPanelTitle: "Current panel",
        showMore: "For more details please check the documentation",
        assistantTitle: "Available questions:",
        cellsEmptyRowsColumns: "There is should be at least one column or row",
        propertyIsEmpty: "Please enter a value",
        value: "Value",
        text: "Text",
        required: "Required?",
        columnEdit: "Edit column: {0}",
        itemEdit: "Edit item: {0}",
        url: "URL",
        path: "Path",
        valueName: "Value name",
        titleName: "Title name",
        hasOther: "Has other item",
        otherText: "Other item text",
        name: "Name",
        title: "Title",
        cellType: "Cell type",
        colCount: "Column count",
        choicesOrder: "Select choices order",
        visible: "Is visible?",
        isRequired: "Is required?",
        startWithNewLine: "Is start with new line?",
        rows: "Row count",
        placeHolder: "Input place holder",
        showPreview: "Is image preview shown?",
        storeDataAsText: "Store file content in JSON result as text",
        maxSize: "Maximum file size in bytes",
        imageHeight: "Image height",
        imageWidth: "Image width",
        rowCount: "Row count",
        addRowText: "Add row button text",
        removeRowText: "Remove row button text",
        minRateDescription: "Minimum rate description",
        maxRateDescription: "Maximum rate description",
        inputType: "Input type",
        optionsCaption: "Options caption",
        defaultValue: "Default value",
        surveyEditorTitle: "Edit survey settings",
        qEditorTitle: "Edit: {0}",
        //survey
        showTitle: "Show/hide title",
        locale: "Default language",
        mode: "Mode (edit/read only)",
        clearInvisibleValues: "Clear invisible values",
        cookieName: "Cookie name (to disable run survey two times locally)",
        sendResultOnPageNext: "Send survey results on page next",
        storeOthersAsComment: "Store 'others' value in separate field",
        showPageTitles: "Show page titles",
        showPageNumbers: "Show page numbers",
        pagePrevText: "Page previous button text",
        pageNextText: "Page next button text",
        completeText: "Complete button text",
        startSurveyText: "Start button text",
        showNavigationButtons: "Show navigation buttons (default navigation)",
        showPrevButton: "Show previous button (user may return on previous page)",
        firstPageIsStarted: "The first page in the survey is a started page.",
        showCompletedPage: "Show the completed page at the end (completedHtml)",
        goNextPageAutomatic: "On answering all questions, go to the next page automatically",
        showProgressBar: "Show progress bar",
        questionTitleLocation: "Question title location",
        requiredText: "The question required symbol(s)",
        questionStartIndex: "Question start index (1, 2 or 'A', 'a')",
        showQuestionNumbers: "Show question numbers",
        questionTitleTemplate: "Question title template, default is: '{no}. {require} {title}'",
        questionErrorLocation: "Question error location",
        focusFirstQuestionAutomatic: "Focus first question on changing the page",
        questionsOrder: "Elements order on the page",
        maxTimeToFinish: "Maximum time to finish the survey",
        maxTimeToFinishPage: "Maximum time to finish a page in the survey",
        showTimerPanel: "Show timer panel",
        showTimerPanelMode: "Show timer panel mode",
        renderMode: "Render mode",
        allowAddPanel: "Allow adding a panel",
        allowRemovePanel: "Allow removing the panel",
        panelAddText: "Adding panel text",
        panelRemoveText: "Removing panel text",
        isSinglePage: "Show all elements on one page",
        tabs: {
            general: "General",
            fileOptions: "Options",
            html: "Html Editor",
            columns: "Columns",
            rows: "Rows",
            choices: "Choices",
            visibleIf: "Visible If",
            enableIf: "Enable If",
            rateValues: "Rate Values",
            choicesByUrl: "Choices from Web",
            matrixChoices: "Default Choices",
            multipleTextItems: "Text Inputs",
            validators: "Validators",
            navigation: "Navigation",
            question: "Question",
            completedHtml: "Completed Html",
            loadingHtml: "Loading Html",
            timer: "Timer/Quiz",
            triggers: "Triggers",
            templateTitle: "Template title"
        },
        editProperty: "Edit property '{0}'",
        items: "[ Items: {0} ]",
        enterNewValue: "Please, enter the value.",
        noquestions: "There is no any question in the survey.",
        createtrigger: "Please create a trigger",
        triggerOn: "On ",
        triggerMakePagesVisible: "Make pages visible:",
        triggerMakeQuestionsVisible: "Make elements visible:",
        triggerCompleteText: "Complete the survey if succeed.",
        triggerNotSet: "The trigger is not set",
        triggerRunIf: "Run if",
        triggerSetToName: "Change value of: ",
        triggerSetValue: "to: ",
        triggerIsVariable: "Do not put the variable into the survey result."
    },
    //Property values
    pv: {
        true: "true",
        false: "false",
        ar: "العربية",
        ca: "català",
        cz: "čeština",
        da: "dansk",
        de: "deutsch",
        en: "english",
        es: "español",
        fa: "فارْسِى",
        fi: "suomalainen",
        fr: "français",
        gr: "ελληνικά",
        he: "עברית",
        hu: "magyar",
        it: "italiano",
        is: "íslenska",
        ka: "ქართული",
        lv: "latviešu",
        nl: "hollandsk",
        no: "norsk",
        pl: "polski",
        pt: "português",
        ro: "română",
        ru: "русский",
        sv: "svenska",
        tr: "türkçe",
        "zh-cn": "简体中文"
    },
    //Operators
    op: {
        empty: "is empty",
        notempty: "is not empty",
        equal: "equals",
        notequal: "not equals",
        contains: "contains",
        notcontains: "not contains",
        greater: "greater",
        less: "less",
        greaterorequal: "greater or equals",
        lessorequal: "less or equals"
    },
    //Embed window
    ew: {
        angular: "Use Angular version",
        jquery: "Use jQuery version",
        knockout: "Use Knockout version",
        react: "Use React version",
        vue: "Use Vue version",
        bootstrap: "For bootstrap framework",
        standard: "No bootstrap",
        showOnPage: "Show survey on a page",
        showInWindow: "Show survey in a window",
        loadFromServer: "Load Survey JSON from server",
        titleScript: "Scripts and styles",
        titleHtml: "HTML",
        titleJavaScript: "JavaScript"
    },
    //Test Survey
    ts: {
        selectPage: "Select the page to test it:"
    },
    validators: {
        answercountvalidator: "answer count",
        emailvalidator: "e-mail",
        numericvalidator: "numeric",
        regexvalidator: "regex",
        textvalidator: "text"
    },
    triggers: {
        completetrigger: "complete survey",
        setvaluetrigger: "set value",
        visibletrigger: "change visibility"
    },
    //Properties
    p: {
        name: "name",
        title: {
            name: "title",
            title: "Leave it empty, if it is the same as 'Name'"
        },
        page_title: { name: "title", title: "Page title" }
    }
};
editorLocalization.locales["en"] = defaultStrings;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export __assign */
/* harmony export (immutable) */ __webpack_exports__["a"] = __extends;
var __assign = Object["assign"] ||
    function (target) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    target[p] = s[p];
        }
        return target;
    };
function __extends(thisClass, baseClass) {
    for (var p in baseClass)
        if (baseClass.hasOwnProperty(p))
            thisClass[p] = baseClass[p];
    function __() {
        this.constructor = thisClass;
    }
    thisClass.prototype =
        baseClass === null
            ? Object.create(baseClass)
            : ((__.prototype = baseClass.prototype), new __());
}


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__propertyCustomEditor__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__editorLocalization__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyEditorFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SurveyStringPropertyEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SurveyDropdownPropertyEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return SurveyBooleanPropertyEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return SurveyNumberPropertyEditor; });






var SurveyPropertyEditorFactory = (function () {
    function SurveyPropertyEditorFactory() {
    }
    SurveyPropertyEditorFactory.getOperators = function () {
        var operators = [
            "empty",
            "notempty",
            "equal",
            "notequal",
            "contains",
            "notcontains",
            "greater",
            "less",
            "greaterorequal",
            "lessorequal"
        ];
        var result = [];
        for (var i = 0; i < operators.length; i++) {
            var name = operators[i];
            result.push({
                name: name,
                text: __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */].getString("op." + name)
            });
        }
        return result;
    };
    SurveyPropertyEditorFactory.registerEditor = function (name, creator, editableClassName) {
        if (editableClassName === void 0) { editableClassName = null; }
        SurveyPropertyEditorFactory.creatorList[name] = creator;
        var className = editableClassName ? editableClassName : name;
        SurveyPropertyEditorFactory.creatorByClassList[className] = creator;
    };
    SurveyPropertyEditorFactory.registerCustomEditor = function (name, widgetJSON) {
        SurveyPropertyEditorFactory.widgetRegisterList[name] = widgetJSON;
    };
    SurveyPropertyEditorFactory.createEditor = function (property, func) {
        var editorType = property.type;
        if (property.choices != null &&
            (!editorType || editorType == SurveyPropertyEditorFactory.defaultEditor)) {
            editorType = "dropdown";
        }
        var propertyEditor = SurveyPropertyEditorFactory.createCustomEditor(editorType, property);
        if (!propertyEditor) {
            var creator = SurveyPropertyEditorFactory.creatorList[editorType];
            if (creator)
                propertyEditor = creator(property);
        }
        if (!propertyEditor) {
            creator = SurveyPropertyEditorFactory.findParentCreator(editorType);
            propertyEditor = creator(property);
        }
        propertyEditor.onChanged = func;
        return propertyEditor;
    };
    SurveyPropertyEditorFactory.createCustomEditor = function (name, property) {
        var widgetJSON = SurveyPropertyEditorFactory.widgetRegisterList[name];
        if (!widgetJSON)
            return null;
        return new __WEBPACK_IMPORTED_MODULE_4__propertyCustomEditor__["a" /* SurveyPropertyCustomEditor */](property, widgetJSON);
    };
    SurveyPropertyEditorFactory.findParentCreator = function (name) {
        var jsonClass = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.findClass(name);
        while (jsonClass && jsonClass.parentName) {
            var creator = SurveyPropertyEditorFactory.creatorByClassList[jsonClass.parentName];
            if (creator)
                return creator;
            jsonClass = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.findClass(jsonClass.parentName);
        }
        return SurveyPropertyEditorFactory.creatorList[SurveyPropertyEditorFactory.defaultEditor];
    };
    return SurveyPropertyEditorFactory;
}());

SurveyPropertyEditorFactory.defaultEditor = "string";
SurveyPropertyEditorFactory.creatorList = {};
SurveyPropertyEditorFactory.creatorByClassList = {};
SurveyPropertyEditorFactory.widgetRegisterList = {};
var SurveyStringPropertyEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyStringPropertyEditor, _super);
    function SurveyStringPropertyEditor(property) {
        return _super.call(this, property) || this;
    }
    Object.defineProperty(SurveyStringPropertyEditor.prototype, "editorType", {
        get: function () {
            return "string";
        },
        enumerable: true,
        configurable: true
    });
    return SurveyStringPropertyEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__["a" /* SurveyPropertyEditorBase */]));

var SurveyDropdownPropertyEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyDropdownPropertyEditor, _super);
    function SurveyDropdownPropertyEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.koChoices = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"](_this.getLocalizableChoices());
        return _this;
    }
    Object.defineProperty(SurveyDropdownPropertyEditor.prototype, "editorType", {
        get: function () {
            return "dropdown";
        },
        enumerable: true,
        configurable: true
    });
    SurveyDropdownPropertyEditor.prototype.getValueText = function (value) {
        if (this.property.name === "locale") {
            var localeNames = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["surveyLocalization"]["localeNames"];
            if (localeNames) {
                var text = localeNames[value];
                if (text)
                    return text;
            }
        }
        return __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */].getPropertyValue(value);
    };
    SurveyDropdownPropertyEditor.prototype.setObject = function (value) {
        _super.prototype.setObject.call(this, value);
        this.beginValueUpdating();
        if (this.koChoices().length == 0) {
            this.koChoices(this.getLocalizableChoices());
        }
        this.endValueUpdating();
    };
    SurveyDropdownPropertyEditor.prototype.getLocalizableChoices = function () {
        var choices = this.getPropertyChoices();
        if (!choices || choices.length == 0)
            return [];
        var res = new Array();
        __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ItemValue"].setData(res, choices);
        for (var i = 0; i < res.length; i++) {
            var value = res[i].value;
            var text = this.getValueText(value);
            if (text != value) {
                res[i].text = text;
            }
        }
        return res;
    };
    SurveyDropdownPropertyEditor.prototype.getPropertyChoices = function () {
        if (!this.property)
            return [];
        return this.property["getChoices"]
            ? this.property["getChoices"](this.object)
            : this.property.choices;
    };
    return SurveyDropdownPropertyEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__["a" /* SurveyPropertyEditorBase */]));

var SurveyBooleanPropertyEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyBooleanPropertyEditor, _super);
    function SurveyBooleanPropertyEditor(property) {
        return _super.call(this, property) || this;
    }
    Object.defineProperty(SurveyBooleanPropertyEditor.prototype, "editorType", {
        get: function () {
            return "boolean";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyBooleanPropertyEditor.prototype, "alwaysShowEditor", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyBooleanPropertyEditor.prototype, "canShowDisplayNameOnTop", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    SurveyBooleanPropertyEditor.prototype.getValueText = function (value) {
        return __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */].getPropertyValue(value);
    };
    return SurveyBooleanPropertyEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__["a" /* SurveyPropertyEditorBase */]));

var SurveyNumberPropertyEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyNumberPropertyEditor, _super);
    function SurveyNumberPropertyEditor(property) {
        return _super.call(this, property) || this;
    }
    Object.defineProperty(SurveyNumberPropertyEditor.prototype, "editorType", {
        get: function () {
            return "number";
        },
        enumerable: true,
        configurable: true
    });
    SurveyNumberPropertyEditor.prototype.getCorrectedValue = function (value) {
        if (!value)
            return value;
        if (typeof value === "string" || value instanceof String) {
            value = Number(value);
            if (!value)
                value = 0;
        }
        return value;
    };
    return SurveyNumberPropertyEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyEditorBase__["a" /* SurveyPropertyEditorBase */]));

SurveyPropertyEditorFactory.registerEditor("string", function (property) {
    return new SurveyStringPropertyEditor(property);
});
SurveyPropertyEditorFactory.registerEditor("dropdown", function (property) {
    return new SurveyDropdownPropertyEditor(property);
});
SurveyPropertyEditorFactory.registerEditor("boolean", function (property) {
    return new SurveyBooleanPropertyEditor(property);
});
SurveyPropertyEditorFactory.registerEditor("number", function (property) {
    return new SurveyNumberPropertyEditor(property);
});


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ObjType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SurveyHelper; });

var ObjType;
(function (ObjType) {
    ObjType[ObjType["Unknown"] = 0] = "Unknown";
    ObjType[ObjType["Survey"] = 1] = "Survey";
    ObjType[ObjType["Page"] = 2] = "Page";
    ObjType[ObjType["Panel"] = 3] = "Panel";
    ObjType[ObjType["Question"] = 4] = "Question";
})(ObjType || (ObjType = {}));
var SurveyHelper = (function () {
    function SurveyHelper() {
    }
    SurveyHelper.getNewPageName = function (objs) {
        return SurveyHelper.getNewName(objs, __WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].getString("ed.newPageName"));
    };
    SurveyHelper.getNewQuestionName = function (objs) {
        return SurveyHelper.getNewName(objs, __WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].getString("ed.newQuestionName"));
    };
    SurveyHelper.getNewPanelName = function (objs) {
        return SurveyHelper.getNewName(objs, __WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].getString("ed.newPanelName"));
    };
    SurveyHelper.getNewName = function (objs, baseName) {
        var hash = {};
        for (var i = 0; i < objs.length; i++) {
            hash[objs[i].name] = true;
        }
        var num = 1;
        while (true) {
            if (!hash[baseName + num.toString()])
                break;
            num++;
        }
        return baseName + num.toString();
    };
    SurveyHelper.getObjectType = function (obj) {
        if (!obj || !obj["getType"])
            return ObjType.Unknown;
        if (obj.getType() == "page")
            return ObjType.Page;
        if (obj.getType() == "panel")
            return ObjType.Panel;
        if (obj.getType() == "survey")
            return ObjType.Survey;
        if (obj["name"])
            return ObjType.Question;
        return ObjType.Unknown;
    };
    SurveyHelper.getObjectTypeStr = function (obj) {
        var objType = SurveyHelper.getObjectType(obj);
        if (objType === ObjType.Survey)
            return "survey";
        if (objType === ObjType.Page)
            return "page";
        if (objType === ObjType.Panel)
            return "panel";
        if (objType === ObjType.Question)
            return "question";
        return "unknown";
    };
    SurveyHelper.getObjectName = function (obj) {
        if (obj["name"])
            return obj["name"];
        var objType = SurveyHelper.getObjectType(obj);
        if (objType != ObjType.Page)
            return "";
        var data = obj["data"];
        if (!data)
            data = obj["survey"]; //TODO
        var index = data.pages.indexOf(obj);
        return "[Page " + (index + 1) + "]";
    };
    SurveyHelper.getElements = function (element, includeHidden) {
        if (includeHidden === void 0) { includeHidden = false; }
        if (!element)
            return [];
        if (element.getElementsInDesign)
            return element.getElementsInDesign(includeHidden);
        if (element.elements)
            return element.elements;
        return [];
    };
    SurveyHelper.isPropertyVisible = function (obj, property, onCanShowPropertyCallback) {
        if (onCanShowPropertyCallback === void 0) { onCanShowPropertyCallback = null; }
        if (!property || !property.visible)
            return false;
        if (onCanShowPropertyCallback && !onCanShowPropertyCallback(obj, property))
            return false;
        return true;
    };
    SurveyHelper.scrollIntoViewIfNeeded = function (el, pageEl) {
        if (!el || !el.scrollIntoView || !pageEl)
            return;
        var rect = el.getBoundingClientRect();
        var height = pageEl.offsetParent
            ? pageEl.offsetParent.clientHeight
            : pageEl.clientHeight;
        if (rect.top < pageEl.offsetTop) {
            el.scrollIntoView();
        }
        else {
            if (rect.bottom > height &&
                (rect.top > pageEl.offsetTop + height || rect.height < height)) {
                el.scrollIntoView(false);
            }
        }
    };
    return SurveyHelper;
}());



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__propertyEditorBase__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyEditorFactory__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rmodal__ = __webpack_require__(29);
/* unused harmony export SurveyPropertyModalEditorCustomWidget */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyModalEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SurveyPropertyTextEditor; });
/* unused harmony export SurveyPropertyHtmlEditor */






var SurveyPropertyModalEditorCustomWidget = (function () {
    function SurveyPropertyModalEditorCustomWidget(json) {
        this.json = json;
    }
    SurveyPropertyModalEditorCustomWidget.prototype.afterRender = function (editor, el) {
        if (this.json && this.json.afterRender) {
            if (!el.id) {
                el.id =
                    SurveyPropertyModalEditorCustomWidget.customWidgetName +
                        SurveyPropertyModalEditorCustomWidget.customWidgetId;
                SurveyPropertyModalEditorCustomWidget.customWidgetId++;
            }
            this.json.afterRender(editor, el);
            if (this.json.destroy) {
                var self = this;
                __WEBPACK_IMPORTED_MODULE_1_knockout__["utils"].domNodeDisposal.addDisposeCallback(el, function () {
                    self.destroy(editor, el);
                });
            }
        }
    };
    SurveyPropertyModalEditorCustomWidget.prototype.destroy = function (editor, el) {
        if (this.json && this.json.destroy) {
            this.json.destroy(editor, el);
        }
    };
    return SurveyPropertyModalEditorCustomWidget;
}());

SurveyPropertyModalEditorCustomWidget.customWidgetId = 1;
SurveyPropertyModalEditorCustomWidget.customWidgetName = "modalEditorCustomWidget";
var SurveyPropertyModalEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyModalEditor, _super);
    function SurveyPropertyModalEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.isShowingModalValue = false;
        _this.koTitleCaption = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("");
        _this.koHtmlTop = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("");
        _this.koHtmlBottom = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("");
        if (_this.property) {
            _this.koTitleCaption(__WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */]
                .getString("pe.editProperty")["format"](_this.property.name));
        }
        var name = property ? property.name : "";
        _this.modalName =
            "modelEditor" + _this.editorType + SurveyPropertyModalEditor.idCounter;
        SurveyPropertyModalEditor.idCounter++;
        _this.modalNameTarget = "#" + _this.modalName;
        var self = _this;
        _this.koShowApplyButton = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](true);
        self.onHideModal = function () { };
        self.onApplyClick = function () {
            self.apply();
        };
        self.onOkClick = function () {
            self.apply();
            if (!self.koHasError())
                self.onHideModal();
        };
        self.onResetClick = function () {
            self.reset();
            self.onHideModal();
        };
        self.onShowModal = function () {
            self.beforeShow();
            var modal = new __WEBPACK_IMPORTED_MODULE_5_rmodal__["a" /* default */](document.querySelector(self.modalNameTarget), {
                bodyClass: "",
                closeTimeout: 100,
                dialogOpenClass: "animated fadeInDown",
                focus: false
            });
            modal.open();
            document.addEventListener("keydown", function (ev) {
                modal.keydown(ev);
            }, false);
            self.onHideModal = function () {
                self.beforeCloseModal();
                modal.close();
            };
        };
        self.koAfterRender = function (el, con) {
            return self.afterRender(el, con);
        };
        return _this;
    }
    SurveyPropertyModalEditor.registerCustomWidget = function (editorType, json) {
        if (!SurveyPropertyModalEditor.customWidgets)
            SurveyPropertyModalEditor.customWidgets = {};
        SurveyPropertyModalEditor.customWidgets[editorType] = new SurveyPropertyModalEditorCustomWidget(json);
    };
    SurveyPropertyModalEditor.getCustomWidget = function (editorType) {
        if (!SurveyPropertyModalEditor.customWidgets)
            return null;
        return SurveyPropertyModalEditor.customWidgets[editorType];
    };
    SurveyPropertyModalEditor.prototype.setup = function () {
        _super.prototype.setup.call(this);
        this.beforeShow();
    };
    Object.defineProperty(SurveyPropertyModalEditor.prototype, "isModal", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyModalEditor.prototype, "isShowingModal", {
        get: function () {
            return this.isShowingModalValue;
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyModalEditor.prototype.beforeShow = function () {
        this.isShowingModalValue = true;
    };
    SurveyPropertyModalEditor.prototype.beforeCloseModal = function () {
        this.isShowingModalValue = false;
    };
    SurveyPropertyModalEditor.prototype.onOptionsChanged = function () {
        this.koShowApplyButton = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](!this.options || this.options.showApplyButtonInEditors);
    };
    SurveyPropertyModalEditor.prototype.reset = function () {
        this.editingValue = this.koValue();
    };
    SurveyPropertyModalEditor.prototype.setObject = function (value) {
        this.editingObject = value;
        _super.prototype.setObject.call(this, value);
        if (this.options && this.property) {
            var html = this.options.onPropertyEditorModalShowDescriptionCallback(this.property.name, value);
            if (html) {
                if (html.top)
                    this.koHtmlTop(html.top);
                if (html.bottom)
                    this.koHtmlBottom(html.bottom);
            }
        }
    };
    Object.defineProperty(SurveyPropertyModalEditor.prototype, "isEditable", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyModalEditor.prototype.afterRender = function (elements, con) {
        var customWidget = SurveyPropertyModalEditor.getCustomWidget(this.editorType);
        if (!customWidget)
            return;
        var el = this.GetFirstNonTextElement(elements);
        var tEl = elements[0];
        if (tEl.nodeName == "#text")
            tEl.data = "";
        tEl = elements[elements.length - 1];
        if (tEl.nodeName == "#text")
            tEl.data = "";
        customWidget.afterRender(this, el);
    };
    SurveyPropertyModalEditor.prototype.GetFirstNonTextElement = function (elements) {
        if (!elements || !elements.length)
            return;
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].nodeName != "#text" && elements[i].nodeName != "#comment")
                return elements[i];
        }
        return null;
    };
    return SurveyPropertyModalEditor;
}(__WEBPACK_IMPORTED_MODULE_2__propertyEditorBase__["a" /* SurveyPropertyEditorBase */]));

SurveyPropertyModalEditor.idCounter = 1;
var SurveyPropertyTextEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyTextEditor, _super);
    function SurveyPropertyTextEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.koTextValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
        var self = _this;
        _this.koTextValue.subscribe(function (newValue) {
            self.onkoTextValueChanged(newValue);
        });
        return _this;
    }
    Object.defineProperty(SurveyPropertyTextEditor.prototype, "editorType", {
        get: function () {
            return "text";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyTextEditor.prototype, "isEditable", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyTextEditor.prototype.getValueText = function (value) {
        if (!value)
            return null;
        var str = value;
        if (str.length > 20) {
            str = str.substr(0, 20) + "...";
        }
        return str;
    };
    SurveyPropertyTextEditor.prototype.onkoTextValueChanged = function (newValue) { };
    SurveyPropertyTextEditor.prototype.onValueChanged = function () {
        this.koTextValue(this.editingValue);
    };
    SurveyPropertyTextEditor.prototype.onBeforeApply = function () {
        this.setValueCore(this.koTextValue());
    };
    return SurveyPropertyTextEditor;
}(SurveyPropertyModalEditor));

var SurveyPropertyHtmlEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyHtmlEditor, _super);
    function SurveyPropertyHtmlEditor(property) {
        return _super.call(this, property) || this;
    }
    Object.defineProperty(SurveyPropertyHtmlEditor.prototype, "editorType", {
        get: function () {
            return "html";
        },
        enumerable: true,
        configurable: true
    });
    return SurveyPropertyHtmlEditor;
}(SurveyPropertyTextEditor));

__WEBPACK_IMPORTED_MODULE_3__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("text", function (property) {
    return new SurveyPropertyTextEditor(property);
});
__WEBPACK_IMPORTED_MODULE_3__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("html", function (property) {
    return new SurveyPropertyHtmlEditor(property);
});


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sortablejs__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_sortablejs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_sortablejs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyItemsEditor; });





var SurveyPropertyItemsEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyItemsEditor, _super);
    function SurveyPropertyItemsEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.onDragEnd = function (evt) {
            var choices = _this.koItems();
            var choice = choices[evt.oldIndex];
            choices.splice(evt.oldIndex, 1);
            choices.splice(evt.newIndex, 0, choice);
            _this.koItems(choices);
        };
        _this.afterItemsRendered = function (elements) {
            __WEBPACK_IMPORTED_MODULE_2_sortablejs___default.a.create(elements.filter(function (el) { return el.nodeName === "TBODY"; })[0], {
                handle: ".svd-drag-handle",
                animation: 150,
                onEnd: _this.onDragEnd
            });
        };
        _this.koItems = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
        _this.editingValue = [];
        _this.koAllowAddRemoveItems = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](true);
        var self = _this;
        self.onDeleteClick = function (item) {
            self.koItems.remove(item);
        };
        self.onClearClick = function (item) {
            self.koItems.removeAll();
        };
        self.onAddClick = function () {
            self.AddItem();
        };
        return _this;
    }
    SurveyPropertyItemsEditor.prototype.getValueText = function (value) {
        var len = value ? value.length : 0;
        return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.items")["format"](len);
    };
    SurveyPropertyItemsEditor.prototype.getCorrectedValue = function (value) {
        if (value == null || !Array.isArray(value))
            value = [];
        return value;
    };
    SurveyPropertyItemsEditor.prototype.createEditorOptions = function () {
        return { allowAddRemoveItems: true };
    };
    SurveyPropertyItemsEditor.prototype.onSetEditorOptions = function (editorOptions) {
        this.koAllowAddRemoveItems(editorOptions.allowAddRemoveItems);
    };
    SurveyPropertyItemsEditor.prototype.AddItem = function () {
        this.koItems.push(this.createNewEditorItem());
    };
    SurveyPropertyItemsEditor.prototype.setupItems = function () {
        this.koItems(this.getItemsFromValue());
    };
    SurveyPropertyItemsEditor.prototype.onValueChanged = function () {
        if (this.isShowingModal) {
            this.setupItems();
        }
    };
    SurveyPropertyItemsEditor.prototype.setup = function () {
        _super.prototype.setup.call(this);
        this.updateValue();
    };
    SurveyPropertyItemsEditor.prototype.beforeShow = function () {
        _super.prototype.beforeShow.call(this);
    };
    SurveyPropertyItemsEditor.prototype.getItemsFromValue = function (value) {
        if (value === void 0) { value = null; }
        var items = [];
        if (!value)
            value = this.editingValue;
        for (var i = 0; i < value.length; i++) {
            items.push(this.createEditorItem(value[i]));
        }
        return items;
    };
    SurveyPropertyItemsEditor.prototype.onBeforeApply = function () {
        var items = [];
        var internalItems = this.koItems();
        for (var i = 0; i < internalItems.length; i++) {
            items.push(this.createItemFromEditorItem(internalItems[i]));
        }
        this.setValueCore(items);
    };
    SurveyPropertyItemsEditor.prototype.createNewEditorItem = function () {
        throw "Override 'createNewEditorItem' method";
    };
    SurveyPropertyItemsEditor.prototype.createEditorItem = function (item) {
        return item;
    };
    SurveyPropertyItemsEditor.prototype.createItemFromEditorItem = function (editorItem) {
        return editorItem;
    };
    return SurveyPropertyItemsEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__["a" /* SurveyPropertyModalEditor */]));



/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__questionEditorProperties__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__questionEditorDefinition__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rmodal__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__surveyHelper__ = __webpack_require__(5);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyEditorShowWindow; });
/* unused harmony export SurveyQuestionProperties */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SurveyQuestionEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SurveyQuestionEditorTab; });







var SurveyPropertyEditorShowWindow = (function () {
    function SurveyPropertyEditorShowWindow() {
        this.koVisible = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.koEditor = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](null);
    }
    SurveyPropertyEditorShowWindow.prototype.show = function (questionBase, elWindow, onChanged, options, onClosed) {
        if (options === void 0) { options = null; }
        if (onClosed === void 0) { onClosed = null; }
        var editor = new SurveyQuestionEditor(questionBase, this.onCanShowPropertyCallback, null, options);
        editor.onChanged = onChanged;
        this.koEditor(editor);
        this.koVisible(true);
        var modal = new __WEBPACK_IMPORTED_MODULE_5_rmodal__["a" /* default */](elWindow, {
            bodyClass: "",
            closeTimeout: 100,
            dialogOpenClass: "animated fadeIn",
            focus: false,
            afterClose: function () {
                if (onClosed)
                    onClosed();
            }
        });
        modal.open();
        document.addEventListener("keydown", function (ev) {
            modal.keydown(ev);
        }, false);
        editor.onHideWindow = function () {
            modal.close();
        };
    };
    return SurveyPropertyEditorShowWindow;
}());

var SurveyQuestionProperties = (function () {
    function SurveyQuestionProperties(obj, onCanShowPropertyCallback) {
        this.obj = obj;
        this.onCanShowPropertyCallback = onCanShowPropertyCallback;
        this.properties = __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["JsonObject"].metaData["getPropertiesByObj"]
            ? __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["JsonObject"].metaData["getPropertiesByObj"](this.obj)
            : __WEBPACK_IMPORTED_MODULE_4_survey_knockout__["JsonObject"].metaData.getProperties(this.obj.getType());
        this.editorDefinition = __WEBPACK_IMPORTED_MODULE_3__questionEditorDefinition__["a" /* SurveyQuestionEditorDefinition */].getAllDefinitionsByClass(this.obj.getType());
    }
    SurveyQuestionProperties.prototype.getProperty = function (propertyName) {
        var property = null;
        for (var i = 0; i < this.properties.length; i++) {
            if (this.properties[i].name == propertyName) {
                property = this.properties[i];
                break;
            }
        }
        return __WEBPACK_IMPORTED_MODULE_6__surveyHelper__["b" /* SurveyHelper */].isPropertyVisible(this.obj, property, this.onCanShowPropertyCallback)
            ? property
            : null;
    };
    SurveyQuestionProperties.prototype.getProperties = function (tabName) {
        var _this = this;
        return this.editorDefinition
            .reduce(function (a, b) { return a.concat(b.properties); }, [
            { name: tabName, tab: tabName }
        ])
            .filter(function (prop) {
            return prop !== undefined && typeof prop !== "string" && prop.tab === tabName;
        })
            .map(function (prop) { return typeof prop !== "string" && _this.getProperty(prop.name); })
            .filter(function (prop) {
            return !!prop &&
                __WEBPACK_IMPORTED_MODULE_6__surveyHelper__["b" /* SurveyHelper */].isPropertyVisible(_this.obj, prop, _this.onCanShowPropertyCallback);
        });
    };
    return SurveyQuestionProperties;
}());

var SurveyQuestionEditor = (function () {
    function SurveyQuestionEditor(obj, onCanShowPropertyCallback, className, options) {
        if (className === void 0) { className = null; }
        if (options === void 0) { options = null; }
        this.obj = obj;
        this.onCanShowPropertyCallback = onCanShowPropertyCallback;
        this.className = className;
        this.options = options;
        var self = this;
        if (!this.className)
            this.className = this.obj.getType();
        this.properties = new SurveyQuestionProperties(obj, onCanShowPropertyCallback);
        self.onApplyClick = function () {
            self.apply();
        };
        self.onOkClick = function () {
            self.doCloseWindow(false);
        };
        self.onResetClick = function () {
            self.doCloseWindow(true);
        };
        this.onTabClick = function (tab) {
            self.koActiveTab(tab.name);
        };
        var tabs = this.buildTabs();
        this.koTabs = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"](tabs);
        this.koActiveTab = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.koActiveTab.subscribe(function (newValue) {
            for (var i = 0; i < self.koTabs().length; i++) {
                if (self.koTabs()[i].name == newValue) {
                    self.koTabs()[i].beforeShow();
                    return;
                }
            }
        });
        if (tabs.length > 0) {
            this.koActiveTab(tabs[0].name);
        }
        this.koTitle = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.koShowApplyButton = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](!this.options || this.options.showApplyButtonInEditors);
        if (this.obj["name"]) {
            this.koTitle(__WEBPACK_IMPORTED_MODULE_1__editorLocalization__["a" /* editorLocalization */]
                .getString("pe.qEditorTitle")["format"](this.obj["name"]));
        }
        else {
            this.koTitle(__WEBPACK_IMPORTED_MODULE_1__editorLocalization__["a" /* editorLocalization */].getString("pe.surveyEditorTitle"));
        }
    }
    SurveyQuestionEditor.prototype.doCloseWindow = function (isCancel) {
        if (isCancel) {
            this.reset();
        }
        else {
            this.apply();
        }
        if (isCancel || !this.hasError()) {
            var tabs = this.koTabs();
            for (var i = 0; i < tabs.length; i++) {
                tabs[i].doCloseWindow();
            }
            if (this.onHideWindow)
                this.onHideWindow();
        }
    };
    SurveyQuestionEditor.prototype.hasError = function () {
        var tabs = this.koTabs();
        for (var i = 0; i < tabs.length; i++) {
            if (tabs[i].hasError()) {
                this.koActiveTab(tabs[i].name);
                return true;
            }
        }
        return false;
    };
    SurveyQuestionEditor.prototype.reset = function () {
        var tabs = this.koTabs();
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].reset();
        }
    };
    SurveyQuestionEditor.prototype.apply = function () {
        if (this.hasError())
            return;
        var tabs = this.koTabs();
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].apply();
        }
        if (this.onChanged) {
            this.onChanged(this.obj);
        }
    };
    SurveyQuestionEditor.prototype.buildTabs = function () {
        var tabs = [];
        var properties = new __WEBPACK_IMPORTED_MODULE_2__questionEditorProperties__["a" /* SurveyQuestionEditorProperties */](this.obj, __WEBPACK_IMPORTED_MODULE_3__questionEditorDefinition__["a" /* SurveyQuestionEditorDefinition */].getProperties(this.className), this.onCanShowPropertyCallback, this.options, false);
        if (__WEBPACK_IMPORTED_MODULE_3__questionEditorDefinition__["a" /* SurveyQuestionEditorDefinition */].isGeneralTabVisible(this.className)) {
            tabs.push(new SurveyQuestionEditorTab(this.obj, properties, "general"));
        }
        this.addPropertiesTabs(tabs);
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].onCanShowPropertyCallback = this.onCanShowPropertyCallback;
        }
        return tabs;
    };
    SurveyQuestionEditor.prototype.addPropertiesTabs = function (tabs) {
        var tabNames = __WEBPACK_IMPORTED_MODULE_3__questionEditorDefinition__["a" /* SurveyQuestionEditorDefinition */].getTabs(this.className);
        for (var i = 0; i < tabNames.length; i++) {
            var tabItem = tabNames[i];
            var properties = this.properties.getProperties(tabItem.name);
            if (properties.length > 0) {
                var propertyTab = new SurveyQuestionEditorTab(this.obj, new __WEBPACK_IMPORTED_MODULE_2__questionEditorProperties__["a" /* SurveyQuestionEditorProperties */](this.obj, properties, this.onCanShowPropertyCallback, this.options, true), tabItem.name);
                propertyTab.title = tabItem.title;
                tabs.push(propertyTab);
            }
        }
    };
    return SurveyQuestionEditor;
}());

var SurveyQuestionEditorTab = (function () {
    function SurveyQuestionEditorTab(obj, properties, _name) {
        if (properties === void 0) { properties = null; }
        this.obj = obj;
        this.properties = properties;
        this._name = _name;
        this.koAfterRender = function (el, con) { };
    }
    Object.defineProperty(SurveyQuestionEditorTab.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyQuestionEditorTab.prototype, "title", {
        get: function () {
            if (this.titleValue)
                return this.titleValue;
            var str = __WEBPACK_IMPORTED_MODULE_1__editorLocalization__["a" /* editorLocalization */].getString("pe.tabs." + this.name);
            return str ? str : this.name;
        },
        set: function (value) {
            this.titleValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyQuestionEditorTab.prototype, "htmlTemplate", {
        get: function () {
            return "questioneditortab";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyQuestionEditorTab.prototype, "templateObject", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    SurveyQuestionEditorTab.prototype.hasError = function () {
        return this.properties.hasError();
    };
    SurveyQuestionEditorTab.prototype.beforeShow = function () {
        this.properties.beforeShow();
    };
    SurveyQuestionEditorTab.prototype.reset = function () {
        this.properties.reset();
    };
    SurveyQuestionEditorTab.prototype.apply = function () {
        this.properties.apply();
    };
    SurveyQuestionEditorTab.prototype.doCloseWindow = function () { };
    SurveyQuestionEditorTab.prototype.getValue = function (property) {
        return property.getPropertyValue(this.obj);
    };
    return SurveyQuestionEditorTab;
}());



/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__propertyEditors_propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyObjectProperty; });


var SurveyObjectProperty = (function () {
    function SurveyObjectProperty(property, onPropertyChanged, propertyEditorOptions) {
        if (onPropertyChanged === void 0) { onPropertyChanged = null; }
        if (propertyEditorOptions === void 0) { propertyEditorOptions = null; }
        var _this = this;
        this.property = property;
        this.koIsShowEditor = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.afterRenderHandler = function (rootElement, elements) {
            _this.editor.setRenderedElements(rootElement, elements);
        };
        this.onPropertyChanged = onPropertyChanged;
        this.name = this.property.name;
        this.disabled = property["readOnly"];
        var self = this;
        var onItemChanged = function (newValue) {
            self.onEditorValueChanged(newValue);
        };
        this.editor = __WEBPACK_IMPORTED_MODULE_1__propertyEditors_propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].createEditor(property, onItemChanged);
        this.editor.onGetLocale = this.doOnGetLocale;
        this.editor.options = propertyEditorOptions;
        this.editorType = this.editor.editorType;
        this.isActive = false;
    }
    Object.defineProperty(SurveyObjectProperty.prototype, "displayName", {
        get: function () {
            return this.editor.displayName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyObjectProperty.prototype, "title", {
        get: function () {
            return this.editor.title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyObjectProperty.prototype, "isActive", {
        get: function () {
            return this.isActiveValue;
        },
        set: function (val) {
            if (this.isActive == val)
                return;
            this.isActiveValue = val;
            this.koIsShowEditor(!this.disabled && (this.editor.alwaysShowEditor || this.isActive));
            this.editor.activate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyObjectProperty.prototype, "koValue", {
        get: function () {
            return this.editor.koValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyObjectProperty.prototype, "koText", {
        get: function () {
            return this.editor.koText;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyObjectProperty.prototype, "koIsDefault", {
        get: function () {
            return this.editor.koIsDefault;
        },
        enumerable: true,
        configurable: true
    });
    SurveyObjectProperty.prototype.doOnGetLocale = function () {
        if (this.object && this.object["getLocale"])
            return this.object.getLocale();
        return "";
    };
    Object.defineProperty(SurveyObjectProperty.prototype, "object", {
        get: function () {
            return this.objectValue;
        },
        set: function (value) {
            this.objectValue = value;
            this.editor.object = value;
        },
        enumerable: true,
        configurable: true
    });
    SurveyObjectProperty.prototype.onEditorValueChanged = function (newValue) {
        if (this.onPropertyChanged && this.object)
            this.onPropertyChanged(this, newValue);
    };
    return SurveyObjectProperty;
}());



/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_timers__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_timers___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_timers__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyEditorBase; });




var SurveyPropertyEditorBase = (function () {
    function SurveyPropertyEditorBase(property) {
        this.editingValue_ = null;
        this.isApplyinNewValue = false;
        this.valueUpdatingCounter = 0;
        this.optionsValue = null;
        this.isRequriedValue = false;
        this.isCustomDisplayName = false;
        this.elements = [];
        this.isTabProperty = false;
        this.isInplaceProperty = false;
        this.iskoValueChanging = false;
        this.property_ = property;
        var self = this;
        this.koValue = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.koValue.subscribe(function (newValue) {
            self.onkoValueChanged(newValue);
        });
        this.koText = __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () {
            return self.getValueText(self.koValue());
        });
        this.koIsDefault = __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () {
            return self.property
                ? self.property.isDefaultValue(self.koValue())
                : false;
        });
        this.koHasError = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.koErrorText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
        this.setIsRequired();
        this.setTitleAndDisplayName();
    }
    SurveyPropertyEditorBase.prototype.setup = function () { };
    SurveyPropertyEditorBase.prototype.beforeShow = function () { };
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "editorType", {
        get: function () {
            throw "editorType is not defined";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "property", {
        get: function () {
            return this.property_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "defaultValue", {
        get: function () {
            return this.property.defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "editablePropertyName", {
        get: function () {
            return this.property ? this.property.name : "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "readOnly", {
        get: function () {
            return this.property ? this.property.readOnly : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "alwaysShowEditor", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "title", {
        get: function () {
            return this.titleValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "isDiplayNameVisible", {
        get: function () {
            return ((!this.isTabProperty || !this.isModal) &&
                !this.isInplaceProperty &&
                this.displayName !== ".");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "displayName", {
        get: function () {
            return this.displayNameValue;
        },
        set: function (val) {
            this.isCustomDisplayName = true;
            this.displayNameValue = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "showDisplayNameOnTop", {
        get: function () {
            return this.isDiplayNameVisible && this.canShowDisplayNameOnTop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "canShowDisplayNameOnTop", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "contentTemplateName", {
        get: function () {
            var res = "propertyeditor";
            if (this.isModal) {
                res += "-modalcontent";
            }
            else {
                res += "-" + this.editorType;
            }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "isModal", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "object", {
        get: function () {
            return this.objectValue;
        },
        set: function (value) {
            var _this = this;
            this.objectValue = value;
            if (typeof value.registerFunctionOnPropertyValueChanged === "function") {
                value.registerFunctionOnPropertyValueChanged(this.property.name, function () { return _this.updateValue(); }, this.property.name);
            }
            this.setIsRequired();
            this.setTitleAndDisplayName();
            this.setObject(this.object);
            this.updateValue();
            if (this.options && this.property) {
                this.options.onPropertyEditorObjectSetCallback(this.property.name, this.object, this);
            }
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyEditorBase.prototype.getValueText = function (value) {
        return value;
    };
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "editingValue", {
        get: function () {
            return this.editingValue_;
        },
        set: function (value) {
            value = this.getCorrectedValue(value);
            this.setValueCore(value);
            this.onValueChanged();
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyEditorBase.prototype.hasError = function () {
        this.koHasError(this.checkForErrors());
        return this.koHasError();
    };
    SurveyPropertyEditorBase.prototype.checkForErrors = function () {
        var errorText = "";
        if (this.isRequired) {
            var er = this.isValueEmpty(this.koValue());
            if (er) {
                errorText = __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString("pe.propertyIsEmpty");
            }
        }
        if (!errorText &&
            this.property &&
            this.options &&
            this.options.onGetErrorTextOnValidationCallback) {
            errorText = this.options.onGetErrorTextOnValidationCallback(this.property.name, this.object, this.koValue());
        }
        this.koErrorText(errorText);
        return errorText !== "";
    };
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "isRequired", {
        get: function () {
            return this.isRequriedValue;
        },
        enumerable: true,
        configurable: true
    });
    //TODO remove this function, replace it with property.isRequired later
    SurveyPropertyEditorBase.prototype.setIsRequired = function () {
        this.isRequriedValue = false;
        if (!this.property || !this.object || !this.object.getType)
            return;
        var jsonClass = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData.findClass(this.object.getType());
        while (jsonClass) {
            var reqProperties = jsonClass.requiredProperties;
            if (reqProperties) {
                this.isRequriedValue = reqProperties.indexOf(this.property.name) > -1;
                if (this.isRequriedValue)
                    return;
            }
            if (!jsonClass.parentName)
                return;
            jsonClass = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData.findClass(jsonClass.parentName);
        }
    };
    SurveyPropertyEditorBase.prototype.setTitleAndDisplayName = function () {
        if (this.isCustomDisplayName)
            return;
        this.displayNameValue = this.property ? this.property.name : "";
        this.titleValue = "";
        if (!this.property)
            return;
        var locName = this.property.name;
        this.displayNameValue = __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getPropertyName(locName);
        var title = __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getPropertyTitle(locName);
        this.titleValue = title;
    };
    SurveyPropertyEditorBase.prototype.onBeforeApply = function () { };
    SurveyPropertyEditorBase.prototype.apply = function () {
        if (this.hasError())
            return;
        this.onBeforeApply();
        this.isApplyinNewValue = true;
        this.koValue(this.editingValue);
        this.isApplyinNewValue = false;
    };
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "locale", {
        get: function () {
            if (this.onGetLocale)
                return this.onGetLocale();
            return "";
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyEditorBase.prototype.getLocale = function () {
        return this.locale;
    };
    SurveyPropertyEditorBase.prototype.getMarkdownHtml = function (text) {
        return text;
    };
    Object.defineProperty(SurveyPropertyEditorBase.prototype, "options", {
        get: function () {
            return this.optionsValue;
        },
        set: function (value) {
            this.optionsValue = value;
            this.onOptionsChanged();
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyEditorBase.prototype.onOptionsChanged = function () { };
    SurveyPropertyEditorBase.prototype.setValueCore = function (value) {
        this.editingValue_ = value;
    };
    SurveyPropertyEditorBase.prototype.setObject = function (value) {
        if (this.options) {
            var editorOptions = this.createEditorOptions();
            this.options.onSetPropertyEditorOptionsCallback(this.editablePropertyName, value, editorOptions);
            this.onSetEditorOptions(editorOptions);
        }
    };
    SurveyPropertyEditorBase.prototype.setRenderedElements = function (rootElement, elements) {
        this.rootElement = rootElement;
        this.elements = elements;
    };
    SurveyPropertyEditorBase.prototype.activate = function () {
        if (!!this.rootElement) {
            var elements = this.rootElement.getElementsByClassName("svd_editor_control");
            if (elements.length > 0) {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_timers__["setTimeout"])(function () { return elements[0].focus({ preventScroll: true }); }, 1);
            }
        }
    };
    SurveyPropertyEditorBase.prototype.createEditorOptions = function () {
        return {};
    };
    SurveyPropertyEditorBase.prototype.onSetEditorOptions = function (editorOptions) { };
    SurveyPropertyEditorBase.prototype.onValueChanged = function () { };
    SurveyPropertyEditorBase.prototype.getCorrectedValue = function (value) {
        return value;
    };
    SurveyPropertyEditorBase.prototype.beginValueUpdating = function () {
        this.valueUpdatingCounter++;
    };
    SurveyPropertyEditorBase.prototype.endValueUpdating = function () {
        if (this.valueUpdatingCounter > 0) {
            this.valueUpdatingCounter--;
        }
    };
    SurveyPropertyEditorBase.prototype.updateValue = function () {
        this.beginValueUpdating();
        this.koValue(this.getValue());
        this.editingValue = this.koValue();
        if (this.onValueUpdated)
            this.onValueUpdated(this.editingValue);
        this.endValueUpdating();
    };
    SurveyPropertyEditorBase.prototype.getValue = function () {
        return this.property && this.object
            ? this.property.getPropertyValue(this.object)
            : null;
    };
    SurveyPropertyEditorBase.prototype.onkoValueChanged = function (newValue) {
        if (this.valueUpdatingCounter > 0 || this.iskoValueChanging)
            return;
        this.iskoValueChanging = true;
        newValue = this.getCorrectedValue(newValue);
        if (this.options && this.property && this.object) {
            var options = {
                propertyName: this.property.name,
                obj: this.object,
                value: newValue,
                newValue: null,
                doValidation: false
            };
            this.options.onValueChangingCallback(options);
            if (!this.isValueEmpty(options.newValue)) {
                this.koValue(options.newValue);
            }
            if (options.doValidation) {
                this.hasError();
            }
        }
        if (!this.isApplyinNewValue) {
            this.editingValue = newValue;
        }
        this.iskoValueChanging = false;
        if (this.property && this.object && this.getValue() == newValue)
            return;
        if (this.onChanged != null)
            this.onChanged(newValue);
    };
    SurveyPropertyEditorBase.prototype.isValueEmpty = function (val) {
        //TODO remove the line
        if (__WEBPACK_IMPORTED_MODULE_1_survey_knockout__["Base"]["isValueEmpty"])
            return __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["Base"]["isValueEmpty"](val);
        return __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["Helpers"].isValueEmpty(val);
    };
    return SurveyPropertyEditorBase;
}());



/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_ddmenu__ = __webpack_require__(103);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_utils__ = __webpack_require__(16);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyForDesigner; });
/* harmony export (immutable) */ __webpack_exports__["b"] = registerAdorner;
/* harmony export (immutable) */ __webpack_exports__["c"] = removeAdorners;






var SurveyForDesigner = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyForDesigner, _super);
    function SurveyForDesigner(jsonObj, renderedElement, css) {
        if (jsonObj === void 0) { jsonObj = null; }
        if (renderedElement === void 0) { renderedElement = null; }
        if (css === void 0) { css = null; }
        var _this = _super.call(this, jsonObj, renderedElement, css) || this;
        _this.onSelectedElementChanged = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
        _this.onEditButtonClick = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
        _this.onGetMenuItems = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
        _this.onElementDoubleClick = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Event"]();
        var self = _this;
        _this.setDesignMode(true);
        _this.onAfterRenderPage.add(function (sender, options) {
            options.page["onAfterRenderPage"](options.htmlElement);
        });
        _this.onAfterRenderQuestion.add(function (sender, options) {
            options.question["onAfterRenderQuestion"](options.htmlElement);
        });
        _this.onAfterRenderPanel.add(function (sender, options) {
            options.panel["onAfterRenderPanel"](options.htmlElement);
        });
        _this.editQuestionClick = function () {
            self.onEditButtonClick.fire(self, null);
        };
        _this.onUpdateQuestionCssClasses.add(onUpdateQuestionCssClasses);
        return _this;
    }
    SurveyForDesigner.prototype.updateElementAllowingOptions = function (obj) {
        if (this.onUpdateElementAllowingOptions && obj["allowingOptions"]) {
            obj["allowingOptions"].obj = obj;
            this.onUpdateElementAllowingOptions(obj["allowingOptions"]);
        }
    };
    SurveyForDesigner.prototype.getMenuItems = function (obj) {
        var items = [];
        var options = { obj: obj, items: items };
        this.onGetMenuItems.fire(this, options);
        return options.items;
    };
    Object.defineProperty(SurveyForDesigner.prototype, "selectedElement", {
        get: function () {
            return this.selectedElementValue;
        },
        set: function (value) {
            if (value && value.selectedElementInDesign)
                value = value.selectedElementInDesign;
            if (value == this.selectedElementValue)
                return;
            var oldValue = this.selectedElementValue;
            this.selectedElementValue = value;
            if (oldValue != null && oldValue["onSelectedElementChanged"]) {
                oldValue["onSelectedElementChanged"]();
            }
            if (this.selectedElementValue != null &&
                this.selectedElementValue["onSelectedElementChanged"]) {
                this.selectedElementValue["onSelectedElementChanged"]();
            }
            this.onSelectedElementChanged.fire(this, {
                oldElement: oldValue,
                newElement: value
            });
        },
        enumerable: true,
        configurable: true
    });
    SurveyForDesigner.prototype.doElementDoubleClick = function (obj) {
        this.onElementDoubleClick.fire(this, { element: obj });
    };
    SurveyForDesigner.prototype.getEditorLocString = function (value) {
        return __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString(value);
    };
    return SurveyForDesigner;
}(__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Survey"]));

function getSurvey(el) {
    if (!el)
        return null;
    var res = el["survey"];
    if (res)
        return res;
    return el["data"];
}
function panelBaseOnCreating(self) {
    self.dragEnterCounter = 0;
    self.emptyElement = null;
    self.koRows.subscribe(function (changes) {
        if (self.emptyElement) {
            self.emptyElement.style.display = self.koRows().length > 0 ? "none" : "";
        }
    });
}
function elementOnCreating(self, className) {
    self.allowingOptions = {
        allowDelete: true,
        allowEdit: true,
        allowCopy: true,
        allowAddToToolbox: true,
        allowDragging: true,
        allowChangeType: true
    };
    self.dragDropHelperValue = null;
    self.dragDropHelper = function () {
        if (self.dragDropHelperValue == null) {
            self.dragDropHelperValue = getSurvey(self)["dragDropHelper"];
        }
        return self.dragDropHelperValue;
    };
    self.renderedElement = null;
    self.addonsElement = null;
    self.koIsDragging = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false);
    self.koIsSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false);
    self.koIsDragging.subscribe(function (newValue) {
        if (self.renderedElement) {
            self.renderedElement.style.opacity = newValue ? 0.4 : 1;
        }
    });
    self.koIsSelected.subscribe(function (newValue) {
        if (self.renderedElement) {
            if (newValue) {
                self.renderedElement.classList.add("svd_q_selected");
            }
            else {
                self.renderedElement.classList.remove("svd_q_selected");
            }
        }
        if (self.addonsElement) {
            self.addonsElement.style.display = newValue ? "" : "none";
        }
    });
}
function addEmptyPanelElement(root, dragDropHelper, self) {
    var eDiv = document.createElement("div");
    eDiv.className = "well card card-block";
    eDiv.ondragover = function (e) {
        dragDropHelper.doDragDropOver(e, self);
    };
    var eSpan = document.createElement("span");
    eSpan.textContent = getSurvey(self).getEditorLocString("survey.dropQuestion");
    eDiv.appendChild(eSpan);
    root.appendChild(eDiv);
    return eDiv;
}
var question_design_class = "sv_qstn svd_question well well-sm card card-block svd_q_design_border";
var panel_design_class = "sv_p_container svd_question well well-sm card card-block svd_q_design_border";
function createQuestionDesignItem(obj, item) {
    var res = document.createElement("li");
    var btn = document.createElement("button");
    btn.innerText = item.text;
    var onClick = item.onClick;
    btn.onclick = function () {
        onClick(obj, item);
    };
    btn.className = "btn btn-primary btn-sm btn-xs";
    res.appendChild(btn);
    return res;
}
function createElementAddons(obj, data, isPanel) {
    var main = document.createElement("div");
    main.className = "svd_question_menu btn-group";
    main["role"] = "group";
    var btn = document.createElement("button");
    btn.type = "button";
    btn.className = "btn btn-primary btn-sm btn-xs";
    btn.onclick = function (e) {
        data.editQuestionClick();
    };
    var span = document.createElement("span");
    span.innerText = data.getEditorLocString("survey.edit");
    btn.appendChild(span);
    if (obj["allowingOptions"] && obj["allowingOptions"].allowEdit) {
        main.appendChild(btn);
    }
    var nodes = [];
    var menuItems = data.getMenuItems(obj);
    if (menuItems.length > 0) {
        for (var i = 0; i < menuItems.length; i++) {
            nodes.push(createQuestionDesignItem(obj, menuItems[i]));
        }
        var ddmenu = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_ddmenu__["a" /* default */])(nodes, "element-addons");
        main.appendChild(ddmenu);
    }
    return main;
}
//var lastElementOnClick: HTMLElement = null;
function elementOnAfterRendering(el, self, className, isPanel, disable) {
    self.renderedElement = el;
    self.renderedElement.classList.add("svd_question");
    self.renderedElement.classList.add("svd_q_design_border");
    getSurvey(self).updateElementAllowingOptions(self);
    if (self.koIsSelected())
        self.renderedElement.classList.add("svd_q_selected");
    el.style.opacity = self.koIsDragging() ? 0.4 : 1;
    el.draggable = self.allowingOptions.allowDragging;
    el.ondragover = function (e) {
        if (!self.allowingOptions.allowDragging)
            return false;
        if (!e["markEvent"]) {
            e["markEvent"] = true;
            self.dragDropHelper().doDragDropOver(e, self, true);
            return false;
        }
    };
    el.ondrop = function (e) {
        if (!e["markEvent"]) {
            e["markEvent"] = true;
            self.dragDropHelper().doDrop(e);
        }
    };
    el.ondragstart = function (e) {
        if (!self.allowingOptions.allowDragging)
            return false;
        if (!e["markEvent"]) {
            e["markEvent"] = true;
            self.dragDropHelper().startDragQuestion(e, self);
        }
    };
    el.ondragend = function (e) {
        self.dragDropHelper().end();
    };
    el.onclick = function (e) {
        if (!e["markEvent"]) {
            e["markEvent"] = true;
            if (self.parent) {
                getSurvey(self)["selectedElement"] = self;
            }
        }
    };
    // el.onkeydown = function(e) {
    //   if (e.witch == 46) getSurvey(self).deleteCurrentObjectClick();
    //   return true;
    // };
    el.ondblclick = function (e) {
        getSurvey(self).doElementDoubleClick(self);
    };
    disable = disable && !(self.getType() == "paneldynamic"); //TODO
    if (disable) {
        var childs = el.childNodes;
        for (var i = 0; i < childs.length; i++) {
            if (childs[i].style)
                childs[i].style.pointerEvents = "none";
        }
    }
    if (!self.selectedElementInDesign || self.selectedElementInDesign === self) {
        self.addonsElement = createElementAddons(self, getSurvey(self), isPanel);
        self.addonsElement.style.display = self.koIsSelected() ? "" : "none";
        el.appendChild(self.addonsElement);
    }
    addAdorner(el, self);
}
var adornersConfig = {};
function registerAdorner(name, adorner) {
    if (!adornersConfig[name]) {
        adornersConfig[name] = [];
    }
    adornersConfig[name].push(adorner);
}
function removeAdorners(names) {
    if (names === void 0) { names = undefined; }
    if (names !== undefined) {
        (names || []).forEach(function (name) { return delete adornersConfig[name]; });
    }
    else {
        adornersConfig = {};
    }
}
function onUpdateQuestionCssClasses(survey, options) {
    var classes = options.cssClasses;
    Object.keys(adornersConfig).forEach(function (element) {
        adornersConfig[element].forEach(function (adorner) {
            classes[element] =
                classes[element] + " " + adorner.getMarkerClass(options.question);
        });
    });
}
function filterNestedQuestions(rootQuestionNode, elements) {
    var targetElements = [];
    for (var i = 0; i < elements.length; i++) {
        var questionElement = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_utils__["a" /* findParentNode */])("svd_question", elements[i]);
        if (questionElement === rootQuestionNode) {
            targetElements.push(elements[i]);
        }
    }
    return targetElements;
}
function addAdorner(node, model) {
    Object.keys(adornersConfig).forEach(function (element) {
        adornersConfig[element].forEach(function (adorner) {
            var elementClass = adorner.getMarkerClass(model);
            if (!!elementClass) {
                var elements = node.querySelectorAll("." + elementClass);
                elements = filterNestedQuestions(node, elements);
                if (elements.length === 0 &&
                    node.className.indexOf(elementClass) !== -1) {
                    elements = [node];
                }
                if (elements.length > 0) {
                    adorner.afterRender(elements, model, getSurvey(model).getEditor());
                }
            }
        });
    });
}
__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Page"].prototype["onCreating"] = function () {
    panelBaseOnCreating(this);
};
__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Page"].prototype["onAfterRenderPage"] = function (el) {
    if (!getSurvey(this).isDesignMode)
        return;
    var self = this;
    var dragDropHelper = getSurvey(this)["dragDropHelper"];
    this.dragEnterCounter = 0;
    el.ondragenter = function (e) {
        e.preventDefault();
        self.dragEnterCounter++;
    };
    el.ondragleave = function (e) {
        self.dragEnterCounter--;
        if (self.dragEnterCounter === 0)
            dragDropHelper.doLeavePage(e);
    };
    el.ondragover = function (e) {
        return false;
    };
    el.ondrop = function (e) {
        dragDropHelper.doDrop(e);
    };
    // if (this.elements.length == 0) {
    //   this.emptyElement = addEmptyPanelElement(el, dragDropHelper, self);
    // }
};
__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Panel"].prototype["onCreating"] = function () {
    panelBaseOnCreating(this);
    elementOnCreating(this, panel_design_class);
};
__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Panel"].prototype["onAfterRenderPanel"] = function (el) {
    if (!getSurvey(this).isDesignMode)
        return;
    var rows = this.koRows();
    var self = this;
    if (this.elements.length == 0) {
        this.emptyElement = addEmptyPanelElement(el, self.dragDropHelper(), self);
    }
    elementOnAfterRendering(el, this, panel_design_class, true, this.koIsDragging());
};
__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Panel"].prototype["onSelectedElementChanged"] = function () {
    if (getSurvey(this) == null)
        return;
    this.koIsSelected(getSurvey(this)["selectedElementValue"] == this);
};
__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["QuestionBase"].prototype["onCreating"] = function () {
    elementOnCreating(this, question_design_class);
};
__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["QuestionBase"].prototype["onAfterRenderQuestion"] = function (el) {
    if (!getSurvey(this).isDesignMode)
        return;
    elementOnAfterRendering(el, this, question_design_class, false, true);
};
__WEBPACK_IMPORTED_MODULE_3_survey_knockout__["QuestionBase"].prototype["onSelectedElementChanged"] = function () {
    if (getSurvey(this) == null)
        return;
    this.koIsSelected(getSurvey(this)["selectedElementValue"] == this);
};


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__objectProperty__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__surveyHelper__ = __webpack_require__(5);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyObjectEditor; });




var SurveyObjectEditor = (function () {
    function SurveyObjectEditor(propertyEditorOptions) {
        if (propertyEditorOptions === void 0) { propertyEditorOptions = null; }
        var _this = this;
        this.propertyEditorOptions = propertyEditorOptions;
        this.oldActiveProperty = null;
        this.koProperties = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
        this.koActiveProperty = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.koHasObject = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.onPropertyValueChanged = new __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["Event"]();
        this.koActiveProperty.subscribe(function (newValue) {
            if (_this.oldActiveProperty === newValue)
                return;
            if (_this.oldActiveProperty)
                _this.oldActiveProperty.isActive = false;
            _this.oldActiveProperty = newValue;
            if (newValue)
                newValue.isActive = true;
        });
        var self = this;
        this.koAfterRender = function (el, con) {
            self.afterRender(el, con);
        };
    }
    Object.defineProperty(SurveyObjectEditor.prototype, "selectedObject", {
        get: function () {
            return this.selectedObjectValue;
        },
        set: function (value) {
            if (this.selectedObjectValue == value)
                return;
            this.koHasObject(value != null);
            this.selectedObjectValue = value;
            this.updateProperties();
            this.updatePropertiesObject();
        },
        enumerable: true,
        configurable: true
    });
    SurveyObjectEditor.prototype.getPropertyEditor = function (name) {
        var properties = this.koProperties();
        for (var i = 0; i < properties.length; i++) {
            if (properties[i].name == name)
                return properties[i];
        }
        return null;
    };
    SurveyObjectEditor.prototype.changeActiveProperty = function (property) {
        this.koActiveProperty(property);
    };
    SurveyObjectEditor.prototype.objectChanged = function () {
        this.updatePropertiesObject();
    };
    SurveyObjectEditor.prototype.afterRender = function (elements, prop) {
        if (!__WEBPACK_IMPORTED_MODULE_1_survey_knockout__["SurveyElement"] ||
            !__WEBPACK_IMPORTED_MODULE_1_survey_knockout__["SurveyElement"].GetFirstNonTextElement ||
            !this.onAfterRenderCallback)
            return;
        var el = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["SurveyElement"].GetFirstNonTextElement(elements);
        var tEl = elements[0];
        if (tEl.nodeName === "#text")
            tEl.data = "";
        tEl = elements[elements.length - 1];
        if (tEl.nodeName === "#text")
            tEl.data = "";
        this.onAfterRenderCallback(this.selectedObject, el, prop);
    };
    SurveyObjectEditor.prototype.updateProperties = function () {
        var _this = this;
        if (!this.selectedObject || !this.selectedObject.getType) {
            this.koProperties([]);
            this.koActiveProperty(null);
            return;
        }
        var properties = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData["getPropertiesByObj"]
            ? __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData["getPropertiesByObj"](this.selectedObject)
            : __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData.getProperties(this.selectedObject.getType());
        var objectProperties = [];
        var self = this;
        var propEvent = function (property, newValue) {
            self.onPropertyValueChanged.fire(_this, {
                property: property.property,
                object: property.object,
                newValue: newValue
            });
        };
        var visibleProperties = [];
        for (var i = 0; i < properties.length; i++) {
            if (!this.canShowProperty(properties[i]))
                continue;
            visibleProperties.push(properties[i]);
        }
        var sortEvent = function (a, b) {
            var res = 0;
            if (self.onSortPropertyCallback) {
                res = self.onSortPropertyCallback(self.selectedObject, a, b);
            }
            if (res)
                return res;
            if (a.name == b.name)
                return 0;
            if (a.name > b.name)
                return 1;
            return -1;
        };
        visibleProperties = visibleProperties.sort(sortEvent);
        for (var i = 0; i < visibleProperties.length; i++) {
            var objectProperty = new __WEBPACK_IMPORTED_MODULE_2__objectProperty__["a" /* SurveyObjectProperty */](visibleProperties[i], propEvent, this.propertyEditorOptions);
            objectProperty.editor.isInplaceProperty = true;
            objectProperties.push(objectProperty);
        }
        this.koProperties(objectProperties);
        var propEditor = this.getPropertyEditor("name");
        if (!propEditor && objectProperties.length > 0) {
            propEditor = this.getPropertyEditor(objectProperties[0].name);
        }
        if (propEditor) {
            this.koActiveProperty(propEditor);
        }
    };
    SurveyObjectEditor.prototype.canShowProperty = function (property) {
        return __WEBPACK_IMPORTED_MODULE_3__surveyHelper__["b" /* SurveyHelper */].isPropertyVisible(this.selectedObject, property, this.onCanShowPropertyCallback);
    };
    SurveyObjectEditor.prototype.updatePropertiesObject = function () {
        var properties = this.koProperties();
        for (var i = 0; i < properties.length; i++) {
            properties[i].object = this.selectedObject;
        }
    };
    return SurveyObjectEditor;
}());



/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__ = __webpack_require__(7);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyNestedPropertyEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SurveyNestedPropertyEditorItem; });



var SurveyNestedPropertyEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyNestedPropertyEditor, _super);
    function SurveyNestedPropertyEditor(property) {
        var _this = _super.call(this, property) || this;
        var self = _this;
        _this.koEditItem = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](null);
        _this.koIsList = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](true);
        _this.koEditItem.subscribe(function (newValue) {
            self.koIsList(self.koEditItem() == null);
        });
        _this.onEditItemClick = function (item) {
            self.koEditItem(item);
        };
        _this.onCancelEditItemClick = function () {
            var editItem = self.koEditItem();
            if (editItem.itemEditor && editItem.itemEditor.hasError())
                return;
            self.koEditItem(null);
        };
        return _this;
    }
    SurveyNestedPropertyEditor.prototype.checkForErrors = function () {
        var result = false;
        for (var i = 0; i < this.koItems().length; i++) {
            result = result || this.koItems()[i].hasError();
        }
        return result;
    };
    SurveyNestedPropertyEditor.prototype.onBeforeApply = function () {
        _super.prototype.onBeforeApply.call(this);
        var internalItems = this.koItems();
        for (var i = 0; i < internalItems.length; i++) {
            internalItems[i].apply();
        }
    };
    return SurveyNestedPropertyEditor;
}(__WEBPACK_IMPORTED_MODULE_2__propertyItemsEditor__["a" /* SurveyPropertyItemsEditor */]));

var SurveyNestedPropertyEditorItem = (function () {
    function SurveyNestedPropertyEditorItem() {
    }
    Object.defineProperty(SurveyNestedPropertyEditorItem.prototype, "itemEditor", {
        get: function () {
            if (!this.itemEditorValue)
                this.itemEditorValue = this.createSurveyQuestionEditor();
            return this.itemEditorValue;
        },
        enumerable: true,
        configurable: true
    });
    SurveyNestedPropertyEditorItem.prototype.hasError = function () {
        if (this.itemEditorValue && this.itemEditorValue.hasError())
            return true;
        return false;
    };
    SurveyNestedPropertyEditorItem.prototype.resetSurveyQuestionEditor = function () {
        this.itemEditorValue = null;
    };
    SurveyNestedPropertyEditorItem.prototype.createSurveyQuestionEditor = function () {
        return null;
    };
    SurveyNestedPropertyEditorItem.prototype.apply = function () {
        if (this.itemEditorValue)
            this.itemEditorValue.apply();
    };
    return SurveyNestedPropertyEditorItem;
}());



/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__json5__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyTextWorker; });


var TextParserPropery = (function () {
    function TextParserPropery() {
    }
    return TextParserPropery;
}());
var SurveyTextWorker = (function () {
    function SurveyTextWorker(text) {
        this.text = text;
        if (!this.text || this.text.trim() == "") {
            this.text = "{}";
        }
        this.errors = [];
        this.process();
    }
    Object.defineProperty(SurveyTextWorker.prototype, "survey", {
        get: function () {
            return this.surveyValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyTextWorker.prototype, "isJsonCorrect", {
        get: function () {
            return this.surveyValue != null;
        },
        enumerable: true,
        configurable: true
    });
    SurveyTextWorker.prototype.process = function () {
        try {
            this.jsonValue = new __WEBPACK_IMPORTED_MODULE_0__json5__["a" /* SurveyJSON5 */](1).parse(this.text);
        }
        catch (error) {
            this.errors.push({
                pos: { start: error.at, end: -1 },
                text: error.message
            });
        }
        if (this.jsonValue != null) {
            this.updateJsonPositions(this.jsonValue);
            this.surveyValue = new __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["Survey"](this.jsonValue);
            this.surveyValue.setDesignMode(true);
            if (this.surveyValue.jsonErrors != null) {
                for (var i = 0; i < this.surveyValue.jsonErrors.length; i++) {
                    var error = this.surveyValue.jsonErrors[i];
                    this.errors.push({
                        pos: { start: error.at, end: -1 },
                        text: error.getFullDescription()
                    });
                }
            }
        }
        this.surveyObjects = this.createSurveyObjects();
        this.setEditorPositionByChartAt(this.surveyObjects);
        this.setEditorPositionByChartAt(this.errors);
    };
    SurveyTextWorker.prototype.updateJsonPositions = function (jsonObj) {
        jsonObj["pos"]["self"] = jsonObj;
        for (var key in jsonObj) {
            var obj = jsonObj[key];
            if (obj && obj["pos"]) {
                jsonObj["pos"][key] = obj["pos"];
                this.updateJsonPositions(obj);
            }
        }
    };
    SurveyTextWorker.prototype.createSurveyObjects = function () {
        var result = [];
        if (this.surveyValue == null)
            return result;
        this.isSurveyAsPage = false;
        for (var i = 0; i < this.surveyValue.pages.length; i++) {
            var page = this.surveyValue.pages[i];
            if (i == 0 && !page["pos"]) {
                page["pos"] = this.surveyValue["pos"];
                this.isSurveyAsPage = true;
            }
            result.push(page);
            for (var j = 0; j < page.questions.length; j++) {
                result.push(page.questions[j]);
            }
        }
        return result;
    };
    SurveyTextWorker.prototype.setEditorPositionByChartAt = function (objects) {
        if (objects == null || objects.length == 0)
            return;
        var position = { row: 0, column: 0 };
        var atObjectsArray = this.getAtArray(objects);
        var startAt = 0;
        for (var i = 0; i < atObjectsArray.length; i++) {
            var at = atObjectsArray[i].at;
            position = this.getPostionByChartAt(position, startAt, at);
            var obj = atObjectsArray[i].obj;
            if (!obj.position)
                obj.position = {};
            if (at == obj.pos.start) {
                obj.position.start = position;
            }
            else {
                if (at == obj.pos.end) {
                    obj.position.end = position;
                }
            }
            startAt = at;
        }
    };
    SurveyTextWorker.prototype.getPostionByChartAt = function (startPosition, startAt, at) {
        var result = { row: startPosition.row, column: startPosition.column };
        var curChar = startAt;
        while (curChar < at) {
            if (this.text.charAt(curChar) == SurveyTextWorker.newLineChar) {
                result.row++;
                result.column = 0;
            }
            else {
                result.column++;
            }
            curChar++;
        }
        return result;
    };
    SurveyTextWorker.prototype.getAtArray = function (objects) {
        var result = [];
        for (var i = 0; i < objects.length; i++) {
            var obj = objects[i];
            var pos = obj.pos;
            if (!pos)
                continue;
            result.push({ at: pos.start, obj: obj });
            if (pos.end > 0) {
                result.push({ at: pos.end, obj: obj });
            }
        }
        return result.sort(function (el1, el2) {
            if (el1.at > el2.at)
                return 1;
            if (el1.at < el2.at)
                return -1;
            return 0;
        });
    };
    return SurveyTextWorker;
}());



/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyJSON5; });
// This file is based on JSON5, http://json5.org/
// The modification for getting object and properties location 'at' were maden.
var SurveyJSON5 = (function () {
    function SurveyJSON5(parseType) {
        if (parseType === void 0) { parseType = 0; }
        this.parseType = parseType;
    }
    SurveyJSON5.prototype.parse = function (source, reviver, startFrom, endAt) {
        if (reviver === void 0) { reviver = null; }
        if (startFrom === void 0) { startFrom = 0; }
        if (endAt === void 0) { endAt = -1; }
        var result;
        this.text = String(source);
        this.at = startFrom;
        this.endAt = endAt;
        this.ch = " ";
        result = this.value();
        this.white();
        if (this.ch) {
            this.error("Syntax error");
        }
        // If there is a reviver function, we recursively walk the new structure,
        // passing each name/value pair to the reviver function for possible
        // transformation, starting with a temporary root object that holds the result
        // in an empty key. If there is not a reviver function, we simply return the
        // result.
        return typeof reviver === "function"
            ? (function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            }
                            else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            })({ "": result }, "")
            : result;
    };
    SurveyJSON5.prototype.error = function (m) {
        // Call error when something is wrong.
        var error = new SyntaxError();
        error.message = m;
        error["at"] = this.at;
        throw error;
    };
    SurveyJSON5.prototype.next = function (c) {
        if (c === void 0) { c = null; }
        // If a c parameter is provided, verify that it matches the current character.
        if (c && c !== this.ch) {
            this.error("Expected '" + c + "' instead of '" + this.ch + "'");
        }
        // Get the this.next character. When there are no more characters,
        // return the empty string.
        this.ch = this.chartAt();
        this.at += 1;
        return this.ch;
    };
    SurveyJSON5.prototype.peek = function () {
        // Get the this.next character without consuming it or
        // assigning it to the this.ch varaible.
        return this.chartAt();
    };
    SurveyJSON5.prototype.chartAt = function () {
        if (this.endAt > -1 && this.at >= this.endAt)
            return "";
        return this.text.charAt(this.at);
    };
    SurveyJSON5.prototype.identifier = function () {
        // Parse an identifier. Normally, reserved words are disallowed here, but we
        // only use this for unquoted object keys, where reserved words are allowed,
        // so we don't check for those here. References:
        // - http://es5.github.com/#x7.6
        // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
        // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
        // TODO Identifiers can have Unicode "letters" in them; add support for those.
        var key = this.ch;
        // Identifiers must start with a letter, _ or $.
        if (this.ch !== "_" &&
            this.ch !== "$" &&
            (this.ch < "a" || this.ch > "z") &&
            (this.ch < "A" || this.ch > "Z")) {
            this.error("Bad identifier");
        }
        // Subsequent characters can contain digits.
        while (this.next() &&
            (this.ch === "_" ||
                this.ch === "$" ||
                (this.ch >= "a" && this.ch <= "z") ||
                (this.ch >= "A" && this.ch <= "Z") ||
                (this.ch >= "0" && this.ch <= "9"))) {
            key += this.ch;
        }
        return key;
    };
    SurveyJSON5.prototype.number = function () {
        // Parse a number value.
        var number, sign = "", string = "", base = 10;
        if (this.ch === "-" || this.ch === "+") {
            sign = this.ch;
            this.next(this.ch);
        }
        // support for Infinity (could tweak to allow other words):
        if (this.ch === "I") {
            number = this.word();
            if (typeof number !== "number" || isNaN(number)) {
                this.error("Unexpected word for number");
            }
            return sign === "-" ? -number : number;
        }
        // support for NaN
        if (this.ch === "N") {
            number = this.word();
            if (!isNaN(number)) {
                this.error("expected word to be NaN");
            }
            // ignore sign as -NaN also is NaN
            return number;
        }
        if (this.ch === "0") {
            string += this.ch;
            this.next();
            if (this.ch === "x" || this.ch === "X") {
                string += this.ch;
                this.next();
                base = 16;
            }
            else if (this.ch >= "0" && this.ch <= "9") {
                this.error("Octal literal");
            }
        }
        switch (base) {
            case 10:
                while (this.ch >= "0" && this.ch <= "9") {
                    string += this.ch;
                    this.next();
                }
                if (this.ch === ".") {
                    string += ".";
                    while (this.next() && this.ch >= "0" && this.ch <= "9") {
                        string += this.ch;
                    }
                }
                if (this.ch === "e" || this.ch === "E") {
                    string += this.ch;
                    this.next();
                    if (this.ch === "-" || this.ch === "+") {
                        string += this.ch;
                        this.next();
                    }
                    while (this.ch >= "0" && this.ch <= "9") {
                        string += this.ch;
                        this.next();
                    }
                }
                break;
            case 16:
                while ((this.ch >= "0" && this.ch <= "9") ||
                    (this.ch >= "A" && this.ch <= "F") ||
                    (this.ch >= "a" && this.ch <= "f")) {
                    string += this.ch;
                    this.next();
                }
                break;
        }
        if (sign === "-") {
            number = -string;
        }
        else {
            number = +string;
        }
        if (!isFinite(number)) {
            this.error("Bad number");
        }
        else {
            return number;
        }
    };
    SurveyJSON5.prototype.string = function () {
        // Parse a string value.
        var hex, i, string = "", delim, // double quote or single quote
        uffff;
        // When parsing for string values, we must look for ' or " and \ characters.
        if (this.ch === '"' || this.ch === "'") {
            delim = this.ch;
            while (this.next()) {
                if (this.ch === delim) {
                    this.next();
                    return string;
                }
                else if (this.ch === "\\") {
                    this.next();
                    if (this.ch === "u") {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(this.next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    }
                    else if (this.ch === "\r") {
                        if (this.peek() === "\n") {
                            this.next();
                        }
                    }
                    else if (typeof SurveyJSON5.escapee[this.ch] === "string") {
                        string += SurveyJSON5.escapee[this.ch];
                    }
                    else {
                        break;
                    }
                }
                else if (this.ch === "\n") {
                    // unescaped newlines are invalid; see:
                    // https://github.com/aseemk/json5/issues/24
                    // TODO this feels special-cased; are there other
                    // invalid unescaped chars?
                    break;
                }
                else {
                    string += this.ch;
                }
            }
        }
        this.error("Bad string");
    };
    SurveyJSON5.prototype.inlineComment = function () {
        // Skip an inline comment, assuming this is one. The current character should
        // be the second / character in the // pair that begins this inline comment.
        // To finish the inline comment, we look for a newline or the end of the text.
        if (this.ch !== "/") {
            this.error("Not an inline comment");
        }
        do {
            this.next();
            if (this.ch === "\n" || this.ch === "\r") {
                this.next();
                return;
            }
        } while (this.ch);
    };
    SurveyJSON5.prototype.blockComment = function () {
        // Skip a block comment, assuming this is one. The current character should be
        // the * character in the /* pair that begins this block comment.
        // To finish the block comment, we look for an ending */ pair of characters,
        // but we also watch for the end of text before the comment is terminated.
        if (this.ch !== "*") {
            this.error("Not a block comment");
        }
        do {
            this.next();
            while (this.ch === "*") {
                this.next("*");
                if (this.ch === "/") {
                    this.next("/");
                    return;
                }
            }
        } while (this.ch);
        this.error("Unterminated block comment");
    };
    SurveyJSON5.prototype.comment = function () {
        // Skip a comment, whether inline or block-level, assuming this is one.
        // Comments always begin with a / character.
        if (this.ch !== "/") {
            this.error("Not a comment");
        }
        this.next("/");
        if (this.ch === "/") {
            this.inlineComment();
        }
        else if (this.ch === "*") {
            this.blockComment();
        }
        else {
            this.error("Unrecognized comment");
        }
    };
    SurveyJSON5.prototype.white = function () {
        // Skip whitespace and comments.
        // Note that we're detecting comments by only a single / character.
        // This works since regular expressions are not valid JSON(5), but this will
        // break if there are other valid values that begin with a / character!
        while (this.ch) {
            if (this.ch === "/") {
                this.comment();
            }
            else if (SurveyJSON5.ws.indexOf(this.ch) >= 0) {
                this.next();
            }
            else {
                return;
            }
        }
    };
    SurveyJSON5.prototype.word = function () {
        // true, false, or null.
        switch (this.ch) {
            case "t":
                this.next("t");
                this.next("r");
                this.next("u");
                this.next("e");
                return true;
            case "f":
                this.next("f");
                this.next("a");
                this.next("l");
                this.next("s");
                this.next("e");
                return false;
            case "n":
                this.next("n");
                this.next("u");
                this.next("l");
                this.next("l");
                return null;
            case "I":
                this.next("I");
                this.next("n");
                this.next("f");
                this.next("i");
                this.next("n");
                this.next("i");
                this.next("t");
                this.next("y");
                return Infinity;
            case "N":
                this.next("N");
                this.next("a");
                this.next("N");
                return NaN;
        }
        this.error("Unexpected '" + this.ch + "'");
    };
    SurveyJSON5.prototype.array = function () {
        // Parse an array value.
        var array = [];
        if (this.ch === "[") {
            this.next("[");
            this.white();
            while (this.ch) {
                if (this.ch === "]") {
                    this.next("]");
                    return array; // Potentially empty array
                }
                // ES5 allows omitting elements in arrays, e.g. [,] and
                // [,null]. We don't allow this in JSON5.
                if (this.ch === ",") {
                    this.error("Missing array element");
                }
                else {
                    array.push(this.value());
                }
                this.white();
                // If there's no comma after this value, this needs to
                // be the end of the array.
                if (this.ch !== ",") {
                    this.next("]");
                    return array;
                }
                this.next(",");
                this.white();
            }
        }
        this.error("Bad array");
    };
    SurveyJSON5.prototype.object = function () {
        // Parse an object value.
        var key, start, isFirstProperty = true, object = {};
        if (this.parseType > 0) {
            object[SurveyJSON5.positionName] = { start: this.at - 1 };
        }
        if (this.ch === "{") {
            this.next("{");
            this.white();
            start = this.at - 1;
            while (this.ch) {
                if (this.ch === "}") {
                    if (this.parseType > 0) {
                        object[SurveyJSON5.positionName].end = start;
                    }
                    this.next("}");
                    return object; // Potentially empty object
                }
                // Keys can be unquoted. If they are, they need to be
                // valid JS identifiers.
                if (this.ch === '"' || this.ch === "'") {
                    key = this.string();
                }
                else {
                    key = this.identifier();
                }
                this.white();
                if (this.parseType > 1) {
                    object[SurveyJSON5.positionName][key] = {
                        start: start,
                        valueStart: this.at
                    };
                }
                this.next(":");
                object[key] = this.value();
                if (this.parseType > 1) {
                    start = this.at - 1;
                    object[SurveyJSON5.positionName][key].valueEnd = start;
                    object[SurveyJSON5.positionName][key].end = start;
                }
                this.white();
                // If there's no comma after this pair, this needs to be
                // the end of the object.
                if (this.ch !== ",") {
                    if (this.parseType > 1) {
                        object[SurveyJSON5.positionName][key].valueEnd--;
                        object[SurveyJSON5.positionName][key].end--;
                    }
                    if (this.parseType > 0) {
                        object[SurveyJSON5.positionName].end = this.at - 1;
                    }
                    this.next("}");
                    return object;
                }
                if (this.parseType > 1) {
                    object[SurveyJSON5.positionName][key].valueEnd--;
                    if (!isFirstProperty) {
                        object[SurveyJSON5.positionName][key].end--;
                    }
                }
                this.next(",");
                this.white();
                isFirstProperty = false;
            }
        }
        this.error("Bad object");
    };
    SurveyJSON5.prototype.value = function () {
        // Parse a JSON value. It could be an object, an array, a string, a number,
        // or a word.
        this.white();
        switch (this.ch) {
            case "{":
                return this.object();
            case "[":
                return this.array();
            case '"':
            case "'":
                return this.string();
            case "-":
            case "+":
            case ".":
                return this.number();
            default:
                return this.ch >= "0" && this.ch <= "9" ? this.number() : this.word();
        }
    };
    SurveyJSON5.prototype.stringify = function (obj, replacer, space) {
        if (replacer === void 0) { replacer = null; }
        if (space === void 0) { space = null; }
        if (replacer &&
            (typeof replacer !== "function" && !this.isArray(replacer))) {
            throw new Error("Replacer must be a function or an array");
        }
        this.replacer = replacer;
        this.indentStr = this.getIndent(space);
        this.objStack = [];
        // special case...when undefined is used inside of
        // a compound object/array, return null.
        // but when top-level, return undefined
        var topLevelHolder = { "": obj };
        if (obj === undefined) {
            return this.getReplacedValueOrUndefined(topLevelHolder, "", true);
        }
        return this.internalStringify(topLevelHolder, "", true);
    };
    SurveyJSON5.prototype.getIndent = function (space) {
        if (space) {
            if (typeof space === "string") {
                return space;
            }
            else if (typeof space === "number" && space >= 0) {
                return this.makeIndent(" ", space, true);
            }
        }
        return "";
    };
    SurveyJSON5.prototype.getReplacedValueOrUndefined = function (holder, key, isTopLevel) {
        var value = holder[key];
        // Replace the value with its toJSON value first, if possible
        if (value && value.toJSON && typeof value.toJSON === "function") {
            value = value.toJSON();
        }
        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
        if (typeof this.replacer === "function") {
            return this.replacer.call(holder, key, value);
        }
        else if (this.replacer) {
            if (isTopLevel ||
                this.isArray(holder) ||
                this.replacer.indexOf(key) >= 0) {
                return value;
            }
            else {
                return undefined;
            }
        }
        else {
            return value;
        }
    };
    SurveyJSON5.prototype.isWordChar = function (char) {
        return ((char >= "a" && char <= "z") ||
            (char >= "A" && char <= "Z") ||
            (char >= "0" && char <= "9") ||
            char === "_" ||
            char === "$");
    };
    SurveyJSON5.prototype.isWordStart = function (char) {
        return ((char >= "a" && char <= "z") ||
            (char >= "A" && char <= "Z") ||
            char === "_" ||
            char === "$");
    };
    SurveyJSON5.prototype.isWord = function (key) {
        if (typeof key !== "string") {
            return false;
        }
        if (!this.isWordStart(key[0])) {
            return false;
        }
        var i = 1, length = key.length;
        while (i < length) {
            if (!this.isWordChar(key[i])) {
                return false;
            }
            i++;
        }
        return true;
    };
    // polyfills
    SurveyJSON5.prototype.isArray = function (obj) {
        if (Array.isArray) {
            return Array.isArray(obj);
        }
        else {
            return Object.prototype.toString.call(obj) === "[object Array]";
        }
    };
    SurveyJSON5.prototype.isDate = function (obj) {
        return Object.prototype.toString.call(obj) === "[object Date]";
    };
    SurveyJSON5.prototype.isNaN = function (val) {
        return typeof val === "number" && val !== val;
    };
    SurveyJSON5.prototype.checkForCircular = function (obj) {
        for (var i = 0; i < this.objStack.length; i++) {
            if (this.objStack[i] === obj) {
                throw new TypeError("Converting circular structure to JSON");
            }
        }
    };
    SurveyJSON5.prototype.makeIndent = function (str, num, noNewLine) {
        if (noNewLine === void 0) { noNewLine = false; }
        if (!str) {
            return "";
        }
        // indentation no more than 10 chars
        if (str.length > 10) {
            str = str.substring(0, 10);
        }
        var indent = noNewLine ? "" : "\n";
        for (var i = 0; i < num; i++) {
            indent += str;
        }
        return indent;
    };
    SurveyJSON5.prototype.escapeString = function (str) {
        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.
        SurveyJSON5.escapable.lastIndex = 0;
        return SurveyJSON5.escapable.test(str)
            ? '"' +
                str.replace(SurveyJSON5.escapable, function (a) {
                    var c = SurveyJSON5.meta[a];
                    return typeof c === "string"
                        ? c
                        : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                }) +
                '"'
            : '"' + str + '"';
    };
    // End
    SurveyJSON5.prototype.internalStringify = function (holder, key, isTopLevel) {
        var buffer, res;
        // Replace the value, if necessary
        var obj_part = this.getReplacedValueOrUndefined(holder, key, isTopLevel);
        if (obj_part && !this.isDate(obj_part)) {
            // unbox objects
            // don't unbox dates, since will turn it into number
            obj_part = obj_part.valueOf();
        }
        switch (typeof obj_part) {
            case "boolean":
                return obj_part.toString();
            case "number":
                if (isNaN(obj_part) || !isFinite(obj_part)) {
                    return "null";
                }
                return obj_part.toString();
            case "string":
                return this.escapeString(obj_part.toString());
            case "object":
                if (obj_part === null) {
                    return "null";
                }
                else if (this.isArray(obj_part)) {
                    this.checkForCircular(obj_part);
                    buffer = "[";
                    this.objStack.push(obj_part);
                    for (var i = 0; i < obj_part.length; i++) {
                        res = this.internalStringify(obj_part, i, false);
                        buffer += this.makeIndent(this.indentStr, this.objStack.length);
                        if (res === null || typeof res === "undefined") {
                            buffer += "null";
                        }
                        else {
                            buffer += res;
                        }
                        if (i < obj_part.length - 1) {
                            buffer += ",";
                        }
                        else if (this.indentStr) {
                            buffer += "\n";
                        }
                    }
                    this.objStack.pop();
                    buffer +=
                        this.makeIndent(this.indentStr, this.objStack.length, true) + "]";
                }
                else {
                    this.checkForCircular(obj_part);
                    buffer = "{";
                    var nonEmpty = false;
                    this.objStack.push(obj_part);
                    for (var prop in obj_part) {
                        if (obj_part.hasOwnProperty(prop)) {
                            var value = this.internalStringify(obj_part, prop, false);
                            isTopLevel = false;
                            if (typeof value !== "undefined" && value !== null) {
                                buffer += this.makeIndent(this.indentStr, this.objStack.length);
                                nonEmpty = true;
                                var propKey = this.isWord(prop)
                                    ? prop
                                    : this.escapeString(prop);
                                buffer +=
                                    propKey + ":" + (this.indentStr ? " " : "") + value + ",";
                            }
                        }
                    }
                    this.objStack.pop();
                    if (nonEmpty) {
                        buffer =
                            buffer.substring(0, buffer.length - 1) +
                                this.makeIndent(this.indentStr, this.objStack.length) +
                                "}";
                    }
                    else {
                        buffer = "{}";
                    }
                }
                return buffer;
            default:
                // functions and undefined should be ignored
                return undefined;
        }
    };
    return SurveyJSON5;
}());

SurveyJSON5.positionName = "pos";
SurveyJSON5.escapee = {
    "'": "'",
    '"': '"',
    "\\": "\\",
    "/": "/",
    "\n": "",
    b: "\b",
    f: "\f",
    n: "\n",
    r: "\r",
    t: "\t"
};
SurveyJSON5.ws = [" ", "\t", "\r", "\n", "\v", "\f", "\xA0", "\uFEFF"];
// Copied from Crokford's implementation of JSON
// See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
// Begin
SurveyJSON5.cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
SurveyJSON5.escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
SurveyJSON5.meta = {
    // table of character substitutions
    "\b": "\\b",
    "\t": "\\t",
    "\n": "\\n",
    "\f": "\\f",
    "\r": "\\r",
    '"': '\\"',
    "\\": "\\\\"
};


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = getNextValue;
/* harmony export (immutable) */ __webpack_exports__["a"] = findParentNode;
function getNextValue(prefix, values) {
    var index = values.reduce(function (res, val) {
        if (typeof val === "string" && val.indexOf(prefix) === 0) {
            try {
                var candidate = parseInt(val.substring(prefix.length));
                if (candidate >= res) {
                    return candidate + 1;
                }
            }
            catch (e) { }
        }
        return res;
    }, 1);
    return prefix + index;
}
function findParentNode(className, sourceNode) {
    var parent = sourceNode;
    while ((parent = parent.parentElement) &&
        !parent.classList.contains(className))
        ;
    return parent;
}


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__surveyjsObjects__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__title_editor_scss__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__title_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__title_editor_scss__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TitleInplaceEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return titleAdorner; });




var templateHtml = __webpack_require__(97);
var TitleInplaceEditor = (function () {
    function TitleInplaceEditor(name, rootElement) {
        var _this = this;
        this.rootElement = rootElement;
        this.editingName = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.prevName = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.isEditing = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.hideEditor = function () {
            _this.isEditing(false);
            _this.forNeibours(function (element) { return (element.style.display = ""); });
        };
        this.startEdit = function (model, event) {
            _this.editingName(_this.prevName());
            _this.isEditing(true);
            _this.forNeibours(function (element) { return (element.style.display = "none"); });
            _this.rootElement.getElementsByTagName("input")[0].focus();
        };
        this.postEdit = function () {
            if (_this.prevName() !== _this.editingName()) {
                _this.prevName(_this.editingName());
                !!_this.valueChanged && _this.valueChanged(_this.editingName());
            }
            _this.hideEditor();
        };
        this.cancelEdit = function () {
            _this.editingName(_this.prevName());
            _this.hideEditor();
        };
        this.nameEditorKeypress = function (model, event) {
            if (event.keyCode === 13) {
                _this.postEdit();
            }
            else if (event.keyCode === 27) {
                _this.cancelEdit();
            }
        };
        this.editingName(name);
        this.prevName(name);
        this.forNeibours(function (element) {
            return (element.onclick = function (e) {
                _this.startEdit(_this, e);
                e.preventDefault();
            });
        });
    }
    TitleInplaceEditor.prototype.forNeibours = function (func) {
        var holder = this.rootElement.parentElement.parentElement;
        for (var i = 0; i < holder.children.length - 1; i++) {
            var element = holder.children[i];
            func(element);
        }
    };
    TitleInplaceEditor.prototype.getLocString = function (str) {
        return __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString(str);
    };
    return TitleInplaceEditor;
}());

__WEBPACK_IMPORTED_MODULE_0_knockout__["components"].register("title-editor", {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var model = new TitleInplaceEditor(params.model[params.name], componentInfo.element);
            model.valueChanged = function (newValue) { return (params.model[params.name] = newValue); };
            return model;
        }
    },
    template: templateHtml
});
var titleAdorner = {
    getMarkerClass: function (model) {
        return "title_editable";
    },
    afterRender: function (elements, model) {
        var decoration = document.createElement("span");
        decoration.innerHTML =
            "<title-editor params='name: \"title\", model: $data'></title-editor>";
        elements[0].appendChild(decoration);
        __WEBPACK_IMPORTED_MODULE_0_knockout__["applyBindings"](model, decoration);
    }
};
__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__surveyjsObjects__["b" /* registerAdorner */])("title", titleAdorner);


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__surveyHelper__ = __webpack_require__(5);
/* unused harmony export DragDropTargetElement */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DragDropHelper; });


var DragDropTargetElement = (function () {
    function DragDropTargetElement(page, target, source) {
        this.page = page;
        this.target = target;
        this.source = source;
    }
    DragDropTargetElement.prototype.moveTo = function (destination, isBottom, isEdge) {
        if (isEdge === void 0) { isEdge = false; }
        //console.log("dest: " + destination.name + ", isBottom:" + isBottom + ", isEdge:" + isEdge);
        isEdge = isEdge || !destination.isPanel;
        if (destination === this.target)
            return !this.target.isPanel;
        var destInfo = this.findInfo(destination, isEdge);
        if (!destInfo) {
            this.clear();
            return false;
        }
        var targetInfo = this.findInfo(this.target, true);
        this.updateInfo(destInfo, isBottom, isEdge);
        if (this.isInfoEquals(targetInfo, destInfo))
            return true;
        this.clearByInfo(targetInfo);
        destInfo = this.findInfo(destination, isEdge);
        if (!destInfo)
            return false;
        this.updateInfo(destInfo, isBottom, isEdge);
        if (!this.canMove(destInfo))
            return false;
        this.addInfo(destInfo);
        return true;
    };
    DragDropTargetElement.prototype.doDrop = function () {
        var destInfo = this.findInfo(this.target);
        if (!destInfo)
            return;
        var index = this.getIndexByInfo(destInfo);
        var newElement = this.getNewTargetElement();
        this.moveToParent = destInfo.panel;
        this.moveToIndex = index;
        destInfo.panel.addElement(newElement, index);
        if (this.source) {
            var srcInfo = this.findInfo(this.source, true);
            var panel = srcInfo ? srcInfo.panel : this.page;
            panel.removeElement(this.source);
        }
        return newElement;
    };
    DragDropTargetElement.prototype.clear = function () {
        this.clearByInfo(this.findInfo(this.target, true));
    };
    DragDropTargetElement.prototype.getIndexByInfo = function (info) {
        if (!info)
            return 0;
        var rows = info.panel.koRows();
        var index = 0;
        for (var i = 0; i < info.rIndex; i++) {
            index += rows[i]["koElements"]().length;
        }
        return index + info.elIndex;
    };
    DragDropTargetElement.prototype.canMove = function (destInfo) {
        if (this.target.isPanel && destInfo.element) {
            if (this.target == destInfo.element ||
                this.target.containsElement(destInfo.element))
                return false;
            if (this.source &&
                (this.source == destInfo.element ||
                    this.source.containsElement(destInfo.element)))
                return false;
        }
        if (!this.source)
            return true;
        var srcInfo = this.findInfo(this.source);
        if (srcInfo == null || srcInfo.panel != destInfo.panel)
            return true;
        var srcIndex = this.getIndexByInfo(srcInfo);
        var destIndex = this.getIndexByInfo(destInfo);
        var diff = destIndex - srcIndex;
        return diff < 0 || diff > 1;
    };
    DragDropTargetElement.prototype.isLastElementInRow = function (info) {
        return (info.elIndex ==
            info.panel["koRows"]()[info.rIndex]["koElements"]().length - 1);
    };
    DragDropTargetElement.prototype.updateInfo = function (info, isBottom, isEdge) {
        if (info.rIndex < 0)
            return;
        if (this.target.startWithNewLine) {
            if (isBottom)
                info.rIndex++;
        }
        else {
            if (isBottom) {
                info.elIndex++;
            }
            else {
                if (info.elIndex == 0 && info.rIndex > 0) {
                    info.rIndex--;
                    info.elIndex = info.panel["koRows"]()[info.rIndex]["koElements"]().length;
                }
            }
        }
    };
    DragDropTargetElement.prototype.addInfo = function (info) {
        if (this.target.isPanel) {
            this.target.parent = info.panel;
        }
        if (this.target.startWithNewLine ||
            info.elIndex < 1 ||
            info.rIndex < 0 ||
            info.rIndex >= info.panel.koRows().length) {
            this.AddInfoAsRow(info);
        }
        else {
            var row = info.panel.koRows()[info.rIndex];
            var elements = row["koElements"]();
            if (info.elIndex < elements.length) {
                elements.splice(info.elIndex, 0, this.target);
            }
            else {
                elements.push(this.target);
            }
            row["koElements"](elements);
            row.updateVisible();
        }
    };
    DragDropTargetElement.prototype.AddInfoAsRow = function (info) {
        var row = new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["QuestionRow"](info.panel);
        row.addElement(this.target);
        var rows = info.panel.koRows();
        if (info.rIndex >= 0 && info.rIndex < info.panel.koRows().length) {
            rows.splice(info.rIndex, 0, row);
        }
        else {
            rows.push(row);
        }
        info.panel.koRows(rows);
    };
    DragDropTargetElement.prototype.clearByInfo = function (info) {
        if (info == null)
            return;
        var rows = info.panel.koRows();
        if (info.rIndex < 0 || info.rIndex >= rows.length)
            return;
        var row = rows[info.rIndex];
        var elements = row["koElements"]();
        if (row["koElements"]().length > 1) {
            elements.splice(info.elIndex, 1);
            row["koElements"](elements);
            row.updateVisible();
        }
        else {
            rows.splice(info.rIndex, 1);
            info.panel.koRows(rows);
        }
    };
    DragDropTargetElement.prototype.isInfoEquals = function (a, b) {
        if (a == null || b == null)
            return false;
        return (a.panel === b.panel && a.rIndex === b.rIndex && a.elIndex === b.elIndex);
    };
    DragDropTargetElement.prototype.findInfo = function (el, isEdge) {
        if (isEdge === void 0) { isEdge = false; }
        return this.findInfoInPanel(this.page, el, isEdge, el);
    };
    DragDropTargetElement.prototype.findInfoInPanel = function (panel, el, isEdge, root) {
        if (el == panel) {
            var parent = panel;
            if (panel.parent &&
                (isEdge ||
                    (root &&
                        this.target &&
                        root.name == this.target.name &&
                        this.target.isPanel))) {
                parent = panel.parent;
            }
            return { panel: parent, rIndex: 0, elIndex: 0, element: panel };
        }
        var rows = panel["koRows"]();
        for (var i = 0; i < rows.length; i++) {
            var row = rows[i];
            var elements = row["koElements"]();
            for (var j = 0; j < elements.length; j++) {
                var element = elements[j];
                if (element.isPanel) {
                    var res = this.findInfoInPanel(element, el, isEdge, root);
                    if (res) {
                        if (res.element == element) {
                            res.rIndex = i;
                            res.elIndex = j;
                        }
                        return res;
                    }
                }
                if (element == el)
                    return { panel: panel, rIndex: i, elIndex: j, element: element };
                //TODO refactor!!!
                if (!element.isPanel) {
                    var childElements = this.getElements(element);
                    for (var k = 0; k < childElements.length; k++) {
                        if (childElements[k].isPanel) {
                            var res = this.findInfoInPanel(childElements[k], el, isEdge, root);
                            if (res)
                                return res;
                        }
                    }
                }
            }
        }
        return null;
    };
    DragDropTargetElement.prototype.getNewTargetElement = function () {
        var result = __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"].metaData.createClass(this.target.getType());
        var json = new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"]().toJsonObject(this.target);
        new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"]().toObject(json, result);
        return result;
    };
    DragDropTargetElement.prototype.getElements = function (element) {
        return __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */].getElements(element, true);
    };
    return DragDropTargetElement;
}());

var DragDropHelper = (function () {
    function DragDropHelper(data, onModifiedCallback, parent) {
        if (parent === void 0) { parent = null; }
        this.data = data;
        this.scrollableElement = null;
        this.ddTarget = null;
        this.id = DragDropHelper.counter++;
        this.isScrollStop = true;
        this.onModifiedCallback = onModifiedCallback;
        this.scrollableElement =
            parent && parent.querySelector("#scrollableDiv");
        this.prevCoordinates = { x: -1, y: -1 };
    }
    Object.defineProperty(DragDropHelper.prototype, "survey", {
        get: function () {
            return this.data;
        },
        enumerable: true,
        configurable: true
    });
    DragDropHelper.prototype.startDragQuestion = function (event, element) {
        var json = new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"]().toJsonObject(element);
        json["type"] = element.getType();
        this.prepareData(event, element.name, json);
        this.ddTarget.source = element;
    };
    DragDropHelper.prototype.startDragToolboxItem = function (event, elementName, elementJson) {
        this.prepareData(event, elementName, elementJson);
    };
    DragDropHelper.prototype.isSurveyDragging = function (event) {
        if (!event)
            return false;
        var data = this.getData(event).text;
        return data && data.indexOf(DragDropHelper.dataStart) == 0;
    };
    DragDropHelper.prototype.doDragDropOver = function (event, element, isEdge) {
        if (isEdge === void 0) { isEdge = false; }
        event = this.getEvent(event);
        if (this.isSameCoordinates(event))
            return;
        this.checkScrollY(event);
        if (!element ||
            !this.isSurveyDragging(event) ||
            this.isSamePlace(event, element))
            return;
        element = this.replaceTargetElement(element);
        var bottomInfo = this.isBottom(event, element);
        isEdge = element.isPanel ? isEdge && bottomInfo.isEdge : true;
        if (element.isPanel && !isEdge && element.elements.length > 0)
            return;
        this.ddTarget.moveTo(element, bottomInfo.isBottom, isEdge);
    };
    DragDropHelper.prototype.replaceTargetElement = function (element) {
        if (element.getType &&
            element.getType() === "page" &&
            element.elements.length !== 0) {
            var elements = element.elements;
            element = elements[elements.length - 1];
        }
        return element;
    };
    DragDropHelper.prototype.end = function () {
        if (this.ddTarget) {
            this.ddTarget.clear();
        }
        this.isScrollStop = true;
        this.clearData();
    };
    Object.defineProperty(DragDropHelper.prototype, "isMoving", {
        get: function () {
            return this.ddTarget && this.ddTarget.source;
        },
        enumerable: true,
        configurable: true
    });
    DragDropHelper.prototype.doDrop = function (event) {
        if (event.stopPropagation) {
            event.stopPropagation();
        }
        if (this.isSurveyDragging(event)) {
            event.preventDefault();
            var newElement = this.ddTarget.doDrop();
            if (this.onModifiedCallback)
                this.onModifiedCallback({
                    type: "DO_DROP",
                    page: this.ddTarget.page,
                    source: this.ddTarget.source,
                    target: this.ddTarget.target,
                    newElement: this.ddTarget.source ? null : newElement,
                    moveToParent: this.ddTarget.moveToParent,
                    moveToIndex: this.ddTarget.moveToIndex
                });
        }
        this.end();
    };
    DragDropHelper.prototype.doLeavePage = function (event) {
        this.ddTarget.clear();
    };
    DragDropHelper.prototype.scrollToElement = function (el) {
        if (!this.scrollableElement || !el)
            return;
        el.scrollIntoView(false);
    };
    DragDropHelper.prototype.createTargetElement = function (elementName, json) {
        if (!elementName || !json)
            return null;
        var targetElement = null;
        targetElement = __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"].metaData.createClass(json["type"]);
        new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"]().toObject(json, targetElement);
        targetElement.name = elementName;
        if (targetElement["setSurveyImpl"]) {
            targetElement["setSurveyImpl"](this.survey);
        }
        else {
            targetElement["setData"](this.survey);
        }
        targetElement.renderWidth = "100%";
        targetElement["koIsDragging"](true);
        return targetElement;
    };
    DragDropHelper.prototype.isBottom = function (event, surveyEl) {
        event = this.getEvent(event);
        var height = event.currentTarget["clientHeight"];
        var y = event.offsetY;
        if (event.hasOwnProperty("layerX")) {
            y = event.layerY - event.currentTarget["offsetTop"];
        }
        return {
            isBottom: y > height / 2,
            isEdge: y <= DragDropHelper.edgeHeight ||
                height - y <= DragDropHelper.edgeHeight
        };
    };
    DragDropHelper.prototype.isSameCoordinates = function (event) {
        var res = Math.abs(event.pageX - this.prevCoordinates.x) > 5 ||
            Math.abs(event.pageY - this.prevCoordinates.y) > 5;
        if (res) {
            this.prevCoordinates.x = event.pageX;
            this.prevCoordinates.y = event.pageY;
        }
        return !res;
    };
    DragDropHelper.prototype.isSamePlace = function (event, element) {
        var prev = DragDropHelper.prevEvent;
        if (prev.element != element ||
            Math.abs(event.clientX - prev.x) > 5 ||
            Math.abs(event.clientY - prev.y) > 5) {
            prev.element = element;
            prev.x = event.clientX;
            prev.y = event.clientY;
            return false;
        }
        return true;
    };
    DragDropHelper.prototype.checkScrollY = function (e) {
        if (!this.scrollableElement)
            return;
        var y = this.getScrollableElementPosY(e);
        if (y < 0)
            return;
        this.isScrollStop = true;
        var height = this.scrollableElement["clientHeight"];
        if (y < DragDropHelper.ScrollOffset && y >= 0) {
            this.isScrollStop = false;
            this.doScrollY(-1);
        }
        if (height - y < DragDropHelper.ScrollOffset && height >= y) {
            this.isScrollStop = false;
            this.doScrollY(1);
        }
    };
    DragDropHelper.prototype.doScrollY = function (step) {
        var el = this.scrollableElement;
        var scrollY = el.scrollTop + step;
        if (scrollY < 0) {
            this.isScrollStop = true;
            return;
        }
        el.scrollTop = scrollY;
        var self = this;
        if (!this.isScrollStop) {
            setTimeout(function () {
                self.doScrollY(step);
            }, DragDropHelper.ScrollDelay);
        }
    };
    DragDropHelper.prototype.getScrollableElementPosY = function (e) {
        if (!this.scrollableElement || !e.currentTarget)
            return -1;
        var el = e.currentTarget;
        var offsetTop = 0;
        while (el && el != this.scrollableElement) {
            offsetTop += el["offsetTop"];
            el = el["offsetParent"];
        }
        return (e.offsetY +
            e.currentTarget["offsetTop"] -
            this.scrollableElement.offsetTop -
            this.scrollableElement.scrollTop);
    };
    DragDropHelper.prototype.getEvent = function (event) {
        return event["originalEvent"] ? event["originalEvent"] : event;
    };
    DragDropHelper.prototype.getY = function (element) {
        var result = 0;
        while (element) {
            result += element.offsetTop - element.scrollTop + element.clientTop;
            element = element.offsetParent;
        }
        return result;
    };
    DragDropHelper.prototype.prepareData = function (event, elementName, json) {
        var str = DragDropHelper.dataStart + "questionname:" + elementName;
        this.setData(event, str);
        var targetElement = this.createTargetElement(elementName, json);
        this.ddTarget = new DragDropTargetElement(this.survey.currentPage, targetElement, null);
    };
    DragDropHelper.prototype.setData = function (event, text) {
        if (event["originalEvent"]) {
            event = event["originalEvent"];
        }
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", text);
            event.dataTransfer.effectAllowed = "copy";
        }
        DragDropHelper.dragData = { text: text };
    };
    DragDropHelper.prototype.getData = function (event) {
        if (event["originalEvent"]) {
            event = event["originalEvent"];
        }
        if (event.dataTransfer) {
            var text = event.dataTransfer.getData("Text");
            if (text) {
                DragDropHelper.dragData.text = text;
            }
        }
        return DragDropHelper.dragData;
    };
    DragDropHelper.prototype.clearData = function () {
        //this.ddTarget = null;
        DragDropHelper.dragData = { text: "", json: null };
        var prev = DragDropHelper.prevEvent;
        prev.element = null;
        prev.x = -1;
        prev.y = -1;
        this.prevCoordinates.x = -1;
        this.prevCoordinates.y = -1;
    };
    return DragDropHelper;
}());

DragDropHelper.edgeHeight = 20;
DragDropHelper.dataStart = "surveyjs,";
DragDropHelper.dragData = { text: "", json: null };
DragDropHelper.prevEvent = { element: null, x: -1, y: -1 };
DragDropHelper.counter = 1;
DragDropHelper.ScrollDelay = 30;
DragDropHelper.ScrollOffset = 100;


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__surveyHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__questionEditors_questionEditor__ = __webpack_require__(8);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPagesEditor; });



var SurveyPagesEditor = (function () {
    function SurveyPagesEditor() {
        var _this = this;
        this.draggingPage = null;
        this.addNewPageClick = function () {
            if (_this.onAddNewPageCallback) {
                _this.onAddNewPageCallback();
            }
        };
        this.koPages = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
        this.koIsValid = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.koActiveObject = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](null);
        var self = this;
        this.selectPageClick = function (pageItem) {
            if (self.onSelectPageCallback) {
                self.onSelectPageCallback(pageItem.page);
            }
        };
        this.selectSurveyClick = function () {
            if (self.onSelectSurveyCallback) {
                self.onSelectSurveyCallback();
            }
        };
        this.keyDown = function (el, e) {
            self.onKeyDown(el, e);
        };
        this.dragStart = function (el) {
            self.draggingPage = el;
        };
        this.dragOver = function (el) { };
        this.dragEnd = function () {
            self.draggingPage = null;
        };
        this.dragDrop = function (el) {
            self.moveDraggingPageTo(el);
        };
        this.questionEditorWindow = new __WEBPACK_IMPORTED_MODULE_2__questionEditors_questionEditor__["a" /* SurveyPropertyEditorShowWindow */]();
    }
    Object.defineProperty(SurveyPagesEditor.prototype, "survey", {
        get: function () {
            return this.surveyValue;
        },
        set: function (value) {
            this.surveyValue = value;
            this.koIsValid(this.surveyValue != null);
            this.updatePages();
        },
        enumerable: true,
        configurable: true
    });
    SurveyPagesEditor.prototype.setSelectedPage = function (page) {
        var pages = this.koPages();
        for (var i = 0; i < pages.length; i++) {
            pages[i].koSelected(pages[i].page == page);
        }
    };
    SurveyPagesEditor.prototype.setSelectedObject = function (obj) {
        this.koActiveObject(obj);
    };
    SurveyPagesEditor.prototype.isSurveyActive = function () {
        return (this.koActiveObject() && this.koActiveObject().getType() === "survey");
    };
    SurveyPagesEditor.prototype.isPageActive = function () {
        return this.koActiveObject() && this.koActiveObject().getType() === "page";
    };
    SurveyPagesEditor.prototype.editSurveyClick = function () {
        if (this.onShowSurveyEditDialog) {
            this.onShowSurveyEditDialog();
        }
    };
    SurveyPagesEditor.prototype.showQuestionEditor = function (data) {
        var page = data.page;
        this.onShowPageEditDialog(page);
    };
    SurveyPagesEditor.prototype.deletePageClick = function (pageItem) {
        if (this.onDeletePageCallback) {
            this.onDeletePageCallback(pageItem.page);
        }
    };
    SurveyPagesEditor.prototype.copyPageClick = function (pageItem) {
        if (this.onDeletePageCallback) {
            this.onCopyPageCallback(pageItem.page);
        }
    };
    SurveyPagesEditor.prototype.removePage = function (page) {
        var index = this.getIndexByPage(page);
        if (index > -1) {
            this.koPages.splice(index, 1);
        }
    };
    SurveyPagesEditor.prototype.getSelectedClass = function () {
        return this.isSurveyActive() ? "icon-gear-active" : "icon-gear";
    };
    SurveyPagesEditor.prototype.changeName = function (page) {
        var index = this.getIndexByPage(page);
        if (index > -1) {
            this.koPages()[index].title(__WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */].getObjectName(page));
        }
    };
    SurveyPagesEditor.prototype.isLastPage = function () {
        return this.koPages().length === 1;
    };
    SurveyPagesEditor.prototype.getIndexByPage = function (page) {
        var pages = this.koPages();
        for (var i = 0; i < pages.length; i++) {
            if (pages[i].page == page)
                return i;
        }
        return -1;
    };
    SurveyPagesEditor.prototype.onKeyDown = function (el, e) {
        if (this.koPages().length <= 1)
            return;
        var pages = this.koPages();
        var pageIndex = -1;
        for (var i = 0; i < pages.length; i++) {
            if (pages[i].page && pages[i].koSelected()) {
                pageIndex = i;
            }
        }
        if (pageIndex < 0)
            return;
        if (e.keyCode == 46 && this.onDeletePageCallback)
            this.onDeletePageCallback(el.page);
        if ((e.keyCode == 37 || e.keyCode == 39) && this.onSelectPageCallback) {
            pageIndex += e.keyCode == 37 ? -1 : 1;
            if (pageIndex < 0)
                pageIndex = pages.length - 1;
            if (pageIndex >= pages.length)
                pageIndex = 0;
            var page = pages[pageIndex].page;
            this.onSelectPageCallback(page);
            this.setSelectedPage(page);
        }
    };
    SurveyPagesEditor.prototype.updatePages = function () {
        var self = this;
        if (this.surveyValue == null) {
            this.koPages([]);
            return;
        }
        var pages = [];
        for (var i = 0; i < this.surveyValue.pages.length; i++) {
            var page = this.surveyValue.pages[i];
            pages.push({
                title: __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](__WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */].getObjectName(page)),
                page: page,
                koSelected: __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false),
                getSelectedClass: function () {
                    return this.koSelected() && self.isPageActive()
                        ? "icon-gear-active"
                        : "icon-gear";
                }
            });
        }
        this.koPages(pages);
    };
    SurveyPagesEditor.prototype.moveDraggingPageTo = function (toPage) {
        if (toPage == null || toPage == this.draggingPage) {
            this.draggingPage = null;
            return;
        }
        if (this.draggingPage == null)
            return;
        var index = this.koPages().indexOf(this.draggingPage);
        var indexTo = this.koPages().indexOf(toPage);
        if (this.onMovePageCallback) {
            this.onMovePageCallback(index, indexTo);
        }
    };
    return SurveyPagesEditor;
}());



/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__propertyEditorBase__ = __webpack_require__(10);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyCustomEditor; });


var SurveyPropertyCustomEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyCustomEditor, _super);
    function SurveyPropertyCustomEditor(property, widgetJSON) {
        if (widgetJSON === void 0) { widgetJSON = null; }
        var _this = _super.call(this, property) || this;
        _this.isValueChanging = false;
        _this.widgetJSONValue = widgetJSON;
        var self = _this;
        _this["koAfterRender"] = function (el, con) {
            self.doAfterRender(el, con);
        };
        return _this;
    }
    Object.defineProperty(SurveyPropertyCustomEditor.prototype, "editorType", {
        get: function () {
            return "custom";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyCustomEditor.prototype, "widgetJSON", {
        get: function () {
            return this.widgetJSONValue;
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyCustomEditor.prototype.onValueChanged = function () {
        if (this.isValueChanging)
            return;
        this.isValueChanging = true;
        _super.prototype.onValueChanged.call(this);
        if (this.onValueChangedCallback)
            this.onValueChangedCallback(this.editingValue);
        this.isValueChanging = false;
    };
    Object.defineProperty(SurveyPropertyCustomEditor.prototype, "widgetRender", {
        get: function () {
            return this.widgetJSON ? this.widgetJSON.render : null;
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyCustomEditor.prototype.doAfterRender = function (elements, con) {
        var el = elements[0];
        if (el && this.widgetRender)
            this.widgetRender(this, el);
    };
    return SurveyPropertyCustomEditor;
}(__WEBPACK_IMPORTED_MODULE_1__propertyEditorBase__["a" /* SurveyPropertyEditorBase */]));



/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_survey_knockout__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyQuestionEditorDefinition; });

var SurveyQuestionEditorDefinition = (function () {
    function SurveyQuestionEditorDefinition() {
    }
    SurveyQuestionEditorDefinition.getProperties = function (className) {
        var properties = [];
        var allDefinitions = SurveyQuestionEditorDefinition.getAllDefinitionsByClass(className);
        for (var i = allDefinitions.length - 1; i >= 0; i--) {
            var def = allDefinitions[i];
            if (def.properties) {
                for (var j = 0; j < def.properties.length; j++) {
                    if (!def.properties[j]["tab"] ||
                        def.properties[j]["tab"] === "general") {
                        properties.push(def.properties[j]);
                    }
                }
            }
        }
        return properties;
    };
    SurveyQuestionEditorDefinition.isGeneralTabVisible = function (className) {
        var allDefinitions = SurveyQuestionEditorDefinition.getAllDefinitionsByClass(className);
        for (var i = allDefinitions.length - 1; i >= 0; i--) {
            var def = allDefinitions[i];
            if (def.tabs) {
                for (var j = 0; j < def.tabs.length; j++) {
                    var tab = def.tabs[j];
                    if (tab.name == "general")
                        return tab.visible !== false;
                }
            }
        }
        return true;
    };
    SurveyQuestionEditorDefinition.getTabs = function (className) {
        var tabs = [];
        var allDefinitions = SurveyQuestionEditorDefinition.getAllDefinitionsByClass(className);
        var tabsNamesHash = {};
        for (var i = 0; i < allDefinitions.length; i++) {
            var def = allDefinitions[i];
            if (def.tabs) {
                for (var j = 0; j < def.tabs.length; j++) {
                    var tab = def.tabs[j];
                    if (tabsNamesHash[tab.name])
                        continue;
                    tabsNamesHash[tab.name] = true;
                    if (tab.visible !== false) {
                        tabs.push(tab);
                    }
                }
            }
        }
        tabs.sort(function (a, b) {
            return a.index < b.index ? -1 : a.index > b.index ? 1 : 0;
        });
        return tabs;
    };
    SurveyQuestionEditorDefinition.getAllDefinitionsByClass = function (className) {
        var result = [];
        if (className.indexOf("@") > -1 &&
            SurveyQuestionEditorDefinition.definition[className]) {
            result.push(SurveyQuestionEditorDefinition.definition[className]);
            return result;
        }
        while (className) {
            var metaClass = __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"].metaData["findClass"](className);
            if (!metaClass)
                break;
            if (SurveyQuestionEditorDefinition.definition[metaClass.name]) {
                result.push(SurveyQuestionEditorDefinition.definition[metaClass.name]);
            }
            className = metaClass.parentName;
        }
        return result;
    };
    return SurveyQuestionEditorDefinition;
}());

SurveyQuestionEditorDefinition.definition = {
    questionbase: {
        properties: [
            "name",
            "title",
            { name: "visible", category: "checks" },
            { name: "isRequired", category: "checks" },
            { name: "startWithNewLine", category: "checks" }
        ],
        tabs: [{ name: "visibleIf", index: 100 }]
    },
    comment: {
        properties: ["rows", "placeHolder"]
    },
    file: {
        properties: [
            { name: "showPreview", category: "imageChecks" },
            { name: "storeDataAsText", category: "imageChecks" },
            "maxSize",
            "imageHeight",
            "imageWidth"
        ]
    },
    html: {
        tabs: [{ name: "html", index: 10 }]
    },
    matrixdropdownbase: {
        properties: ["cellType"],
        tabs: [
            { name: "columns", index: 10 },
            { name: "rows", index: 11 },
            { name: "choices", index: 12 }
        ]
    },
    matrixdynamic: {
        properties: ["rowCount", "addRowText", "removeRowText"]
    },
    matrix: {
        tabs: [{ name: "columns", index: 10 }, { name: "rows", index: 11 }]
    },
    multipletext: {
        properties: ["colCount"],
        tabs: [{ name: "items", index: 10 }]
    },
    rating: {
        properties: ["minRateDescription", "maxRateDescription"],
        tabs: [{ name: "rateValues", index: 10 }]
    },
    selectbase: {
        properties: [
            { name: "hasOther", tab: "choices" },
            { name: "otherText", tab: "choices" },
            "choicesOrder",
            "colCount"
        ],
        tabs: [
            { name: "choices", index: 10 },
            { name: "choicesByUrl", index: 11 }
        ]
    },
    dropdown: {
        properties: ["optionsCaption"]
    },
    text: {
        properties: ["inputType", "placeHolder"]
    },
    boolean: {
        properties: ["label"]
    },
    expression: {
        tabs: [{ name: "expression", index: 10 }]
    },
    "matrixdropdowncolumn@checkbox": {
        properties: ["hasOther", "otherText", "choicesOrder", "colCount"],
        tabs: [
            { name: "choices", index: 10 },
            { name: "choicesByUrl", index: 11 },
            { name: "visibleIf", index: 12 },
            { name: "enableIf", index: 20 }
        ]
    },
    "matrixdropdowncolumn@radiogroup": {
        properties: ["hasOther", "otherText", "choicesOrder", "colCount"],
        tabs: [
            { name: "choices", index: 10 },
            { name: "choicesByUrl", index: 11 },
            { name: "visibleIf", index: 12 },
            { name: "enableIf", index: 20 }
        ]
    },
    "matrixdropdowncolumn@dropdown": {
        properties: ["hasOther", "otherText", "choicesOrder", "optionsCaption"],
        tabs: [
            { name: "choices", index: 10 },
            { name: "choicesByUrl", index: 11 },
            { name: "visibleIf", index: 12 },
            { name: "enableIf", index: 20 }
        ]
    },
    "matrixdropdowncolumn@text": {
        properties: ["inputType", "placeHolder"],
        tabs: [
            { name: "validators", index: 10 },
            { name: "visibleIf", index: 12 },
            { name: "enableIf", index: 20 }
        ]
    },
    "matrixdropdowncolumn@comment": {
        properties: ["placeHolder"],
        tabs: [
            { name: "validators", index: 10 },
            { name: "visibleIf", index: 12 },
            { name: "enableIf", index: 20 }
        ]
    },
    "matrixdropdowncolumn@boolean": {
        properties: ["defaultValue"],
        tabs: [{ name: "visibleIf", index: 12 }, { name: "enableIf", index: 20 }]
    },
    "matrixdropdowncolumn@expression": {
        properties: ["name"],
        tabs: [{ name: "expression", index: 10 }]
    },
    multipletextitem: {
        properties: ["inputType", "placeHolder"],
        tabs: [{ name: "validators", index: 10 }]
    },
    paneldynamic: {
        properties: [
            { name: "renderMode", category: "render" },
            { name: "allowAddPanel", category: "render" },
            { name: "allowRemovePanel", category: "render" },
            "panelAddText",
            "panelRemoveText"
        ],
        tabs: [{ name: "templateTitle", index: 10 }]
    },
    panel: {
        properties: ["name", "title", { name: "visible", category: "checks" }],
        tabs: [{ name: "visibleIf", index: 100 }]
    },
    page: {
        properties: [
            "name",
            "title",
            { name: "visible", category: "checks" },
            "questionsOrder"
        ],
        tabs: [{ name: "visibleIf", index: 100 }]
    },
    survey: {
        properties: [
            "title",
            "showTitle",
            "locale",
            "mode",
            "clearInvisibleValues",
            "cookieName",
            { name: "sendResultOnPageNext", category: "data" },
            { name: "storeOthersAsComment", category: "data" },
            { name: "showPageTitles", category: "page" },
            { name: "showPageNumbers", category: "page" },
            { name: "pagePrevText", tab: "navigation" },
            { name: "pageNextText", tab: "navigation" },
            { name: "completeText", tab: "navigation" },
            { name: "startSurveyText", tab: "navigation" },
            {
                name: "showNavigationButtons",
                tab: "navigation",
                category: "navbuttons"
            },
            { name: "showPrevButton", tab: "navigation", category: "navbuttons" },
            { name: "firstPageIsStarted", tab: "navigation", category: "navpages" },
            { name: "showCompletedPage", tab: "navigation", category: "navpages" },
            { name: "goNextPageAutomatic", tab: "navigation", category: "navopt" },
            { name: "showProgressBar", tab: "navigation", category: "navopt" },
            { name: "isSinglePage", tab: "navigation" },
            { name: "questionTitleLocation", tab: "question" },
            { name: "requiredText", tab: "question" },
            { name: "questionStartIndex", tab: "question" },
            { name: "showQuestionNumbers", tab: "question" },
            { name: "questionTitleTemplate", tab: "question" },
            { name: "questionErrorLocation", tab: "question" },
            {
                name: "focusFirstQuestionAutomatic",
                tab: "question"
            },
            { name: "questionsOrder", tab: "question" },
            { name: "maxTimeToFinish", tab: "timer" },
            { name: "maxTimeToFinishPage", tab: "timer" },
            { name: "showTimerPanel", tab: "timer", category: "check" },
            { name: "showTimerPanelMode", tab: "timer", category: "check" }
        ],
        tabs: [
            { name: "navigation", index: 10 },
            { name: "question", index: 20 },
            { name: "completedHtml", index: 70 },
            { name: "loadingHtml", index: 80 },
            { name: "timer", index: 90 },
            { name: "triggers", index: 100 }
        ]
    }
};


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__objectProperty__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__surveyHelper__ = __webpack_require__(5);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SurveyQuestionEditorProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SurveyQuestionEditorRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyQuestionEditorProperties; });




var SurveyQuestionEditorProperty = (function () {
    function SurveyQuestionEditorProperty(obj, property, displayName, options, isTabProperty) {
        if (options === void 0) { options = null; }
        if (isTabProperty === void 0) { isTabProperty = false; }
        this.obj = obj;
        this.property = property;
        var self = this;
        this.objectPropertyValue = new __WEBPACK_IMPORTED_MODULE_2__objectProperty__["a" /* SurveyObjectProperty */](this.property, null);
        this.editor.isTabProperty = isTabProperty;
        this.editor.options = options;
        if (!displayName) {
            displayName = __WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].getString("pe." + this.property.name);
        }
        if (displayName)
            this.editor.displayName = displayName;
        this.objectProperty.object = obj;
        this.editor.setup();
    }
    Object.defineProperty(SurveyQuestionEditorProperty.prototype, "objectProperty", {
        get: function () {
            return this.objectPropertyValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyQuestionEditorProperty.prototype, "editor", {
        get: function () {
            return this.objectProperty.editor;
        },
        enumerable: true,
        configurable: true
    });
    SurveyQuestionEditorProperty.prototype.hasError = function () {
        return this.editor.hasError();
    };
    SurveyQuestionEditorProperty.prototype.apply = function () {
        this.editor.apply();
        this.obj[this.property.name] = this.editor.koValue();
    };
    SurveyQuestionEditorProperty.prototype.reset = function () {
        this.editor.koValue(this.property.getPropertyValue(this.obj));
    };
    SurveyQuestionEditorProperty.prototype.beforeShow = function () {
        this.editor.beforeShow();
    };
    return SurveyQuestionEditorProperty;
}());

var SurveyQuestionEditorRow = (function () {
    function SurveyQuestionEditorRow(obj) {
        this.obj = obj;
        this.properties = [];
    }
    SurveyQuestionEditorRow.prototype.addProperty = function (property, displayName, options, isTabProperty) {
        this.properties.push(new SurveyQuestionEditorProperty(this.obj, property, displayName, options, isTabProperty));
    };
    SurveyQuestionEditorRow.prototype.hasError = function () {
        var isError = false;
        for (var i = 0; i < this.properties.length; i++) {
            isError = this.properties[i].hasError() || isError;
        }
        return isError;
    };
    return SurveyQuestionEditorRow;
}());

var SurveyQuestionEditorProperties = (function () {
    function SurveyQuestionEditorProperties(obj, properties, onCanShowPropertyCallback, options, isTabProperty) {
        if (onCanShowPropertyCallback === void 0) { onCanShowPropertyCallback = null; }
        if (options === void 0) { options = null; }
        if (isTabProperty === void 0) { isTabProperty = false; }
        this.obj = obj;
        this.options = options;
        this.isTabProperty = isTabProperty;
        this.rows = [];
        this.onCanShowPropertyCallback = onCanShowPropertyCallback;
        this.properties = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData["getPropertiesByObj"]
            ? __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData["getPropertiesByObj"](this.obj)
            : __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData.getProperties(this.obj.getType());
        this.buildRows(properties);
    }
    SurveyQuestionEditorProperties.prototype.apply = function () {
        this.performForAllProperties("apply");
    };
    SurveyQuestionEditorProperties.prototype.reset = function () {
        this.performForAllProperties("reset");
    };
    SurveyQuestionEditorProperties.prototype.beforeShow = function () {
        this.performForAllProperties("beforeShow");
    };
    SurveyQuestionEditorProperties.prototype.hasError = function () {
        var isError = false;
        for (var i = 0; i < this.rows.length; i++) {
            isError = this.rows[i].hasError() || isError;
        }
        return isError;
    };
    SurveyQuestionEditorProperties.prototype.performForAllProperties = function (methodName) {
        for (var i = 0; i < this.rows.length; i++) {
            for (var j = 0; j < this.rows[i].properties.length; j++) {
                var property = this.rows[i].properties[j];
                if (methodName === "apply")
                    property.apply();
                if (methodName === "reset")
                    property.reset();
                if (methodName === "beforeShow")
                    property.beforeShow();
            }
        }
    };
    SurveyQuestionEditorProperties.prototype.buildRows = function (properties) {
        for (var i = 0; i < properties.length; i++) {
            var name = this.getName(properties[i]);
            var jsonProperty = this.getProperty(name);
            if (!jsonProperty)
                continue;
            var row = this.getRowByCategory(properties[i].category);
            if (!row) {
                row = new SurveyQuestionEditorRow(this.obj);
                if (properties[i].category)
                    row.category = properties[i].category;
                this.rows.push(row);
            }
            row.addProperty(jsonProperty, properties[i].title, this.options, this.isTabProperty);
        }
    };
    SurveyQuestionEditorProperties.prototype.getName = function (prop) {
        if (!prop)
            return null;
        if (typeof prop === "string")
            return prop;
        if (prop.name)
            return prop.name;
        return null;
    };
    SurveyQuestionEditorProperties.prototype.getRowByCategory = function (category) {
        if (!category)
            return null;
        for (var i = 0; i < this.rows.length; i++) {
            if (this.rows[i].category == category)
                return this.rows[i];
        }
        return null;
    };
    SurveyQuestionEditorProperties.prototype.getProperty = function (propertyName) {
        if (!propertyName)
            return null;
        var property = null;
        for (var i = 0; i < this.properties.length; i++) {
            if (this.properties[i].name == propertyName) {
                property = this.properties[i];
                break;
            }
        }
        return __WEBPACK_IMPORTED_MODULE_3__surveyHelper__["b" /* SurveyHelper */].isPropertyVisible(this.obj, property, this.onCanShowPropertyCallback)
            ? property
            : null;
    };
    return SurveyQuestionEditorProperties;
}());



/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuestionToolbox; });



/**
 * The list of Toolbox items.
 */
var QuestionToolbox = (function () {
    function QuestionToolbox(supportedQuestions) {
        if (supportedQuestions === void 0) { supportedQuestions = null; }
        this.supportedQuestions = supportedQuestions;
        this._orderedQuestions = [
            "text",
            "checkbox",
            "radiogroup",
            "dropdown",
            "comment",
            "rating",
            "boolean",
            "html"
        ];
        /**
         * The maximum number of copied toolbox items. If an user adding copiedItemMaxCount + 1 item, the first added item will be removed.
         */
        this.copiedItemMaxCount = 3;
        this.itemsValue = [];
        this.koItems = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
        this.koCategories = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
        this.koActiveCategory = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
        this.koHasCategories = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.createDefaultItems(supportedQuestions);
        var self = this;
        this.koActiveCategory.subscribe(function (newValue) {
            for (var i = 0; i < self.koCategories().length; i++) {
                var category = self.koCategories()[i];
                category.koCollapsed(category.name !== newValue);
            }
        });
    }
    Object.defineProperty(QuestionToolbox.prototype, "orderedQuestions", {
        /**
         * Modify this array to change the toolbox items order.
         */
        get: function () {
            return this._orderedQuestions;
        },
        set: function (questions) {
            this._orderedQuestions = questions;
            this.reorderItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "jsonText", {
        /**
         * The Array of Toolbox items as Text JSON.
         */
        get: function () {
            return JSON.stringify(this.itemsValue);
        },
        set: function (value) {
            this.itemsValue = value ? JSON.parse(value) : [];
            this.onItemsChanged();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "copiedJsonText", {
        /**
         * The Array of copied Toolbox items as Text JSON.
         */
        get: function () {
            return JSON.stringify(this.copiedItems);
        },
        set: function (value) {
            var newItems = value ? JSON.parse(value) : [];
            this.clearCopiedItems();
            for (var i = 0; i < newItems.length; i++) {
                newItems[i].isCopied = true;
                this.addItem(newItems[i]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "items", {
        /**
         * The Array of Toolbox items
         */
        get: function () {
            return this.itemsValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QuestionToolbox.prototype, "copiedItems", {
        /**
         * The Array of copied Toolbox items
         */
        get: function () {
            var result = [];
            for (var i = 0; i < this.itemsValue.length; i++) {
                if (this.itemsValue[i].isCopied)
                    result.push(this.itemsValue[i]);
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Add toolbox items into the Toolbox
     * @param items the list of new items
     * @param clearAll set it to true to clear all previous items.
     */
    QuestionToolbox.prototype.addItems = function (items, clearAll) {
        if (clearAll === void 0) { clearAll = false; }
        if (clearAll) {
            this.clearItems();
        }
        for (var i = 0; i < items.length; i++) {
            this.itemsValue.push(items[i]);
        }
        this.onItemsChanged();
    };
    /**
     * Add a copied Question into Toolbox
     * @param question a copied Survey.Question
     */
    QuestionToolbox.prototype.addCopiedItem = function (question) {
        var item = {
            name: question.name,
            title: question.name,
            isCopied: true,
            iconName: "icon-default",
            json: this.getQuestionJSON(question),
            category: ""
        };
        if (this.replaceItem(item))
            return;
        var copied = this.copiedItems;
        if (this.copiedItemMaxCount > 0 && copied.length == this.copiedItemMaxCount)
            this.removeItem(copied[this.copiedItemMaxCount - 1].name);
        this.addItem(item);
    };
    /**
     * Add a toolbox item
     * @param item the toolbox item description
     * @see IQuestionToolboxItem
     */
    QuestionToolbox.prototype.addItem = function (item) {
        this.itemsValue.push(item);
        this.onItemsChanged();
    };
    /**
     * Add a new toolbox item, add delete the old item with the same name
     * @param item the toolbox item description
     * @see IQuestionToolboxItem
     */
    QuestionToolbox.prototype.replaceItem = function (item) {
        var index = this.indexOf(item.name);
        if (index < 0)
            return;
        this.itemsValue[index] = item;
        this.onItemsChanged();
        return true;
    };
    /**
     * Remove a toolbox item by it's name
     * @param name toolbox item name
     * @see IQuestionToolboxItem
     */
    QuestionToolbox.prototype.removeItem = function (name) {
        var index = this.indexOf(name);
        if (index < 0)
            return false;
        this.itemsValue.splice(index, 1);
        this.onItemsChanged();
        return true;
    };
    /**
     * Remove all toolbox items.
     */
    QuestionToolbox.prototype.clearItems = function () {
        this.itemsValue = [];
        this.onItemsChanged();
    };
    /**
     * Remove all copied toolbox items.
     */
    QuestionToolbox.prototype.clearCopiedItems = function () {
        var removedItems = this.copiedItems;
        for (var i = 0; i < removedItems.length; i++) {
            this.removeItem(removedItems[i].name);
        }
    };
    /**
     * Returns toolbox item by its name. Returns null if there is no toolbox item with this name
     * @param name
     */
    QuestionToolbox.prototype.getItemByName = function (name) {
        var index = this.indexOf(name);
        return index > -1 ? this.itemsValue[index] : null;
    };
    /**
     * Change the category of the toolbox item
     * @param name the toolbox item name
     * @param category new category name
     */
    QuestionToolbox.prototype.changeCategory = function (name, category) {
        this.changeCategories([{ name: name, category: category }]);
    };
    /**
     * Change categories for several toolbox items.
     * @param changedItems the array of objects {name: "your toolbox item name", category: "new category name"}
     */
    QuestionToolbox.prototype.changeCategories = function (changedItems) {
        for (var i = 0; i < changedItems.length; i++) {
            var item = changedItems[i];
            var toolboxItem = this.getItemByName(item.name);
            if (toolboxItem) {
                toolboxItem.category = item.category;
            }
        }
        this.onItemsChanged();
    };
    QuestionToolbox.prototype.onItemsChanged = function () {
        this.koItems(this.itemsValue);
        var categories = [];
        var categoriesHash = {};
        var prevActiveCategory = this.koActiveCategory();
        var self = this;
        for (var i = 0; i < this.itemsValue.length; i++) {
            var item = this.itemsValue[i];
            var categoryName = item.category
                ? item.category
                : __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString("ed.toolboxGeneralCategory"); //TODO
            if (!categoriesHash[categoryName]) {
                var category = {
                    name: categoryName,
                    items: [],
                    koCollapsed: __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](categoryName !== prevActiveCategory),
                    expand: function () {
                        self.koActiveCategory(this.name);
                    }
                };
                categoriesHash[categoryName] = category;
                categories.push(category);
            }
            categoriesHash[categoryName].items.push(item);
        }
        this.koCategories(categories);
        if (prevActiveCategory && categoriesHash[prevActiveCategory]) {
            this.koActiveCategory(prevActiveCategory);
        }
        else {
            this.koActiveCategory(categories.length > 0 ? categories[0].name : "");
        }
        this.koHasCategories(categories.length > 1);
    };
    QuestionToolbox.prototype.indexOf = function (name) {
        for (var i = 0; i < this.itemsValue.length; i++) {
            if (this.itemsValue[i].name == name)
                return i;
        }
        return -1;
    };
    QuestionToolbox.prototype.reorderItems = function () {
        var _this = this;
        this.itemsValue.sort(function (i1, i2) {
            var index1 = _this._orderedQuestions.indexOf(i1.name);
            if (index1 === -1)
                index1 = Number.MAX_VALUE;
            var index2 = _this._orderedQuestions.indexOf(i2.name);
            if (index2 === -1)
                index2 = Number.MAX_VALUE;
            return index1 - index2;
        });
        this.onItemsChanged();
    };
    QuestionToolbox.prototype.createDefaultItems = function (supportedQuestions) {
        this.clearItems();
        var questions = this.getQuestionTypes(supportedQuestions);
        for (var i = 0; i < questions.length; i++) {
            var name = questions[i];
            var question = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["ElementFactory"].Instance.createElement(name, "q1");
            if (!question) {
                question = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"].metaData.createClass(name);
            }
            var json = this.getQuestionJSON(question);
            var item = {
                name: name,
                iconName: "icon-" + name,
                title: __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString("qt." + name),
                json: json,
                isCopied: false,
                category: ""
            };
            this.itemsValue.push(item);
        }
        this.registerCustomWidgets();
        this.onItemsChanged();
    };
    QuestionToolbox.prototype.registerCustomWidgets = function () {
        var inst = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["CustomWidgetCollection"].Instance;
        if (!inst.getActivatedBy)
            return;
        var widgets = inst.widgets;
        for (var i = 0; i < widgets.length; i++) {
            if (inst.getActivatedBy(widgets[i].name) != "customtype")
                continue;
            var widgetJson = widgets[i].widgetJson;
            if (!widgetJson.widgetIsLoaded || !widgetJson.widgetIsLoaded())
                continue;
            var iconName = widgetJson.iconName ? widgetJson.iconName : "icon-default";
            var title = __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString("qt." + widgetJson.name);
            if (!title || title == widgetJson.name)
                title = widgetJson.title;
            if (!title)
                title = widgetJson.name;
            var json = widgetJson.defaultJSON ? widgetJson.defaultJSON : {};
            if (!json.type) {
                json.type = widgetJson.name;
            }
            var item = {
                name: widgetJson.name,
                iconName: iconName,
                title: title,
                json: json,
                isCopied: false,
                category: ""
            };
            this.itemsValue.push(item);
        }
    };
    QuestionToolbox.prototype.getQuestionJSON = function (question) {
        var json = new __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"]().toJsonObject(question);
        json.type = question.getType();
        return json;
    };
    QuestionToolbox.prototype.getQuestionTypes = function (supportedQuestions) {
        var allTypes = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["ElementFactory"].Instance.getAllTypes();
        if (!supportedQuestions || supportedQuestions.length == 0)
            supportedQuestions = allTypes;
        var questions = [];
        for (var i = 0; i < this.orderedQuestions.length; i++) {
            var name = this.orderedQuestions[i];
            if (supportedQuestions.indexOf(name) > -1 && allTypes.indexOf(name) > -1)
                questions.push(name);
        }
        for (var i = 0; i < supportedQuestions.length; i++) {
            var name = supportedQuestions[i];
            if (questions.indexOf(supportedQuestions[i]) < 0 &&
                allTypes.indexOf(name) > -1)
                questions.push(name);
        }
        return questions;
    };
    return QuestionToolbox;
}());



/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_survey_knockout__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuestionConverter; });

var QuestionConverter = (function () {
    function QuestionConverter() {
    }
    QuestionConverter.addConvertInfo = function (className, convertToClassName) {
        if (!QuestionConverter.convertInfo[className]) {
            QuestionConverter.convertInfo[className] = [];
        }
        QuestionConverter.convertInfo[className].push(convertToClassName);
    };
    QuestionConverter.getConvertToClasses = function (className) {
        var res = QuestionConverter.convertInfo[className];
        return res ? res : [];
    };
    QuestionConverter.convertObject = function (obj, convertToClass) {
        if (!obj || !obj.parent || convertToClass == obj.getType())
            return null;
        var newQuestion = __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["QuestionFactory"].Instance.createQuestion(convertToClass, obj.name);
        var jsonObj = new __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"]();
        var json = jsonObj.toJsonObject(obj);
        jsonObj.toObject(json, newQuestion);
        var panel = obj.parent;
        var index = panel.elements.indexOf(obj);
        panel.removeElement(obj);
        panel.addElement(newQuestion, index);
        return newQuestion;
    };
    return QuestionConverter;
}());

QuestionConverter.convertInfo = {};
function createDefaultQuestionConverterItems() {
    var classes = __WEBPACK_IMPORTED_MODULE_0_survey_knockout__["JsonObject"].metaData.getChildrenClasses("selectbase", true);
    for (var i = 0; i < classes.length; i++) {
        for (var j = 0; j < classes.length; j++) {
            if (i == j)
                continue;
            QuestionConverter.addConvertInfo(classes[i].name, classes[j].name);
        }
    }
    QuestionConverter.addConvertInfo("text", "comment");
    QuestionConverter.addConvertInfo("comment", "text");
}
createDefaultQuestionConverterItems();


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__json5__ = __webpack_require__(15);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyEmbedingWindow; });



var SurveyEmbedingWindow = (function () {
    function SurveyEmbedingWindow() {
        this.surveyId = null;
        this.surveyPostId = null;
        this.generateValidJSON = false;
        this.surveyJSVersion = __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["Version"];
        this.surveyCDNPath = "https://surveyjs.azureedge.net/";
        this.platformSurveyJSPrefix = {
            angular: "angular",
            jquery: "jquery",
            knockout: "ko",
            react: "react",
            vue: "vue"
        };
        this.platformJSonPage = {
            angular: "@Component({\n  selector: 'ng-app',\n        template: \n        <div id='surveyElement'></div>\",\n})\nexport class AppComponent {\n    ngOnInit() {\n        var survey = new Survey.Model(surveyJSON);\n        survey.onComplete.add(sendDataToServer);\n       Survey.SurveyNG.render(\"surveyElement\", { model: survey });\n    }\n}",
            jquery: 'var survey = new Survey.Model(surveyJSON);\n$("#surveyContainer").Survey({\n    model: survey,\n    onComplete: sendDataToServer\n});',
            knockout: 'var survey = new Survey.Model(surveyJSON, "surveyContainer");\nsurvey.onComplete.add(sendDataToServer);',
            react: 'ReactDOM.render(\n    <Survey.Survey json={ surveyJSON } onComplete={ sendDataToServer } />, document.getElementById("surveyContainer"));',
            vue: "var survey = new Survey.Model(surveyJSON);\nnew Vue({ el: '#surveyContainer', data: { survey: survey } });"
        };
        this.platformJSonWindow = {
            angular: "@Component({\n  selector: 'ng-app',\n        template: \n        <div id='surveyElement'></div>\",\n})\nexport class AppComponent {\n    ngOnInit() {\n        var survey = new Survey.Model(surveyJSON);\n        survey.onComplete.add(sendDataToServer);\n       Survey.SurveyWindowNG.render(\"surveyElement\", { model: survey });\n    }\n}",
            jquery: 'var survey = new Survey.Model(surveyJSON);\n$("#surveyContainer").SurveyWindow({\n    model: survey,\n    onComplete: sendDataToServer\n});',
            knockout: "var survey = new Survey.Model(surveyJSON);\nsurveyWindow.show();\nsurvey.onComplete.add(sendDataToServer);",
            react: 'ReactDOM.render(\n    <Survey.SurveyWindow json={ surveyJSON } onComplete={ sendDataToServer } />, document.getElementById("surveyContainer"));',
            vue: ""
        };
        this.platformHtmlonPage = {
            angular: "<ng-app></ng-app>",
            jquery: '<div id="surveyContainer"></div>',
            knockout: '<div id="surveyContainer"></div>',
            react: '<div id="surveyContainer"></div>',
            vue: '<div id="surveyContainer"><survey :survey="survey"></survey></div>'
        };
        this.platformHtmlonWindow = {
            angular: "<ng-app></ng-app>",
            jquery: '<div id="surveyContainer"></div>',
            knockout: "",
            react: '<div id="surveyContainer"></div>',
            vue: "<div id='surveyContainer'><survey-window :survey='survey'></survey-window></div>"
        };
        var self = this;
        this.koLibraryVersion = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("jquery");
        this.koShowAsWindow = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("page");
        this.koScriptUsing = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("bootstrap");
        this.koHasIds = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.koLoadSurvey = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.koHeadText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
        this.koJavaText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
        this.koBodyText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
        this.koVisibleHtml = __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () {
            return (self.koShowAsWindow() == "page" ||
                self.platformHtmlonWindow[self.koLibraryVersion()] != "");
        });
        this.koLibraryVersion.subscribe(function (newValue) {
            self.setHeadText();
            self.setJavaTest();
            self.setBodyText();
        });
        this.koShowAsWindow.subscribe(function (newValue) {
            self.setJavaTest();
            self.setBodyText();
        });
        this.koScriptUsing.subscribe(function (newValue) {
            self.setHeadText();
            self.setJavaTest();
        });
        this.koLoadSurvey.subscribe(function (newValue) {
            self.setJavaTest();
        });
        this.surveyEmbedingHead = null;
    }
    Object.defineProperty(SurveyEmbedingWindow.prototype, "json", {
        get: function () {
            return this.jsonValue;
        },
        set: function (value) {
            this.jsonValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEmbedingWindow.prototype, "hasAceEditor", {
        get: function () {
            return typeof ace !== "undefined";
        },
        enumerable: true,
        configurable: true
    });
    SurveyEmbedingWindow.prototype.show = function () {
        if (this.hasAceEditor && this.surveyEmbedingHead == null) {
            this.surveyEmbedingHead = this.createEditor("surveyEmbedingHead");
            this.surveyEmbedingBody = this.createEditor("surveyEmbedingBody");
            this.surveyEmbedingJava = this.createEditor("surveyEmbedingJava");
        }
        this.koHasIds(this.surveyId && this.surveyPostId);
        this.setBodyText();
        this.setHeadText();
        this.setJavaTest();
    };
    SurveyEmbedingWindow.prototype.setBodyText = function () {
        this.setTextToEditor(this.surveyEmbedingBody, this.koBodyText, this.platformHtmlonPage[this.koLibraryVersion()]);
    };
    Object.defineProperty(SurveyEmbedingWindow.prototype, "getCDNPath", {
        get: function () {
            return this.surveyCDNPath + this.surveyJSVersion + "/";
        },
        enumerable: true,
        configurable: true
    });
    SurveyEmbedingWindow.prototype.setHeadText = function () {
        var str = "<!-- Your platform (" + this.koLibraryVersion() + ") scripts. -->\n";
        if (this.koScriptUsing() != "bootstrap") {
            str +=
                '\n<link href="' +
                    this.getCDNPath +
                    'survey.css" type="text/css" rel="stylesheet" />';
        }
        str +=
            '\n<script src="' +
                this.getCDNPath +
                "survey." +
                this.platformSurveyJSPrefix[this.koLibraryVersion()] +
                '.min.js"></script>';
        this.setTextToEditor(this.surveyEmbedingHead, this.koHeadText, str);
    };
    SurveyEmbedingWindow.prototype.setJavaTest = function () {
        this.setTextToEditor(this.surveyEmbedingJava, this.koJavaText, this.getJavaText());
    };
    SurveyEmbedingWindow.prototype.createEditor = function (elementName) {
        var editor = ace.edit(elementName);
        editor.setTheme("ace/theme/monokai");
        editor.session.setMode("ace/mode/json");
        editor.setShowPrintMargin(false);
        editor.renderer.setShowGutter(false);
        editor.setReadOnly(true);
        return editor;
    };
    SurveyEmbedingWindow.prototype.getJavaText = function () {
        var isOnPage = this.koShowAsWindow() == "page";
        var str = this.getSaveFunc() + "\n\n";
        str += isOnPage
            ? this.platformJSonPage[this.koLibraryVersion()]
            : this.platformJSonWindow[this.koLibraryVersion()];
        var jsonText = "var surveyJSON = " + this.getJsonText() + "\n\n";
        return this.getSetCss() + "\n" + jsonText + str;
    };
    SurveyEmbedingWindow.prototype.getSetCss = function () {
        if (this.koScriptUsing() != "bootstrap")
            return "";
        return "Survey.Survey.cssType = \"bootstrap\";\n";
    };
    SurveyEmbedingWindow.prototype.getSaveFunc = function () {
        return ("function sendDataToServer(survey) {\n" + this.getSaveFuncCode() + "\n}");
    };
    SurveyEmbedingWindow.prototype.getSaveFuncCode = function () {
        if (this.koHasIds())
            return "    survey.sendResult('" + this.surveyPostId + "');";
        return "    //send Ajax request to your web server.\n    alert(\"The results are:\" + JSON.stringify(survey.data));";
    };
    SurveyEmbedingWindow.prototype.getJsonText = function () {
        if (this.koHasIds() && this.koLoadSurvey()) {
            return "{ surveyId: '" + this.surveyId + "'}";
        }
        if (this.generateValidJSON)
            return JSON.stringify(this.json);
        return new __WEBPACK_IMPORTED_MODULE_2__json5__["a" /* SurveyJSON5 */]().stringify(this.json);
    };
    SurveyEmbedingWindow.prototype.setTextToEditor = function (editor, koText, text) {
        if (editor)
            editor.setValue(text);
        if (koText)
            koText(text);
    };
    return SurveyEmbedingWindow;
}());



/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__surveyHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(0);
/* unused harmony export SurveyObjectItem */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyObjects; });



var SurveyObjectItem = (function () {
    function SurveyObjectItem() {
        this.level = 0;
    }
    return SurveyObjectItem;
}());

var SurveyObjects = (function () {
    function SurveyObjects(koObjects, koSelected) {
        this.koObjects = koObjects;
        this.koSelected = koSelected;
    }
    Object.defineProperty(SurveyObjects.prototype, "survey", {
        get: function () {
            return this.surveyValue;
        },
        set: function (value) {
            if (this.survey == value)
                return;
            this.surveyValue = value;
            this.rebuild();
        },
        enumerable: true,
        configurable: true
    });
    SurveyObjects.prototype.addPage = function (page) {
        this.addElement(page, null);
    };
    SurveyObjects.prototype.addElement = function (element, parent) {
        var parentIndex = parent != null ? this.getItemIndex(parent) : 0;
        if (parentIndex < 0)
            return;
        var elements = parent != null ? this.getElements(parent) : this.survey.pages;
        var elementIndex = elements.indexOf(element);
        var newIndex = elementIndex + 1 + parentIndex;
        if (elementIndex > 0) {
            var prevElement = elements[elementIndex - 1];
            newIndex =
                this.getItemIndex(prevElement) +
                    this.getAllElementCount(prevElement) +
                    1;
        }
        var item = this.createItem(element, this.koObjects()[parentIndex]);
        this.addItem(item, newIndex);
        var objs = [];
        this.buildElements(objs, this.getElements(element), item);
        for (var i = 0; i < objs.length; i++) {
            this.koObjects.splice(newIndex + 1 + i, 0, objs[i]);
        }
        this.koSelected(item);
    };
    SurveyObjects.prototype.selectObject = function (obj) {
        var objs = this.koObjects();
        for (var i = 0; i < objs.length; i++) {
            if (objs[i].value == obj) {
                this.koSelected(objs[i]);
                return;
            }
        }
    };
    SurveyObjects.prototype.getSelectedObjectPage = function (obj) {
        if (obj === void 0) { obj = null; }
        if (!this.survey)
            return null;
        if (!obj) {
            if (!this.koSelected())
                return;
            obj = this.koSelected().value;
        }
        var objs = this.koObjects();
        var index = this.getItemIndex(obj);
        while (index > 0) {
            var item = objs[index];
            if (item.level == 1)
                return item.value;
            index--;
        }
        return null;
    };
    SurveyObjects.prototype.removeObject = function (obj) {
        var index = this.getItemIndex(obj);
        if (index < 0)
            return;
        var countToRemove = 1 + this.getAllElementCount(obj);
        this.koObjects.splice(index, countToRemove);
    };
    SurveyObjects.prototype.nameChanged = function (obj) {
        var index = this.getItemIndex(obj);
        if (index < 0)
            return;
        this.koObjects()[index].text(this.getText(this.koObjects()[index]));
    };
    SurveyObjects.prototype.selectNextQuestion = function (isUp) {
        var question = this.getSelectedQuestion();
        var itemIndex = this.getItemIndex(question);
        if (itemIndex < 0)
            return question;
        var objs = this.koObjects();
        var newItemIndex = itemIndex + (isUp ? -1 : 1);
        if (newItemIndex < objs.length &&
            __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */].getObjectType(objs[newItemIndex].value) == __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["a" /* ObjType */].Question) {
            itemIndex = newItemIndex;
        }
        else {
            newItemIndex = itemIndex;
            while (newItemIndex < objs.length &&
                __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */].getObjectType(objs[newItemIndex].value) == __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["a" /* ObjType */].Question) {
                itemIndex = newItemIndex;
                newItemIndex += isUp ? 1 : -1;
            }
        }
        this.koSelected(objs[itemIndex]);
    };
    SurveyObjects.prototype.getAllElementCount = function (element) {
        var elements = this.getElements(element);
        var res = 0;
        for (var i = 0; i < elements.length; i++) {
            res += 1 + this.getAllElementCount(elements[i]);
        }
        return res;
    };
    SurveyObjects.prototype.getSelectedQuestion = function () {
        if (!this.koSelected())
            return null;
        var obj = this.koSelected().value;
        if (!obj)
            return null;
        return __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */].getObjectType(obj) == __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["a" /* ObjType */].Question
            ? obj
            : null;
    };
    SurveyObjects.prototype.addItem = function (item, index) {
        if (index > this.koObjects().length) {
            this.koObjects.push(item);
        }
        else {
            this.koObjects.splice(index, 0, item);
        }
    };
    SurveyObjects.prototype.rebuild = function () {
        var objs = [];
        if (this.survey == null) {
            this.koObjects(objs);
            this.selectObject(null);
            return;
        }
        var root = this.createItem(this.survey, null);
        objs.push(root);
        for (var i = 0; i < this.survey.pages.length; i++) {
            var page = this.survey.pages[i];
            var pageItem = this.createItem(page, root);
            objs.push(pageItem);
            this.buildElements(objs, this.getElements(page), pageItem);
        }
        this.koObjects(objs);
        this.selectObject(this.survey);
    };
    SurveyObjects.prototype.getElements = function (element) {
        return __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */].getElements(element);
    };
    SurveyObjects.prototype.buildElements = function (objs, elements, parentItem) {
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i];
            var item = this.createItem(el, parentItem);
            objs.push(item);
            this.buildElements(objs, this.getElements(el), item);
        }
    };
    SurveyObjects.prototype.createItem = function (value, parent) {
        var item = new SurveyObjectItem();
        item.value = value;
        item.level = parent != null ? parent.level + 1 : 0;
        item.text = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](this.getText(item));
        return item;
    };
    SurveyObjects.prototype.getItemIndex = function (value) {
        if (!value)
            return -1;
        if (value["selectedElementInDesign"])
            value = value["selectedElementInDesign"];
        var objs = this.koObjects();
        for (var i = 0; i < objs.length; i++) {
            if (objs[i].value == value)
                return i;
        }
        return -1;
    };
    SurveyObjects.prototype.getText = function (item) {
        if (item.level == 0)
            return __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString("ed.survey");
        var intend = SurveyObjects.intend;
        for (var i = 1; i < item.level; i++) {
            intend += SurveyObjects.intend;
        }
        return intend + __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */].getObjectName(item.value);
    };
    return SurveyObjects;
}());

SurveyObjects.intend = ".";


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__surveyHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_survey_knockout__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyLiveTester; });




var SurveyLiveTester = (function () {
    function SurveyLiveTester() {
        this.koIsRunning = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](true);
        this.koResultText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
        this.koPages = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]([]);
        var self = this;
        this.selectTestClick = function () {
            self.testAgain();
        };
        this.selectPageClick = function (pageItem) {
            if (self.survey) {
                if (self.survey.state == "starting") {
                    self.survey["start"](); //TODO
                }
                self.survey.currentPage = pageItem.page;
            }
        };
        this.survey = new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Survey"]();
        this.koSurvey = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](this.survey);
    }
    SurveyLiveTester.prototype.setJSON = function (json) {
        this.json = json;
        if (json != null) {
            if (json.cookieName) {
                delete json.cookieName;
            }
        }
        this.survey = json ? new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Survey"](json) : new __WEBPACK_IMPORTED_MODULE_3_survey_knockout__["Survey"]();
        if (this.onSurveyCreatedCallback)
            this.onSurveyCreatedCallback(this.survey);
        var self = this;
        this.survey.onComplete.add(function (sender) {
            self.koIsRunning(false);
            self.koResultText(self.surveyResultsText + JSON.stringify(self.survey.data));
        });
        //TODO
        if (this.survey["onStarted"]) {
            this.survey["onStarted"].add(function (sender) {
                self.setActivePageItem(self.survey.currentPage, true);
            });
        }
        this.survey.onCurrentPageChanged.add(function (sender, options) {
            self.setActivePageItem(options.oldCurrentPage, false);
            self.setActivePageItem(options.newCurrentPage, true);
        });
        this.survey.onPageVisibleChanged.add(function (sender, options) {
            var item = self.getPageItemByPage(options.page);
            if (item) {
                item.koVisible(options.visible);
            }
        });
    };
    SurveyLiveTester.prototype.show = function () {
        var pages = [];
        for (var i = 0; i < this.survey.pages.length; i++) {
            var page = this.survey.pages[i];
            pages.push({
                page: page,
                title: __WEBPACK_IMPORTED_MODULE_1__surveyHelper__["b" /* SurveyHelper */].getObjectName(page),
                koVisible: __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](page.isVisible),
                koActive: __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](this.survey.state == "running" && page === this.survey.currentPage)
            });
        }
        this.koPages(pages);
        this.koSurvey(this.survey);
        this.koIsRunning(true);
    };
    Object.defineProperty(SurveyLiveTester.prototype, "testSurveyAgainText", {
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString("ed.testSurveyAgain");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyLiveTester.prototype, "surveyResultsText", {
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString("ed.surveyResults");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyLiveTester.prototype, "selectPageText", {
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_2__editorLocalization__["a" /* editorLocalization */].getString("ts.selectPage");
        },
        enumerable: true,
        configurable: true
    });
    SurveyLiveTester.prototype.testAgain = function () {
        this.setJSON(this.json);
        this.show();
    };
    SurveyLiveTester.prototype.setActivePageItem = function (page, val) {
        var item = this.getPageItemByPage(page);
        if (item) {
            item.koActive(val);
        }
    };
    SurveyLiveTester.prototype.getPageItemByPage = function (page) {
        var items = this.koPages();
        for (var i = 0; i < items.length; i++) {
            if (items[i].page === page)
                return items[i];
        }
        return null;
    };
    return SurveyLiveTester;
}());



/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyUndoRedo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return UndoRedoItem; });


var SurveyUndoRedo = (function () {
    function SurveyUndoRedo() {
        this.index = -1;
        this.maximumCount = 10;
        this.items = [];
        this.koCanUndo = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.koCanRedo = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
    }
    SurveyUndoRedo.prototype.clear = function () {
        this.items = [];
        this.koCanUndo(false);
        this.koCanRedo(false);
    };
    SurveyUndoRedo.prototype.setCurrent = function (survey, selectedObjName) {
        var item = new UndoRedoItem();
        item.surveyJSON = new __WEBPACK_IMPORTED_MODULE_1_survey_knockout__["JsonObject"]().toJsonObject(survey);
        item.selectedObjName = selectedObjName;
        if (this.index < this.items.length - 1) {
            this.items.splice(this.index + 1);
        }
        this.items.push(item);
        this.removeOldData();
        this.index = this.items.length - 1;
        this.updateCanUndoRedo();
    };
    SurveyUndoRedo.prototype.undo = function () {
        if (!this.canUndo)
            return null;
        return this.doUndoRedo(-1);
    };
    SurveyUndoRedo.prototype.redo = function () {
        if (!this.canRedo)
            return null;
        return this.doUndoRedo(1);
    };
    SurveyUndoRedo.prototype.updateCanUndoRedo = function () {
        this.koCanUndo(this.canUndo);
        this.koCanRedo(this.canRedo);
    };
    SurveyUndoRedo.prototype.doUndoRedo = function (dIndex) {
        this.index += dIndex;
        this.updateCanUndoRedo();
        return this.index >= 0 && this.index < this.items.length
            ? this.items[this.index]
            : null;
    };
    Object.defineProperty(SurveyUndoRedo.prototype, "canUndo", {
        get: function () {
            return this.index >= 1 && this.index < this.items.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyUndoRedo.prototype, "canRedo", {
        get: function () {
            return this.items.length > 1 && this.index < this.items.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    SurveyUndoRedo.prototype.removeOldData = function () {
        if (this.items.length - 1 < this.maximumCount)
            return;
        this.items.splice(0, this.items.length - this.maximumCount - 1);
    };
    return SurveyUndoRedo;
}());

var UndoRedoItem = (function () {
    function UndoRedoItem() {
    }
    return UndoRedoItem;
}());



/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var is = function (obj, type) { return Object.prototype.toString.call(obj).toLowerCase() === ("[object " + type + "]"); };

var addClass = function (el, cls) {
    var arr = el.className
    .split(/\s+/)
    .filter(function (c) { return !!c && c == cls; });

    if (!arr.length) {
        el.className += " " + cls;
    }
};

var removeClass = function (el, cls) {
    el.className = el.className
    .split(/\s+/)
    .filter(function (c) { return !!c && c != cls; })
    .join(' ');
};

var RModal = function RModal(el, opts) {
    var this$1 = this;

    this.opened = false;

    this.opts = {
        bodyClass: 'modal-open'
        , dialogClass: 'modal-dialog'
        , dialogOpenClass: 'bounceInDown'
        , dialogCloseClass: 'bounceOutUp'

        , focus: true
        , focusElements: [
            'a[href]', 'area[href]', 'input:not([disabled]):not([type=hidden])'
            , 'button:not([disabled])', 'select:not([disabled])'
            , 'textarea:not([disabled])', 'iframe', 'object', 'embed'
            , '*[tabindex]', '*[contenteditable]'
        ]

        , escapeClose: true
        , content: null
        , closeTimeout: 500
    };

    Object.keys(opts || {})
    .forEach(function (key) {
        /* istanbul ignore else */
        if (opts[key] !== undefined) {
            this$1.opts[key] = opts[key];
        }
    });

    this.overlay = el;
    this.dialog = el.querySelector(("." + (this.opts.dialogClass)));

    if (this.opts.content) {
        this.content(this.opts.content);
    }
};

RModal.prototype.open = function open (content) {
        var this$1 = this;

    this.content(content);

    if (!is(this.opts.beforeOpen, 'function')) {
        return this._doOpen();
    }

    this.opts.beforeOpen(function () {
        this$1._doOpen();
    });
};

RModal.prototype._doOpen = function _doOpen () {
    addClass(document.body, this.opts.bodyClass);

    removeClass(this.dialog, this.opts.dialogCloseClass);
    addClass(this.dialog, this.opts.dialogOpenClass);

    this.overlay.style.display = 'block';

    if (this.opts.focus) {
        this.focusOutElement = document.activeElement;
        this.focus();
    }

    if (is(this.opts.afterOpen, 'function')) {
        this.opts.afterOpen();
    }
    this.opened = true;
};

RModal.prototype.close = function close () {
        var this$1 = this;

    if (!is(this.opts.beforeClose, 'function')) {
        return this._doClose();
    }

    this.opts.beforeClose(function () {
        this$1._doClose();
    });
};

RModal.prototype._doClose = function _doClose () {
        var this$1 = this;

    removeClass(this.dialog, this.opts.dialogOpenClass);
    addClass(this.dialog, this.opts.dialogCloseClass);

    removeClass(document.body, this.opts.bodyClass);

    if (this.opts.focus) {
        this.focus(this.focusOutElement);
    }

    if (is(this.opts.afterClose, 'function')) {
        this.opts.afterClose();
    }

    this.opened = false;
    setTimeout(function () {
        this$1.overlay.style.display = 'none';
    }, this.opts.closeTimeout);
};

RModal.prototype.content = function content (html) {
    if (html === undefined) {
        return this.dialog.innerHTML;
    }

    this.dialog.innerHTML = html;
};

RModal.prototype.elements = function elements (selector, fallback) {
    fallback = fallback || window.navigator.appVersion.indexOf('MSIE 9.0') > -1;
    selector = is(selector, 'array') ? selector.join(',') : selector;

    return [].filter.call(
        this.dialog.querySelectorAll(selector)
        , function (element) {
            if (fallback) {
                var style = window.getComputedStyle(element);
                return style.display !== 'none' && style.visibility !== 'hidden';
            }

            return element.offsetParent !== null;
        }
    );
};

RModal.prototype.focus = function focus (el) {
    el = el || this.elements(this.opts.focusElements)[0] || this.dialog.firstChild;

    if (el && is(el.focus, 'function')) {
        el.focus();
    }
};

RModal.prototype.keydown = function keydown (ev) {
    if (this.opts.escapeClose && ev.which == 27) {
        this.close();
    }

    function stopEvent() {
        ev.preventDefault();
        ev.stopPropagation();
    }

    if (this.opened && ev.which == 9 && this.dialog.contains(ev.target)) {
        var elements = this.elements(this.opts.focusElements)
            , first = elements[0]
            , last = elements[elements.length - 1];

        if (first == last) {
            stopEvent();
        }
        else if (ev.target == first && ev.shiftKey) {
            stopEvent();
            last.focus();
        }
        else if (ev.target == last && !ev.shiftKey) {
            stopEvent();
            first.focus();
        }
    }
};

RModal.prototype.version = '1.0.29';
RModal.version = '1.0.29';

/* harmony default export */ __webpack_exports__["a"] = RModal;
//# sourceMappingURL=index.es.js.map


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */

(function sortableModule(factory) {
	"use strict";

	if (true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	else if (typeof module != "undefined" && typeof module.exports != "undefined") {
		module.exports = factory();
	}
	else {
		/* jshint sub:true */
		window["Sortable"] = factory();
	}
})(function sortableFactory() {
	"use strict";

	if (typeof window === "undefined" || !window.document) {
		return function sortableError() {
			throw new Error("Sortable.js requires a window with a document");
		};
	}

	var dragEl,
		parentEl,
		ghostEl,
		cloneEl,
		rootEl,
		nextEl,
		lastDownEl,

		scrollEl,
		scrollParentEl,
		scrollCustomFn,

		lastEl,
		lastCSS,
		lastParentCSS,

		oldIndex,
		newIndex,

		activeGroup,
		putSortable,

		autoScroll = {},

		tapEvt,
		touchEvt,

		moved,

		/** @const */
		R_SPACE = /\s+/g,
		R_FLOAT = /left|right|inline/,

		expando = 'Sortable' + (new Date).getTime(),

		win = window,
		document = win.document,
		parseInt = win.parseInt,
		setTimeout = win.setTimeout,

		$ = win.jQuery || win.Zepto,
		Polymer = win.Polymer,

		captureMode = false,
		passiveMode = false,

		supportDraggable = ('draggable' in document.createElement('div')),
		supportCssPointerEvents = (function (el) {
			// false when IE11
			if (!!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie)/i)) {
				return false;
			}
			el = document.createElement('x');
			el.style.cssText = 'pointer-events:auto';
			return el.style.pointerEvents === 'auto';
		})(),

		_silent = false,

		abs = Math.abs,
		min = Math.min,

		savedInputChecked = [],
		touchDragOverListeners = [],

		_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {
			// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
			if (rootEl && options.scroll) {
				var _this = rootEl[expando],
					el,
					rect,
					sens = options.scrollSensitivity,
					speed = options.scrollSpeed,

					x = evt.clientX,
					y = evt.clientY,

					winWidth = window.innerWidth,
					winHeight = window.innerHeight,

					vx,
					vy,

					scrollOffsetX,
					scrollOffsetY
				;

				// Delect scrollEl
				if (scrollParentEl !== rootEl) {
					scrollEl = options.scroll;
					scrollParentEl = rootEl;
					scrollCustomFn = options.scrollFn;

					if (scrollEl === true) {
						scrollEl = rootEl;

						do {
							if ((scrollEl.offsetWidth < scrollEl.scrollWidth) ||
								(scrollEl.offsetHeight < scrollEl.scrollHeight)
							) {
								break;
							}
							/* jshint boss:true */
						} while (scrollEl = scrollEl.parentNode);
					}
				}

				if (scrollEl) {
					el = scrollEl;
					rect = scrollEl.getBoundingClientRect();
					vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);
					vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);
				}


				if (!(vx || vy)) {
					vx = (winWidth - x <= sens) - (x <= sens);
					vy = (winHeight - y <= sens) - (y <= sens);

					/* jshint expr:true */
					(vx || vy) && (el = win);
				}


				if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {
					autoScroll.el = el;
					autoScroll.vx = vx;
					autoScroll.vy = vy;

					clearInterval(autoScroll.pid);

					if (el) {
						autoScroll.pid = setInterval(function () {
							scrollOffsetY = vy ? vy * speed : 0;
							scrollOffsetX = vx ? vx * speed : 0;

							if ('function' === typeof(scrollCustomFn)) {
								return scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt);
							}

							if (el === win) {
								win.scrollTo(win.pageXOffset + scrollOffsetX, win.pageYOffset + scrollOffsetY);
							} else {
								el.scrollTop += scrollOffsetY;
								el.scrollLeft += scrollOffsetX;
							}
						}, 24);
					}
				}
			}
		}, 30),

		_prepareGroup = function (options) {
			function toFn(value, pull) {
				if (value === void 0 || value === true) {
					value = group.name;
				}

				if (typeof value === 'function') {
					return value;
				} else {
					return function (to, from) {
						var fromGroup = from.options.group.name;

						return pull
							? value
							: value && (value.join
								? value.indexOf(fromGroup) > -1
								: (fromGroup == value)
							);
					};
				}
			}

			var group = {};
			var originalGroup = options.group;

			if (!originalGroup || typeof originalGroup != 'object') {
				originalGroup = {name: originalGroup};
			}

			group.name = originalGroup.name;
			group.checkPull = toFn(originalGroup.pull, true);
			group.checkPut = toFn(originalGroup.put);
			group.revertClone = originalGroup.revertClone;

			options.group = group;
		}
	;

	// Detect support a passive mode
	try {
		window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
			get: function () {
				// `false`, because everything starts to work incorrectly and instead of d'n'd,
				// begins the page has scrolled.
				passiveMode = false;
				captureMode = {
					capture: false,
					passive: passiveMode
				};
			}
		}));
	} catch (err) {}

	/**
	 * @class  Sortable
	 * @param  {HTMLElement}  el
	 * @param  {Object}       [options]
	 */
	function Sortable(el, options) {
		if (!(el && el.nodeType && el.nodeType === 1)) {
			throw 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);
		}

		this.el = el; // root element
		this.options = options = _extend({}, options);


		// Export instance
		el[expando] = this;

		// Default options
		var defaults = {
			group: Math.random(),
			sort: true,
			disabled: false,
			store: null,
			handle: null,
			scroll: true,
			scrollSensitivity: 30,
			scrollSpeed: 10,
			draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',
			ghostClass: 'sortable-ghost',
			chosenClass: 'sortable-chosen',
			dragClass: 'sortable-drag',
			ignore: 'a, img',
			filter: null,
			preventOnFilter: true,
			animation: 0,
			setData: function (dataTransfer, dragEl) {
				dataTransfer.setData('Text', dragEl.textContent);
			},
			dropBubble: false,
			dragoverBubble: false,
			dataIdAttr: 'data-id',
			delay: 0,
			forceFallback: false,
			fallbackClass: 'sortable-fallback',
			fallbackOnBody: false,
			fallbackTolerance: 0,
			fallbackOffset: {x: 0, y: 0},
			supportPointer: Sortable.supportPointer !== false
		};


		// Set default options
		for (var name in defaults) {
			!(name in options) && (options[name] = defaults[name]);
		}

		_prepareGroup(options);

		// Bind all private methods
		for (var fn in this) {
			if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
				this[fn] = this[fn].bind(this);
			}
		}

		// Setup drag mode
		this.nativeDraggable = options.forceFallback ? false : supportDraggable;

		// Bind events
		_on(el, 'mousedown', this._onTapStart);
		_on(el, 'touchstart', this._onTapStart);
		options.supportPointer && _on(el, 'pointerdown', this._onTapStart);

		if (this.nativeDraggable) {
			_on(el, 'dragover', this);
			_on(el, 'dragenter', this);
		}

		touchDragOverListeners.push(this._onDragOver);

		// Restore sorting
		options.store && this.sort(options.store.get(this));
	}


	Sortable.prototype = /** @lends Sortable.prototype */ {
		constructor: Sortable,

		_onTapStart: function (/** Event|TouchEvent */evt) {
			var _this = this,
				el = this.el,
				options = this.options,
				preventOnFilter = options.preventOnFilter,
				type = evt.type,
				touch = evt.touches && evt.touches[0],
				target = (touch || evt).target,
				originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0]) || target,
				filter = options.filter,
				startIndex;

			_saveInputCheckedState(el);


			// Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
			if (dragEl) {
				return;
			}

			if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
				return; // only left button or enabled
			}

			// cancel dnd if original target is content editable
			if (originalTarget.isContentEditable) {
				return;
			}

			target = _closest(target, options.draggable, el);

			if (!target) {
				return;
			}

			if (lastDownEl === target) {
				// Ignoring duplicate `down`
				return;
			}

			// Get the index of the dragged element within its parent
			startIndex = _index(target, options.draggable);

			// Check filter
			if (typeof filter === 'function') {
				if (filter.call(this, evt, target, this)) {
					_dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex);
					preventOnFilter && evt.preventDefault();
					return; // cancel dnd
				}
			}
			else if (filter) {
				filter = filter.split(',').some(function (criteria) {
					criteria = _closest(originalTarget, criteria.trim(), el);

					if (criteria) {
						_dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex);
						return true;
					}
				});

				if (filter) {
					preventOnFilter && evt.preventDefault();
					return; // cancel dnd
				}
			}

			if (options.handle && !_closest(originalTarget, options.handle, el)) {
				return;
			}

			// Prepare `dragstart`
			this._prepareDragStart(evt, touch, target, startIndex);
		},

		_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex) {
			var _this = this,
				el = _this.el,
				options = _this.options,
				ownerDocument = el.ownerDocument,
				dragStartFn;

			if (target && !dragEl && (target.parentNode === el)) {
				tapEvt = evt;

				rootEl = el;
				dragEl = target;
				parentEl = dragEl.parentNode;
				nextEl = dragEl.nextSibling;
				lastDownEl = target;
				activeGroup = options.group;
				oldIndex = startIndex;

				this._lastX = (touch || evt).clientX;
				this._lastY = (touch || evt).clientY;

				dragEl.style['will-change'] = 'all';

				dragStartFn = function () {
					// Delayed drag has been triggered
					// we can re-enable the events: touchmove/mousemove
					_this._disableDelayedDrag();

					// Make the element draggable
					dragEl.draggable = _this.nativeDraggable;

					// Chosen item
					_toggleClass(dragEl, options.chosenClass, true);

					// Bind the events: dragstart/dragend
					_this._triggerDragStart(evt, touch);

					// Drag start event
					_dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex);
				};

				// Disable "draggable"
				options.ignore.split(',').forEach(function (criteria) {
					_find(dragEl, criteria.trim(), _disableDraggable);
				});

				_on(ownerDocument, 'mouseup', _this._onDrop);
				_on(ownerDocument, 'touchend', _this._onDrop);
				_on(ownerDocument, 'touchcancel', _this._onDrop);
				_on(ownerDocument, 'selectstart', _this);
				options.supportPointer && _on(ownerDocument, 'pointercancel', _this._onDrop);

				if (options.delay) {
					// If the user moves the pointer or let go the click or touch
					// before the delay has been reached:
					// disable the delayed drag
					_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
					_on(ownerDocument, 'touchend', _this._disableDelayedDrag);
					_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
					_on(ownerDocument, 'mousemove', _this._disableDelayedDrag);
					_on(ownerDocument, 'touchmove', _this._disableDelayedDrag);
					options.supportPointer && _on(ownerDocument, 'pointermove', _this._disableDelayedDrag);

					_this._dragStartTimer = setTimeout(dragStartFn, options.delay);
				} else {
					dragStartFn();
				}


			}
		},

		_disableDelayedDrag: function () {
			var ownerDocument = this.el.ownerDocument;

			clearTimeout(this._dragStartTimer);
			_off(ownerDocument, 'mouseup', this._disableDelayedDrag);
			_off(ownerDocument, 'touchend', this._disableDelayedDrag);
			_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
			_off(ownerDocument, 'mousemove', this._disableDelayedDrag);
			_off(ownerDocument, 'touchmove', this._disableDelayedDrag);
			_off(ownerDocument, 'pointermove', this._disableDelayedDrag);
		},

		_triggerDragStart: function (/** Event */evt, /** Touch */touch) {
			touch = touch || (evt.pointerType == 'touch' ? evt : null);

			if (touch) {
				// Touch device support
				tapEvt = {
					target: dragEl,
					clientX: touch.clientX,
					clientY: touch.clientY
				};

				this._onDragStart(tapEvt, 'touch');
			}
			else if (!this.nativeDraggable) {
				this._onDragStart(tapEvt, true);
			}
			else {
				_on(dragEl, 'dragend', this);
				_on(rootEl, 'dragstart', this._onDragStart);
			}

			try {
				if (document.selection) {
					// Timeout neccessary for IE9
					_nextTick(function () {
						document.selection.empty();
					});
				} else {
					window.getSelection().removeAllRanges();
				}
			} catch (err) {
			}
		},

		_dragStarted: function () {
			if (rootEl && dragEl) {
				var options = this.options;

				// Apply effect
				_toggleClass(dragEl, options.ghostClass, true);
				_toggleClass(dragEl, options.dragClass, false);

				Sortable.active = this;

				// Drag start event
				_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex);
			} else {
				this._nulling();
			}
		},

		_emulateDragOver: function () {
			if (touchEvt) {
				if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {
					return;
				}

				this._lastX = touchEvt.clientX;
				this._lastY = touchEvt.clientY;

				if (!supportCssPointerEvents) {
					_css(ghostEl, 'display', 'none');
				}

				var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
				var parent = target;
				var i = touchDragOverListeners.length;

				if (target && target.shadowRoot) {
					target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
					parent = target;
				}

				if (parent) {
					do {
						if (parent[expando]) {
							while (i--) {
								touchDragOverListeners[i]({
									clientX: touchEvt.clientX,
									clientY: touchEvt.clientY,
									target: target,
									rootEl: parent
								});
							}

							break;
						}

						target = parent; // store last element
					}
					/* jshint boss:true */
					while (parent = parent.parentNode);
				}

				if (!supportCssPointerEvents) {
					_css(ghostEl, 'display', '');
				}
			}
		},


		_onTouchMove: function (/**TouchEvent*/evt) {
			if (tapEvt) {
				var	options = this.options,
					fallbackTolerance = options.fallbackTolerance,
					fallbackOffset = options.fallbackOffset,
					touch = evt.touches ? evt.touches[0] : evt,
					dx = (touch.clientX - tapEvt.clientX) + fallbackOffset.x,
					dy = (touch.clientY - tapEvt.clientY) + fallbackOffset.y,
					translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';

				// only set the status to dragging, when we are actually dragging
				if (!Sortable.active) {
					if (fallbackTolerance &&
						min(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance
					) {
						return;
					}

					this._dragStarted();
				}

				// as well as creating the ghost element on the document body
				this._appendGhost();

				moved = true;
				touchEvt = touch;

				_css(ghostEl, 'webkitTransform', translate3d);
				_css(ghostEl, 'mozTransform', translate3d);
				_css(ghostEl, 'msTransform', translate3d);
				_css(ghostEl, 'transform', translate3d);

				evt.preventDefault();
			}
		},

		_appendGhost: function () {
			if (!ghostEl) {
				var rect = dragEl.getBoundingClientRect(),
					css = _css(dragEl),
					options = this.options,
					ghostRect;

				ghostEl = dragEl.cloneNode(true);

				_toggleClass(ghostEl, options.ghostClass, false);
				_toggleClass(ghostEl, options.fallbackClass, true);
				_toggleClass(ghostEl, options.dragClass, true);

				_css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));
				_css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));
				_css(ghostEl, 'width', rect.width);
				_css(ghostEl, 'height', rect.height);
				_css(ghostEl, 'opacity', '0.8');
				_css(ghostEl, 'position', 'fixed');
				_css(ghostEl, 'zIndex', '100000');
				_css(ghostEl, 'pointerEvents', 'none');

				options.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);

				// Fixing dimensions.
				ghostRect = ghostEl.getBoundingClientRect();
				_css(ghostEl, 'width', rect.width * 2 - ghostRect.width);
				_css(ghostEl, 'height', rect.height * 2 - ghostRect.height);
			}
		},

		_onDragStart: function (/**Event*/evt, /**boolean*/useFallback) {
			var _this = this;
			var dataTransfer = evt.dataTransfer;
			var options = _this.options;

			_this._offUpEvents();

			if (activeGroup.checkPull(_this, _this, dragEl, evt)) {
				cloneEl = _clone(dragEl);

				cloneEl.draggable = false;
				cloneEl.style['will-change'] = '';

				_css(cloneEl, 'display', 'none');
				_toggleClass(cloneEl, _this.options.chosenClass, false);

				// #1143: IFrame support workaround
				_this._cloneId = _nextTick(function () {
					rootEl.insertBefore(cloneEl, dragEl);
					_dispatchEvent(_this, rootEl, 'clone', dragEl);
				});
			}

			_toggleClass(dragEl, options.dragClass, true);

			if (useFallback) {
				if (useFallback === 'touch') {
					// Bind touch events
					_on(document, 'touchmove', _this._onTouchMove);
					_on(document, 'touchend', _this._onDrop);
					_on(document, 'touchcancel', _this._onDrop);

					if (options.supportPointer) {
						_on(document, 'pointermove', _this._onTouchMove);
						_on(document, 'pointerup', _this._onDrop);
					}
				} else {
					// Old brwoser
					_on(document, 'mousemove', _this._onTouchMove);
					_on(document, 'mouseup', _this._onDrop);
				}

				_this._loopId = setInterval(_this._emulateDragOver, 50);
			}
			else {
				if (dataTransfer) {
					dataTransfer.effectAllowed = 'move';
					options.setData && options.setData.call(_this, dataTransfer, dragEl);
				}

				_on(document, 'drop', _this);

				// #1143: Бывает элемент с IFrame внутри блокирует `drop`,
				// поэтому если вызвался `mouseover`, значит надо отменять весь d'n'd.
				// Breaking Chrome 62+
				// _on(document, 'mouseover', _this);

				_this._dragStartId = _nextTick(_this._dragStarted);
			}
		},

		_onDragOver: function (/**Event*/evt) {
			var el = this.el,
				target,
				dragRect,
				targetRect,
				revert,
				options = this.options,
				group = options.group,
				activeSortable = Sortable.active,
				isOwner = (activeGroup === group),
				isMovingBetweenSortable = false,
				canSort = options.sort;

			if (evt.preventDefault !== void 0) {
				evt.preventDefault();
				!options.dragoverBubble && evt.stopPropagation();
			}

			if (dragEl.animated) {
				return;
			}

			moved = true;

			if (activeSortable && !options.disabled &&
				(isOwner
					? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
					: (
						putSortable === this ||
						(
							(activeSortable.lastPullMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&
							group.checkPut(this, activeSortable, dragEl, evt)
						)
					)
				) &&
				(evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback
			) {
				// Smart auto-scrolling
				_autoScroll(evt, options, this.el);

				if (_silent) {
					return;
				}

				target = _closest(evt.target, options.draggable, el);
				dragRect = dragEl.getBoundingClientRect();

				if (putSortable !== this) {
					putSortable = this;
					isMovingBetweenSortable = true;
				}

				if (revert) {
					_cloneHide(activeSortable, true);
					parentEl = rootEl; // actualization

					if (cloneEl || nextEl) {
						rootEl.insertBefore(dragEl, cloneEl || nextEl);
					}
					else if (!canSort) {
						rootEl.appendChild(dragEl);
					}

					return;
				}


				if ((el.children.length === 0) || (el.children[0] === ghostEl) ||
					(el === evt.target) && (_ghostIsLast(el, evt))
				) {
					//assign target only if condition is true
					if (el.children.length !== 0 && el.children[0] !== ghostEl && el === evt.target) {
						target = el.lastElementChild;
					}

					if (target) {
						if (target.animated) {
							return;
						}

						targetRect = target.getBoundingClientRect();
					}

					_cloneHide(activeSortable, isOwner);

					if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt) !== false) {
						if (!dragEl.contains(el)) {
							el.appendChild(dragEl);
							parentEl = el; // actualization
						}

						this._animate(dragRect, dragEl);
						target && this._animate(targetRect, target);
					}
				}
				else if (target && !target.animated && target !== dragEl && (target.parentNode[expando] !== void 0)) {
					if (lastEl !== target) {
						lastEl = target;
						lastCSS = _css(target);
						lastParentCSS = _css(target.parentNode);
					}

					targetRect = target.getBoundingClientRect();

					var width = targetRect.right - targetRect.left,
						height = targetRect.bottom - targetRect.top,
						floating = R_FLOAT.test(lastCSS.cssFloat + lastCSS.display)
							|| (lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0),
						isWide = (target.offsetWidth > dragEl.offsetWidth),
						isLong = (target.offsetHeight > dragEl.offsetHeight),
						halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,
						nextSibling = target.nextElementSibling,
						after = false
					;

					if (floating) {
						var elTop = dragEl.offsetTop,
							tgTop = target.offsetTop;

						if (elTop === tgTop) {
							after = (target.previousElementSibling === dragEl) && !isWide || halfway && isWide;
						}
						else if (target.previousElementSibling === dragEl || dragEl.previousElementSibling === target) {
							after = (evt.clientY - targetRect.top) / height > 0.5;
						} else {
							after = tgTop > elTop;
						}
						} else if (!isMovingBetweenSortable) {
						after = (nextSibling !== dragEl) && !isLong || halfway && isLong;
					}

					var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

					if (moveVector !== false) {
						if (moveVector === 1 || moveVector === -1) {
							after = (moveVector === 1);
						}

						_silent = true;
						setTimeout(_unsilent, 30);

						_cloneHide(activeSortable, isOwner);

						if (!dragEl.contains(el)) {
							if (after && !nextSibling) {
								el.appendChild(dragEl);
							} else {
								target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
							}
						}

						parentEl = dragEl.parentNode; // actualization

						this._animate(dragRect, dragEl);
						this._animate(targetRect, target);
					}
				}
			}
		},

		_animate: function (prevRect, target) {
			var ms = this.options.animation;

			if (ms) {
				var currentRect = target.getBoundingClientRect();

				if (prevRect.nodeType === 1) {
					prevRect = prevRect.getBoundingClientRect();
				}

				_css(target, 'transition', 'none');
				_css(target, 'transform', 'translate3d('
					+ (prevRect.left - currentRect.left) + 'px,'
					+ (prevRect.top - currentRect.top) + 'px,0)'
				);

				target.offsetWidth; // repaint

				_css(target, 'transition', 'all ' + ms + 'ms');
				_css(target, 'transform', 'translate3d(0,0,0)');

				clearTimeout(target.animated);
				target.animated = setTimeout(function () {
					_css(target, 'transition', '');
					_css(target, 'transform', '');
					target.animated = false;
				}, ms);
			}
		},

		_offUpEvents: function () {
			var ownerDocument = this.el.ownerDocument;

			_off(document, 'touchmove', this._onTouchMove);
			_off(document, 'pointermove', this._onTouchMove);
			_off(ownerDocument, 'mouseup', this._onDrop);
			_off(ownerDocument, 'touchend', this._onDrop);
			_off(ownerDocument, 'pointerup', this._onDrop);
			_off(ownerDocument, 'touchcancel', this._onDrop);
			_off(ownerDocument, 'pointercancel', this._onDrop);
			_off(ownerDocument, 'selectstart', this);
		},

		_onDrop: function (/**Event*/evt) {
			var el = this.el,
				options = this.options;

			clearInterval(this._loopId);
			clearInterval(autoScroll.pid);
			clearTimeout(this._dragStartTimer);

			_cancelNextTick(this._cloneId);
			_cancelNextTick(this._dragStartId);

			// Unbind events
			_off(document, 'mouseover', this);
			_off(document, 'mousemove', this._onTouchMove);

			if (this.nativeDraggable) {
				_off(document, 'drop', this);
				_off(el, 'dragstart', this._onDragStart);
			}

			this._offUpEvents();

			if (evt) {
				if (moved) {
					evt.preventDefault();
					!options.dropBubble && evt.stopPropagation();
				}

				ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

				if (rootEl === parentEl || Sortable.active.lastPullMode !== 'clone') {
					// Remove clone
					cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
				}

				if (dragEl) {
					if (this.nativeDraggable) {
						_off(dragEl, 'dragend', this);
					}

					_disableDraggable(dragEl);
					dragEl.style['will-change'] = '';

					// Remove class's
					_toggleClass(dragEl, this.options.ghostClass, false);
					_toggleClass(dragEl, this.options.chosenClass, false);

					// Drag stop event
					_dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex);

					if (rootEl !== parentEl) {
						newIndex = _index(dragEl, options.draggable);

						if (newIndex >= 0) {
							// Add event
							_dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex);

							// Remove event
							_dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex);

							// drag from one list and drop into another
							_dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex);
							_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex);
						}
					}
					else {
						if (dragEl.nextSibling !== nextEl) {
							// Get the index of the dragged element within its parent
							newIndex = _index(dragEl, options.draggable);

							if (newIndex >= 0) {
								// drag & drop within the same list
								_dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex);
								_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex);
							}
						}
					}

					if (Sortable.active) {
						/* jshint eqnull:true */
						if (newIndex == null || newIndex === -1) {
							newIndex = oldIndex;
						}

						_dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex);

						// Save sorting
						this.save();
					}
				}

			}

			this._nulling();
		},

		_nulling: function() {
			rootEl =
			dragEl =
			parentEl =
			ghostEl =
			nextEl =
			cloneEl =
			lastDownEl =

			scrollEl =
			scrollParentEl =

			tapEvt =
			touchEvt =

			moved =
			newIndex =

			lastEl =
			lastCSS =

			putSortable =
			activeGroup =
			Sortable.active = null;

			savedInputChecked.forEach(function (el) {
				el.checked = true;
			});
			savedInputChecked.length = 0;
		},

		handleEvent: function (/**Event*/evt) {
			switch (evt.type) {
				case 'drop':
				case 'dragend':
					this._onDrop(evt);
					break;

				case 'dragover':
				case 'dragenter':
					if (dragEl) {
						this._onDragOver(evt);
						_globalDragOver(evt);
					}
					break;

				case 'mouseover':
					this._onDrop(evt);
					break;

				case 'selectstart':
					evt.preventDefault();
					break;
			}
		},


		/**
		 * Serializes the item into an array of string.
		 * @returns {String[]}
		 */
		toArray: function () {
			var order = [],
				el,
				children = this.el.children,
				i = 0,
				n = children.length,
				options = this.options;

			for (; i < n; i++) {
				el = children[i];
				if (_closest(el, options.draggable, this.el)) {
					order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
				}
			}

			return order;
		},


		/**
		 * Sorts the elements according to the array.
		 * @param  {String[]}  order  order of the items
		 */
		sort: function (order) {
			var items = {}, rootEl = this.el;

			this.toArray().forEach(function (id, i) {
				var el = rootEl.children[i];

				if (_closest(el, this.options.draggable, rootEl)) {
					items[id] = el;
				}
			}, this);

			order.forEach(function (id) {
				if (items[id]) {
					rootEl.removeChild(items[id]);
					rootEl.appendChild(items[id]);
				}
			});
		},


		/**
		 * Save the current sorting
		 */
		save: function () {
			var store = this.options.store;
			store && store.set(this);
		},


		/**
		 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
		 * @param   {HTMLElement}  el
		 * @param   {String}       [selector]  default: `options.draggable`
		 * @returns {HTMLElement|null}
		 */
		closest: function (el, selector) {
			return _closest(el, selector || this.options.draggable, this.el);
		},


		/**
		 * Set/get option
		 * @param   {string} name
		 * @param   {*}      [value]
		 * @returns {*}
		 */
		option: function (name, value) {
			var options = this.options;

			if (value === void 0) {
				return options[name];
			} else {
				options[name] = value;

				if (name === 'group') {
					_prepareGroup(options);
				}
			}
		},


		/**
		 * Destroy
		 */
		destroy: function () {
			var el = this.el;

			el[expando] = null;

			_off(el, 'mousedown', this._onTapStart);
			_off(el, 'touchstart', this._onTapStart);
			_off(el, 'pointerdown', this._onTapStart);

			if (this.nativeDraggable) {
				_off(el, 'dragover', this);
				_off(el, 'dragenter', this);
			}

			// Remove draggable attributes
			Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
				el.removeAttribute('draggable');
			});

			touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);

			this._onDrop();

			this.el = el = null;
		}
	};


	function _cloneHide(sortable, state) {
		if (sortable.lastPullMode !== 'clone') {
			state = true;
		}

		if (cloneEl && (cloneEl.state !== state)) {
			_css(cloneEl, 'display', state ? 'none' : '');

			if (!state) {
				if (cloneEl.state) {
					if (sortable.options.group.revertClone) {
						rootEl.insertBefore(cloneEl, nextEl);
						sortable._animate(dragEl, cloneEl);
					} else {
						rootEl.insertBefore(cloneEl, dragEl);
					}
				}
			}

			cloneEl.state = state;
		}
	}


	function _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {
		if (el) {
			ctx = ctx || document;

			do {
				if ((selector === '>*' && el.parentNode === ctx) || _matches(el, selector)) {
					return el;
				}
				/* jshint boss:true */
			} while (el = _getParentOrHost(el));
		}

		return null;
	}


	function _getParentOrHost(el) {
		var parent = el.host;

		return (parent && parent.nodeType) ? parent : el.parentNode;
	}


	function _globalDragOver(/**Event*/evt) {
		if (evt.dataTransfer) {
			evt.dataTransfer.dropEffect = 'move';
		}
		evt.preventDefault();
	}


	function _on(el, event, fn) {
		el.addEventListener(event, fn, captureMode);
	}


	function _off(el, event, fn) {
		el.removeEventListener(event, fn, captureMode);
	}


	function _toggleClass(el, name, state) {
		if (el) {
			if (el.classList) {
				el.classList[state ? 'add' : 'remove'](name);
			}
			else {
				var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
				el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
			}
		}
	}


	function _css(el, prop, val) {
		var style = el && el.style;

		if (style) {
			if (val === void 0) {
				if (document.defaultView && document.defaultView.getComputedStyle) {
					val = document.defaultView.getComputedStyle(el, '');
				}
				else if (el.currentStyle) {
					val = el.currentStyle;
				}

				return prop === void 0 ? val : val[prop];
			}
			else {
				if (!(prop in style)) {
					prop = '-webkit-' + prop;
				}

				style[prop] = val + (typeof val === 'string' ? '' : 'px');
			}
		}
	}


	function _find(ctx, tagName, iterator) {
		if (ctx) {
			var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;

			if (iterator) {
				for (; i < n; i++) {
					iterator(list[i], i);
				}
			}

			return list;
		}

		return [];
	}



	function _dispatchEvent(sortable, rootEl, name, targetEl, toEl, fromEl, startIndex, newIndex) {
		sortable = (sortable || rootEl[expando]);

		var evt = document.createEvent('Event'),
			options = sortable.options,
			onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);

		evt.initEvent(name, true, true);

		evt.to = toEl || rootEl;
		evt.from = fromEl || rootEl;
		evt.item = targetEl || rootEl;
		evt.clone = cloneEl;

		evt.oldIndex = startIndex;
		evt.newIndex = newIndex;

		rootEl.dispatchEvent(evt);

		if (options[onName]) {
			options[onName].call(sortable, evt);
		}
	}


	function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {
		var evt,
			sortable = fromEl[expando],
			onMoveFn = sortable.options.onMove,
			retVal;

		evt = document.createEvent('Event');
		evt.initEvent('move', true, true);

		evt.to = toEl;
		evt.from = fromEl;
		evt.dragged = dragEl;
		evt.draggedRect = dragRect;
		evt.related = targetEl || toEl;
		evt.relatedRect = targetRect || toEl.getBoundingClientRect();
		evt.willInsertAfter = willInsertAfter;

		fromEl.dispatchEvent(evt);

		if (onMoveFn) {
			retVal = onMoveFn.call(sortable, evt, originalEvt);
		}

		return retVal;
	}


	function _disableDraggable(el) {
		el.draggable = false;
	}


	function _unsilent() {
		_silent = false;
	}


	/** @returns {HTMLElement|false} */
	function _ghostIsLast(el, evt) {
		var lastEl = el.lastElementChild,
			rect = lastEl.getBoundingClientRect();

		// 5 — min delta
		// abs — нельзя добавлять, а то глюки при наведении сверху
		return (evt.clientY - (rect.top + rect.height) > 5) ||
			(evt.clientX - (rect.left + rect.width) > 5);
	}


	/**
	 * Generate id
	 * @param   {HTMLElement} el
	 * @returns {String}
	 * @private
	 */
	function _generateId(el) {
		var str = el.tagName + el.className + el.src + el.href + el.textContent,
			i = str.length,
			sum = 0;

		while (i--) {
			sum += str.charCodeAt(i);
		}

		return sum.toString(36);
	}

	/**
	 * Returns the index of an element within its parent for a selected set of
	 * elements
	 * @param  {HTMLElement} el
	 * @param  {selector} selector
	 * @return {number}
	 */
	function _index(el, selector) {
		var index = 0;

		if (!el || !el.parentNode) {
			return -1;
		}

		while (el && (el = el.previousElementSibling)) {
			if ((el.nodeName.toUpperCase() !== 'TEMPLATE') && (selector === '>*' || _matches(el, selector))) {
				index++;
			}
		}

		return index;
	}

	function _matches(/**HTMLElement*/el, /**String*/selector) {
		if (el) {
			selector = selector.split('.');

			var tag = selector.shift().toUpperCase(),
				re = new RegExp('\\s(' + selector.join('|') + ')(?=\\s)', 'g');

			return (
				(tag === '' || el.nodeName.toUpperCase() == tag) &&
				(!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length)
			);
		}

		return false;
	}

	function _throttle(callback, ms) {
		var args, _this;

		return function () {
			if (args === void 0) {
				args = arguments;
				_this = this;

				setTimeout(function () {
					if (args.length === 1) {
						callback.call(_this, args[0]);
					} else {
						callback.apply(_this, args);
					}

					args = void 0;
				}, ms);
			}
		};
	}

	function _extend(dst, src) {
		if (dst && src) {
			for (var key in src) {
				if (src.hasOwnProperty(key)) {
					dst[key] = src[key];
				}
			}
		}

		return dst;
	}

	function _clone(el) {
		if (Polymer && Polymer.dom) {
			return Polymer.dom(el).cloneNode(true);
		}
		else if ($) {
			return $(el).clone(true)[0];
		}
		else {
			return el.cloneNode(true);
		}
	}

	function _saveInputCheckedState(root) {
		var inputs = root.getElementsByTagName('input');
		var idx = inputs.length;

		while (idx--) {
			var el = inputs[idx];
			el.checked && savedInputChecked.push(el);
		}
	}

	function _nextTick(fn) {
		return setTimeout(fn, 0);
	}

	function _cancelNextTick(id) {
		return clearTimeout(id);
	}

	// Fixed #973:
	_on(document, 'touchmove', function (evt) {
		if (Sortable.active) {
			evt.preventDefault();
		}
	});

	// Export utils
	Sortable.utils = {
		on: _on,
		off: _off,
		css: _css,
		find: _find,
		is: function (el, selector) {
			return !!_closest(el, selector, el);
		},
		extend: _extend,
		throttle: _throttle,
		closest: _closest,
		toggleClass: _toggleClass,
		clone: _clone,
		index: _index,
		nextTick: _nextTick,
		cancelNextTick: _cancelNextTick
	};


	/**
	 * Create sortable instance
	 * @param {HTMLElement}  el
	 * @param {Object}      [options]
	 */
	Sortable.create = function (el, options) {
		return new Sortable(el, options);
	};


	// Export
	Sortable.version = '1.7.0';
	return Sortable;
});


/***/ }),
/* 31 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 33 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 34 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 35 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__surveyjsObjects__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sortablejs__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_sortablejs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_sortablejs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__title_editor__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_utils__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__item_editor_scss__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__item_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__item_editor_scss__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return itemAdorner; });
/* unused harmony export itemDraggableAdorner */









var templateHtml = __webpack_require__(95);
var ItemInplaceEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ItemInplaceEditor, _super);
    function ItemInplaceEditor(name, question, item, rootElement) {
        var _this = _super.call(this, name, rootElement) || this;
        _this.question = question;
        _this.item = item;
        return _this;
    }
    ItemInplaceEditor.prototype.deleteItem = function (model, event) {
        if (this.notOther) {
            var index = model.question.choices.indexOf(model.item);
            model.question.choices.splice(index, 1);
            var item = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_utils__["a" /* findParentNode */])("item_draggable", this.rootElement);
            item.parentElement.removeChild(item);
        }
        else {
            this.question.hasOther = false;
        }
    };
    Object.defineProperty(ItemInplaceEditor.prototype, "notOther", {
        get: function () {
            return this.question.otherItem !== this.item;
        },
        enumerable: true,
        configurable: true
    });
    return ItemInplaceEditor;
}(__WEBPACK_IMPORTED_MODULE_6__title_editor__["b" /* TitleInplaceEditor */]));
__WEBPACK_IMPORTED_MODULE_1_knockout__["components"].register("item-editor", {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var model = new ItemInplaceEditor(params.target[params.name], params.question, params.item, componentInfo.element);
            model.valueChanged = function (newValue) { return (params.target[params.name] = newValue); };
            return model;
        }
    },
    template: templateHtml
});
var itemAdorner = {
    getMarkerClass: function (model) {
        return !!model.choices ? "item_editable" : "";
    },
    afterRender: function (elements, model) {
        for (var i = 0; i < elements.length; i++) {
            elements[i].onclick = function (e) { return e.preventDefault(); };
            var decoration = document.createElement("span");
            if (i === elements.length - 1 && model.hasOther) {
                decoration.innerHTML =
                    "<item-editor params='name: \"otherText\", target: target, item: item, question: question'></item-editor>";
                elements[i].appendChild(decoration);
                __WEBPACK_IMPORTED_MODULE_1_knockout__["applyBindings"]({ item: model.otherItem, question: model, target: model }, decoration);
            }
            else {
                decoration.innerHTML =
                    "<item-editor params='name: \"text\", target: target, item: item, question: question'></item-editor>";
                elements[i].appendChild(decoration);
                __WEBPACK_IMPORTED_MODULE_1_knockout__["applyBindings"]({ item: model.choices[i], question: model, target: model.choices[i] }, decoration);
            }
        }
    }
};
__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__surveyjsObjects__["b" /* registerAdorner */])("controlLabel", itemAdorner);
var itemDraggableAdorner = {
    getMarkerClass: function (model) {
        return !!model.choices ? "item_draggable" : "";
    },
    afterRender: function (elements, model, editor) {
        var itemsRoot = elements[0].parentElement;
        if (model.hasOther) {
            elements[elements.length - 1].classList.remove("item_draggable");
        }
        var sortable = __WEBPACK_IMPORTED_MODULE_5_sortablejs___default.a.create(itemsRoot, {
            handle: ".svda-drag-handle",
            draggable: ".item_draggable",
            animation: 150,
            onEnd: function (evt) {
                var choices = model.choices;
                var choice = choices[evt.oldIndex];
                choices.splice(evt.oldIndex, 1);
                choices.splice(evt.newIndex, 0, choice);
            }
        });
        var addNew = document.createElement("div");
        addNew.innerText = __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.addItem");
        addNew.className = "svda-add-new-item";
        addNew.onclick = function () {
            var nextValue = null;
            var values = model.choices.map(function (item) {
                return item.itemValue;
            });
            nextValue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_utils__["b" /* getNextValue */])("item", values);
            var itemValue = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ItemValue"](nextValue);
            itemValue.locOwner = {
                getLocale: function () {
                    if (!!model["getLocale"])
                        return model.getLocale();
                    return "";
                },
                getMarkdownHtml: function (text) {
                    return text;
                }
            };
            model.choices = model.choices.concat([itemValue]);
            editor.onQuestionEditorChanged(model);
        };
        itemsRoot.appendChild(addNew);
    }
};
__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__surveyjsObjects__["b" /* registerAdorner */])("item", itemDraggableAdorner);


/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__question_actions_scss__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__question_actions_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__question_actions_scss__);
/* unused harmony export QuestionActionsAdorner */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return questionActionsAdorner; });



var templateHtml = __webpack_require__(96);
var QuestionActionsAdorner = (function () {
    function QuestionActionsAdorner(question) {
        this.question = question;
    }
    Object.defineProperty(QuestionActionsAdorner.prototype, "type", {
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_1__editorLocalization__["a" /* editorLocalization */].getString("qt." + this.question.getType());
        },
        enumerable: true,
        configurable: true
    });
    return QuestionActionsAdorner;
}());

__WEBPACK_IMPORTED_MODULE_0_knockout__["components"].register("question-actions", {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var model = new QuestionActionsAdorner(params.question);
            return model;
        }
    },
    template: templateHtml
});
var questionActionsAdorner = {
    getMarkerClass: function (model) {
        return "question_actions";
    },
    afterRender: function (elements, model) {
        var decoration = document.createElement("div");
        decoration.className = "svda-question-actions";
        decoration.innerHTML =
            "<question-actions params='question: $data'></question-actions>";
        elements[0].appendChild(decoration);
        __WEBPACK_IMPORTED_MODULE_0_knockout__["applyBindings"](model, decoration);
    }
};
//registerAdorner("mainRoot", questionActionsAdorner);


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__objectEditor__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pagesEditor__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__surveylive__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__surveyEmbedingWindow__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__surveyObjects__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__questionconverter__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__questionEditors_questionEditor__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__surveyJSONEditor__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__textWorker__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__undoredo__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__surveyHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__dragdrophelper__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__questionToolbox__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__json5__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__surveyjsObjects__ = __webpack_require__(11);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyEditor; });
















var templateEditorHtml = __webpack_require__(98);


/**
 * Survey Editor is WYSIWYG editor.
 */
var SurveyEditor = (function () {
    /**
     * The Survey Editor constructor.
     * @param renderedElement HtmlElement or html element id where Survey Editor will be rendered
     * @param options Survey Editor options. The following options are available: showJSONEditorTab, showTestSurveyTab, showEmbededSurveyTab, showPropertyGrid, questionTypes, showOptions, generateValidJSON, isAutoSave, designerHeight.
     */
    function SurveyEditor(renderedElement, options) {
        if (renderedElement === void 0) { renderedElement = null; }
        if (options === void 0) { options = null; }
        var _this = this;
        this._haveCommercialLicense = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.surveyValue = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.stateValue = "";
        this.dragDropHelper = null;
        this.select2 = null;
        this.alwaySaveTextInPropertyEditorsValue = false;
        this.showApplyButtonValue = true;
        this.isRTLValue = false;
        /**
         * This property is assign to the survey.surveyId property on showing in the "Embed Survey" tab.
         * @see showEmbededSurveyTab
         */
        this.surveyId = null;
        /**
         * This property is assign to the survey.surveyPostId property on showing in the "Embed Survey" tab.
         * @see showEmbededSurveyTab
         */
        this.surveyPostId = null;
        /**
         * The event is called before showing a property in the Property Grid or in Question Editor.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj the survey object, Survey, Page, Panel or Question
         * <br/> options.property the object property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties.
         * <br/> options.canShow a boolean value. It is true by default. Set it false to hide the property from the Property Grid or in Question Editor
         */
        this.onCanShowProperty = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event allows you to custom sort properties in the Property Grid. It is a compare function. You should set options.result to -1 or 1 by comparing options.property1 and options.property2.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj the survey object, Survey, Page, Panel or Question
         * <br/> options.property1 the left object property (Survey.JsonObjectProperty object).
         * <br/> options.property2 the right object property (Survey.JsonObjectProperty object).
         * <br/> options.result the result of comparing. It can be 0 (use default behavior),  -1 options.property1 is less than options.property2 or 1 options.property1 is more than options.property2
         */
        this.onCustomSortProperty = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event allows you modify DOM element for a property in the Property Grid. For example, you may change it's styles.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj the survey object, Survey, Page, Panel or Question
         * <br/> options.htmlElement the html element (html table row in our case) that renders the property display name and it's editor.
         * <br/> options.property object property (Survey.JsonObjectProperty object).
         * <br/> options.propertyEditor the property Editor.
         */
        this.onPropertyAfterRender = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is called on deleting an element (question/panel/page) from the survey. Typically, when a user click the delete from the element menu.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.element an instance of the deleting element
         * <br/> options.elementType the type of the element: 'question', 'panel' or 'page'.
         * <br/> options.allowing set it to false to cancel the element deleting
         */
        this.onElementDeleting = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is called on adding a new question into the survey. Typically, when a user dropped a Question from the Question Toolbox into designer Survey area.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.question a new added survey question. Survey.QuestionBase object
         * <br/> options.page the survey Page object where question has been added.
         */
        this.onQuestionAdded = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is called when an end-user double click on an element (question/panel).
         * <br/> sender the survey editor object that fires the event
         * <br/> options.element an instance of the element
         */
        this.onElementDoubleClick = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is called on adding a new Survey.ItemValue object. It uses as an element in choices array in Radiogroup, checkbox and dropdown questions or Matrix columns and rows properties.
         * Use this event, to set ItemValue.value and ItemValue.text properties by default or set a value to the custom property.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.property  the object property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties.
         * <br/> options.newItem a new created Survey.ItemValue object.
         */
        this.onItemValueAdded = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is called when a user adds a new column into MatrixDropdown or MatrixDynamic questions. Use it to set some properties of Survey.MatrixDropdownColumn by default, for example name or a custom property.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.newColumn a new created Survey.MatrixDropdownColumn object.
         */
        this.onMatrixColumnAdded = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is called on adding a new panel into the survey.  Typically, when a user dropped a Panel from the Question Toolbox into designer Survey area.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.panel a new added survey panel. Survey.Panel object
         * <br/> options.page the survey Page object where question has been added.
         */
        this.onPanelAdded = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is called on adding a new page into the survey.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.page the new survey Page object.
         */
        this.onPageAdded = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is called when a survey is changed in the designer. A new page/question/page is added or existing is removed, a property is changed and so on.
         * <br/> sender the survey editor object that fires the event
         * <br/> options object contains the information about certain modifications
         * <br/> options.type contains string constant describing certain modification
         * <br/> Available values:
         * <br/>
         * <br/> options.type: "ADDED_FROM_TOOLBOX"
         * <br/> options.question: newly added question
         * <br/>
         * <br/> options.type: "PAGE_ADDED"
         * <br/> options.newValue: newly created page
         * <br/>
         * <br/> options.type: "PAGE_MOVED"
         * <br/> options.page: page has been moved
         * <br/> options.indexFrom: pevious index
         * <br/> options.indexTo: new index
         * <br/>
         * <br/> options.type: "QUESTION_CONVERTED"
         * <br/> options.className: the converted class name
         * <br/> options.oldValue: pevious object
         * <br/> options.newValue: the new object, converted from oldVale to the given class name
         * <br/>
         * <br/> options.type: "QUESTION_CHANGED_BY_EDITOR"
         * <br/> options.question: question has been edited in the popup question editor
         * <br/>
         * <br/> options.type: "PROPERTY_CHANGED"
         * <br/> options.name: the name of the property has been changed
         * <br/> options.target: the object containing the changed property
         * <br/> options.oldValue: the previous value of the changed property
         * <br/> options.newValue: the new value of the changed property
         * <br/>
         * <br/> options.type: "OBJECT_DELETED"
         * <br/> options.target: deleted object
         * <br/>
         * <br/> options.type: "VIEW_TYPE_CHANGED"
         * <br/> options.newType: new type of the editor view: editor or designer
         * <br/>
         * <br/> options.type: "DO_DROP"
         * <br/> options.page: the page of the drap/drop operation
         * <br/> options.source: the source dragged object
         * <br/> options.target: the drop target
         * <br/> options.newElement: a new element. It is defined if a user drops question or panel from the toolbox
         */
        this.onModified = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is fired when the Survey Editor is initialized and a survey object (Survey.Survey) is created.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.survey  the survey object showing in the editor.
         */
        this.onDesignerSurveyCreated = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * The event is fired when the Survey Editor runs the survey in the test mode.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.survey  the survey object showing in the "Test survey" tab.
         */
        this.onTestSurveyCreated = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * Use this event to control Property Editors UI.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj  the survey object which property is edited in the Property Editor.
         * <br/> options.propertyName  the name of the edited property.
         * <br/> options.editorOptions  options that can be changed.
         * <br/> options.editorOptions.allowAddRemoveItems a boolean property, true by default. Set it false to disable add/remove items in array properties. For example 'choices', 'columns', 'rows'.
         * <br/> options.editorOptions.showTextView a boolean property, true by default. Set it false to disable "Fast Entry" tab for "choices" property.
         */
        this.onSetPropertyEditorOptions = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * Use this event to show a custom error in the Question Editor on pressing Apply or OK buttons, if the values are not set correctly. The error will be displayed under the property editor.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj  the survey object which property is edited in the Property Editor.
         * <br/> options.propertyName  the name of the edited property.
         * <br/> options.value the property value.
         * <br/> options.error the error you want to display. Set the empty string (the default value) or null if there is no errors.
         * @see onPropertyValueChanging
         */
        this.onPropertyValidationCustomError = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * Use this event to change the value entered in the property editor. You may call a validation, so an end user sees the error immediately
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj  the survey object which property is edited in the Property Editor.
         * <br/> options.propertyName  the name of the edited property.
         * <br/> options.value the property value.
         * <br/> options.newValue set the corrected value into this property. Leave it null if you are ok with the entered value.
         * <br/> options.doValidation set the value to true to call the property validation. If there is an error, the user sees it immediately.
         * @see onPropertyValidationCustomError
         */
        this.onPropertyValueChanging = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * Use this event to change the value entered in the property editor. You may call a validation, so an end user sees the error immediately
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj  the survey object which property is edited in the Property Editor.
         * <br/> options.propertyName  the name of the edited property.
         * <br/> options.editor the instance of Property Editor.
         * @see onPropertyValueChanging
         */
        this.onPropertyEditorObjectAssign = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * Use this event to disable some operations for an element (question/panel).
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj  the survey object question/panel
         * <br/> options.allowDelete set it to false to disable deleting the object
         * <br/> options.allowEdit set it to false to disable calling the modal Editor
         * <br/> options.allowCopy set it to false to disable copying the object
         * <br/> options.allowAddToToolbox set it to false to disable adding element to Toolbox
         * <br/> options.allowDragging set it to false to disable adding element to Toolbox
         * <br/> options.allowChangeType set it to false to disable changing element type
         */
        this.onElementAllowOperations = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * Use this event to add/remove/modify the element (question/panel) menu items.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj  the survey object which property is edited in the Property Editor.
         * <br/> options.items the list of menu items. It has two requried fields: text and onClick: function(obj: Survey.Base) {} and optional name field.
         * @see onElementAllowOperations
         */
        this.onDefineElementMenuItems = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        /**
         * Use this event to show the description on the top or/and bottom of the property modal editor.
         * <br/> sender the survey editor object that fires the event
         * <br/> options.obj  the survey object which property is edited in the Property Editor.
         * <br/> options.propertyName the property name
         * <br/> options.htmlTop the html  that you want to see on the top of the modal window
         * <br/> options.htmlBottom the html that you want to see on the bottom of the modal window
         */
        this.onShowPropertyModalEditorDescription = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Event"]();
        this.koAutoSave = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.koShowState = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.koState = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
        /**
         * The list of toolbar items. You may add/remove/replace them.
         * @see IToolbarItem
         */
        this.toolbarItems = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
        this.saveNo = 0;
        this.newQuestions = [];
        this.newPanels = [];
        this.isCurrentPageEmpty = __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () {
            return !!_this.surveyValue() &&
                !!_this.surveyValue().koCurrentPage() &&
                _this.surveyValue()
                    .koCurrentPage()
                    .koRows().length === 0;
        });
        this.koShowOptions = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.koGenerateValidJSON = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](true);
        this.koShowPropertyGrid = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](true);
        this.koDesignerHeight = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.koShowPagesToolbox = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](true);
        this.setOptions(options);
        this.koCanDeleteObject = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        var self = this;
        this.koShowSaveButton = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"](false);
        this.koTestSurveyWidth = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("100%");
        this.saveButtonClick = function () {
            self.doSave();
        };
        this.koObjects = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
        this.koSelectedObject = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]();
        this.koSelectedObject.subscribe(function (newValue) {
            self.selectedObjectChanged(newValue != null ? newValue.value : null);
        });
        this.koGenerateValidJSON.subscribe(function (newValue) {
            if (!self.options)
                self.options = {};
            self.options.generateValidJSON = newValue;
            if (self.generateValidJSONChangedCallback)
                self.generateValidJSONChangedCallback(newValue);
        });
        this.surveyObjects = new __WEBPACK_IMPORTED_MODULE_6__surveyObjects__["a" /* SurveyObjects */](this.koObjects, this.koSelectedObject);
        this.undoRedo = new __WEBPACK_IMPORTED_MODULE_11__undoredo__["a" /* SurveyUndoRedo */]();
        this.selectedObjectEditorValue = new __WEBPACK_IMPORTED_MODULE_2__objectEditor__["a" /* SurveyObjectEditor */](this);
        this.selectedObjectEditorValue.onCanShowPropertyCallback = function (object, property) {
            return self.onCanShowObjectProperty(object, property);
        };
        this.selectedObjectEditorValue.onSortPropertyCallback = function (obj, property1, property2) {
            return self.onCustomSortPropertyObjectProperty(obj, property1, property2);
        };
        this.selectedObjectEditorValue.onPropertyValueChanged.add(function (sender, options) {
            self.onPropertyValueChanged(options.property, options.object, options.newValue);
        });
        this.selectedObjectEditorValue.onAfterRenderCallback = function (obj, htmlElement, prop) {
            if (self.onPropertyAfterRender.isEmpty)
                return;
            var options = {
                obj: obj,
                htmlElement: htmlElement,
                property: prop.property,
                propertyEditor: prop.editor
            };
            self.onPropertyAfterRender.fire(self, options);
        };
        this.questionEditorWindow = new __WEBPACK_IMPORTED_MODULE_8__questionEditors_questionEditor__["a" /* SurveyPropertyEditorShowWindow */]();
        this.questionEditorWindow.onCanShowPropertyCallback = function (object, property) {
            return self.onCanShowObjectProperty(object, property);
        };
        this.pagesEditor = new __WEBPACK_IMPORTED_MODULE_3__pagesEditor__["a" /* SurveyPagesEditor */]();
        this.pagesEditor = new __WEBPACK_IMPORTED_MODULE_3__pagesEditor__["a" /* SurveyPagesEditor */]();
        this.pagesEditor.onAddNewPageCallback = function () {
            self.addPage();
        };
        this.pagesEditor.onSelectPageCallback = function (page) {
            self.surveyObjects.selectObject(page);
        };
        this.pagesEditor.onMovePageCallback = function (indexFrom, indexTo) {
            self.movePage(indexFrom, indexTo);
        };
        this.pagesEditor.onDeletePageCallback = function (page) {
            self.deleteCurrentObject();
        };
        this.pagesEditor.onCopyPageCallback = function (page) {
            self.copyPage(page);
        };
        this.pagesEditor.onModifiedCallback = function (options) {
            self.setModified(options);
        };
        this.pagesEditor.onShowPageEditDialog = function (page) {
            self.showQuestionEditor(page);
        };
        this.pagesEditor.onShowSurveyEditDialog = function () {
            self.showQuestionEditor(_this.survey);
        };
        this.pagesEditor.onSelectSurveyCallback = function () {
            self.surveyObjects.selectObject(_this.survey);
        };
        this.surveyLive = new __WEBPACK_IMPORTED_MODULE_4__surveylive__["a" /* SurveyLiveTester */]();
        this.surveyEmbeding = new __WEBPACK_IMPORTED_MODULE_5__surveyEmbedingWindow__["a" /* SurveyEmbedingWindow */]();
        this.toolboxValue = new __WEBPACK_IMPORTED_MODULE_14__questionToolbox__["a" /* QuestionToolbox */](this.options && this.options.questionTypes
            ? this.options.questionTypes
            : null);
        this.koViewType = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("designer");
        this.koIsShowDesigner = __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () {
            return self.koViewType() == "designer";
        });
        this.selectDesignerClick = function () {
            self.showDesigner();
        };
        this.selectEditorClick = function () {
            self.showJsonEditor();
        };
        this.selectTestClick = function () {
            self.showTestSurvey();
        };
        this.selectEmbedClick = function () {
            self.showEmbedEditor();
        };
        this.generateValidJSONClick = function () {
            self.koGenerateValidJSON(true);
        };
        this.generateReadableJSONClick = function () {
            self.koGenerateValidJSON(false);
        };
        this.runSurveyClick = function () {
            self.showLiveSurvey();
        };
        this.embedingSurveyClick = function () {
            self.showSurveyEmbeding();
        };
        this.deleteObjectClick = function () {
            self.deleteCurrentObject();
        };
        this.draggingToolboxItem = function (item, e) {
            self.doDraggingToolboxItem(item.json, e);
        };
        this.clickToolboxItem = function (item) {
            self.doClickToolboxItem(item.json);
        };
        this.dragEnd = function (item, e) {
            self.dragDropHelper.end();
        };
        this.doUndoClick = function () {
            self.doUndoRedo(self.undoRedo.undo());
        };
        this.doRedoClick = function () {
            self.doUndoRedo(self.undoRedo.redo());
        };
        this.jsonEditor = new __WEBPACK_IMPORTED_MODULE_9__surveyJSONEditor__["a" /* SurveyJSONEditor */]();
        if (renderedElement) {
            this.render(renderedElement);
        }
        this.text = "";
        this.toolbarItems.push({
            id: "svd-undo",
            visible: this.koIsShowDesigner,
            enabled: this.undoRedo.koCanUndo,
            action: this.doUndoClick,
            title: this.getLocString("ed.undo")
        });
        this.toolbarItems.push({
            id: "svd-redo",
            visible: this.koIsShowDesigner,
            enabled: this.undoRedo.koCanRedo,
            action: this.doRedoClick,
            title: this.getLocString("ed.redo")
        });
        this.toolbarItems.push({
            id: "svd-options",
            visible: __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () { return _this.koIsShowDesigner() && _this.koShowOptions(); }),
            title: this.getLocString("ed.options"),
            template: "svd-toolbar-options",
            items: __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]([
                {
                    id: "svd-valid-json",
                    visible: true,
                    css: __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () { return (_this.koGenerateValidJSON() ? "active" : ""); }),
                    action: this.generateValidJSONClick,
                    title: this.getLocString("ed.generateValidJSON")
                },
                {
                    id: "svd-readable-json",
                    visible: true,
                    css: __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () { return (!_this.koGenerateValidJSON() ? "active" : ""); }),
                    action: this.generateReadableJSONClick,
                    title: this.getLocString("ed.generateReadableJSON")
                }
            ])
        });
        this.toolbarItems.push({
            id: "svd-test",
            visible: __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () { return _this.koViewType() === "test"; }),
            title: __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () {
                return _this.getLocString("ed.testSurveyWidth") +
                    " " +
                    _this.koTestSurveyWidth();
            }),
            template: "svd-toolbar-options",
            items: __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]([
                {
                    id: "svd-100-json",
                    visible: true,
                    action: function () { return _this.koTestSurveyWidth("100%"); },
                    title: "100%"
                },
                {
                    id: "svd-1200px-json",
                    visible: true,
                    action: function () { return _this.koTestSurveyWidth("1200px"); },
                    title: "1200px"
                },
                {
                    id: "svd-1000px-json",
                    visible: true,
                    action: function () { return _this.koTestSurveyWidth("1000px"); },
                    title: "1000px"
                },
                {
                    id: "svd-800px-json",
                    visible: true,
                    action: function () { return _this.koTestSurveyWidth("800px"); },
                    title: "800px"
                },
                {
                    id: "svd-600px-json",
                    visible: true,
                    action: function () { return _this.koTestSurveyWidth("600px"); },
                    title: "600px"
                },
                {
                    id: "svd-400px-json",
                    visible: true,
                    action: function () { return _this.koTestSurveyWidth("400px"); },
                    title: "400px"
                }
            ])
        });
        this.toolbarItems.push({
            id: "svd-save",
            visible: this.koShowSaveButton,
            action: this.saveButtonClick,
            innerCss: "svd_save_btn",
            title: this.getLocString("ed.saveSurvey")
        });
        this.toolbarItems.push({
            id: "svd-state",
            visible: this.koShowState,
            css: "svd_state",
            innerCss: __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () { return "icon-" + _this.koState(); }),
            title: __WEBPACK_IMPORTED_MODULE_0_knockout__["computed"](function () { return _this.getLocString("ed." + _this.koState()); }),
            template: "svd-toolbar-state"
        });
    }
    Object.defineProperty(SurveyEditor.prototype, "haveCommercialLicense", {
        /**
         * You have right to set this property to true if you have bought the commercial licence only.
         * It will remove the text about non-commerical usage on the top of the widget.
         * Setting this property true without having a commercial licence is illegal.
         * @see haveCommercialLicense
         */
        get: function () {
            return this._haveCommercialLicense();
        },
        set: function (val) {
            this._haveCommercialLicense(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "isAutoSave", {
        /**
         * A boolean property, false by default. Set it to true to call protected doSave method automatically on survey changing.
         */
        get: function () {
            return this.koAutoSave();
        },
        set: function (newVal) {
            this.koAutoSave(newVal);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "showState", {
        /**
         * A boolean property, false by default. Set it to true to show the state in the toolbar (saving/saved).
         */
        get: function () {
            return this.koShowState();
        },
        set: function (newVal) {
            this.koShowState(newVal);
        },
        enumerable: true,
        configurable: true
    });
    SurveyEditor.prototype.setOptions = function (options) {
        if (!options)
            options = {};
        if (!options.hasOwnProperty("generateValidJSON"))
            options.generateValidJSON = true;
        this.options = options;
        this.showJSONEditorTabValue =
            typeof options.showJSONEditorTab !== "undefined"
                ? options.showJSONEditorTab
                : true;
        this.showTestSurveyTabValue =
            typeof options.showTestSurveyTab !== "undefined"
                ? options.showTestSurveyTab
                : true;
        this.showEmbededSurveyTabValue =
            typeof options.showEmbededSurveyTab !== "undefined"
                ? options.showEmbededSurveyTab
                : false;
        this.haveCommercialLicense =
            typeof options.haveCommercialLicense !== "undefined"
                ? options.haveCommercialLicense
                : false;
        this.koShowOptions(typeof options.showOptions !== "undefined" ? options.showOptions : false);
        this.koShowPropertyGrid(typeof options.showPropertyGrid !== "undefined"
            ? options.showPropertyGrid
            : true);
        this.koGenerateValidJSON(this.options.generateValidJSON);
        this.isAutoSave =
            typeof options.isAutoSave !== "undefined" ? options.isAutoSave : false;
        this.isRTLValue =
            typeof options.isRTL !== "undefined" ? options.isRTL : false;
        if (options.designerHeight) {
            this.koDesignerHeight(options.designerHeight);
        }
        if (options.objectsIntend) {
            __WEBPACK_IMPORTED_MODULE_6__surveyObjects__["a" /* SurveyObjects */].intend = options.objectsIntend;
        }
        if (typeof options.showPagesToolbox !== "undefined") {
            this.koShowPagesToolbox(options.showPagesToolbox);
        }
    };
    Object.defineProperty(SurveyEditor.prototype, "survey", {
        /**
         * The editing survey object (Survey.Survey)
         */
        get: function () {
            return this.surveyValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "selectedObjectEditor", {
        get: function () {
            return this.selectedObjectEditorValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Call this method to render the survey editor.
     * @param element HtmlElement or html element id where Survey Editor will be rendered
     * @param options Survey Editor options. The following options are available: showJSONEditorTab, showTestSurveyTab, showEmbededSurveyTab, showOptions, generateValidJSON, isAutoSave, designerHeight.
     */
    SurveyEditor.prototype.render = function (element, options) {
        if (element === void 0) { element = null; }
        if (options === void 0) { options = null; }
        if (options)
            this.setOptions(options);
        var self = this;
        if (element && typeof element == "string") {
            element = document.getElementById(element);
        }
        if (element) {
            this.renderedElement = element;
        }
        element = this.renderedElement;
        if (!element)
            return;
        element.innerHTML = templateEditorHtml;
        self.applyBinding();
    };
    SurveyEditor.prototype.loadSurvey = function (surveyId) {
        var self = this;
        new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["dxSurveyService"]().loadSurvey(surveyId, function (success, result, response) {
            if (success && result) {
                self.text = JSON.stringify(result);
            }
        });
    };
    Object.defineProperty(SurveyEditor.prototype, "text", {
        /**
         * The Survey JSON as a text. Use it to get Survey JSON or change it.
         */
        get: function () {
            if (this.koIsShowDesigner())
                return this.getSurveyTextFromDesigner();
            return this.jsonEditor.text;
        },
        set: function (value) {
            this.changeText(value, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set JSON as text  into survey. Clear undo/redo states optionally.
     * @param value JSON as text
     * @param clearState default false. Set this parameter to true to clear undo/redo states.
     */
    SurveyEditor.prototype.changeText = function (value, clearState) {
        if (clearState === void 0) { clearState = false; }
        var textWorker = new __WEBPACK_IMPORTED_MODULE_10__textWorker__["a" /* SurveyTextWorker */](value);
        if (textWorker.isJsonCorrect) {
            this.initSurvey(new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["JsonObject"]().toJsonObject(textWorker.survey));
            this.showDesigner();
            this.setUndoRedoCurrentState(clearState);
        }
        else {
            this.setTextValue(value);
            this.koViewType("editor");
        }
    };
    Object.defineProperty(SurveyEditor.prototype, "toolbox", {
        /**
         * Toolbox object. Contains information about Question toolbox items.
         * @see QuestionToolbox
         */
        get: function () {
            return this.toolboxValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "customToolboxQuestionMaxCount", {
        /**
         * Get and set the maximum of copied questions/panels in the toolbox. The default value is 3
         */
        get: function () {
            return this.toolbox.copiedItemMaxCount;
        },
        set: function (value) {
            this.toolbox.copiedItemMaxCount = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "state", {
        /**
         * Returns the Editor state. It may return empty string or "saving" and "saved".
         */
        get: function () {
            return this.stateValue;
        },
        enumerable: true,
        configurable: true
    });
    SurveyEditor.prototype.setState = function (value) {
        this.stateValue = value;
        this.koState(this.state);
    };
    SurveyEditor.prototype.doSave = function () {
        this.setState("saving");
        if (this.saveSurveyFunc) {
            this.saveNo++;
            var self = this;
            this.saveSurveyFunc(this.saveNo, function doSaveCallback(no, isSuccess) {
                self.setState("saved");
                if (self.saveNo == no) {
                    if (isSuccess)
                        self.setState("saved");
                    //else TODO
                }
            });
        }
    };
    SurveyEditor.prototype.setModified = function (options) {
        if (options === void 0) { options = null; }
        this.setState("modified");
        this.setUndoRedoCurrentState();
        this.onModified.fire(this, options);
        this.isAutoSave && this.doSave();
    };
    SurveyEditor.prototype.setUndoRedoCurrentState = function (clearState) {
        if (clearState === void 0) { clearState = false; }
        if (clearState) {
            this.undoRedo.clear();
        }
        var selObj = this.koSelectedObject() ? this.koSelectedObject().value : null;
        this.undoRedo.setCurrent(this.surveyValue(), selObj ? selObj.name : null);
    };
    Object.defineProperty(SurveyEditor.prototype, "saveSurveyFunc", {
        /**
         * Assign to this property a function that will be called on clicking the 'Save' button or on any change if isAutoSave equals true.
         * @see isAutoSave
         */
        get: function () {
            return this.saveSurveyFuncValue;
        },
        set: function (value) {
            this.saveSurveyFuncValue = value;
            this.koShowSaveButton(value != null && !this.isAutoSave);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "showOptions", {
        /**
         * Set it to true to show "Options" menu and to false to hide the menu
         */
        get: function () {
            return this.koShowOptions();
        },
        set: function (value) {
            this.koShowOptions(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "showPropertyGrid", {
        /**
         * Set it to false to hide the Property Grid on the right. It allows to edit the properties of the selected object (question/panel/page/survey).
         */
        get: function () {
            return this.koShowPropertyGrid();
        },
        set: function (value) {
            this.koShowPropertyGrid(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "showJSONEditorTab", {
        /**
         * Set it to true to show "JSON Editor" tab and to false to hide the tab
         */
        get: function () {
            return this.showJSONEditorTabValue;
        },
        set: function (value) {
            this.showJSONEditorTabValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "showTestSurveyTab", {
        /**
         * Set it to true to show "Test Survey" tab and to false to hide the tab
         */
        get: function () {
            return this.showTestSurveyTabValue;
        },
        set: function (value) {
            this.showTestSurveyTabValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "showEmbededSurveyTab", {
        /**
         * Set it to true to show "Embed Survey" tab and to false to hide the tab
         */
        get: function () {
            return this.showEmbededSurveyTabValue;
        },
        set: function (value) {
            this.showEmbededSurveyTabValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "isRTL", {
        /**
         * Set it to true to activate RTL support
         */
        get: function () {
            return this.isRTLValue;
        },
        set: function (value) {
            this.isRTLValue = value;
        },
        enumerable: true,
        configurable: true
    });
    SurveyEditor.prototype.onCanShowObjectProperty = function (object, property) {
        var options = { obj: object, property: property, canShow: true };
        this.onCanShowProperty.fire(this, options);
        return options.canShow;
    };
    SurveyEditor.prototype.onCustomSortPropertyObjectProperty = function (object, property1, property2) {
        if (this.onCustomSortProperty.isEmpty)
            return 0;
        var options = {
            obj: object,
            property1: property1,
            property2: property2,
            result: 0
        };
        this.onCustomSortProperty.fire(this, options);
        return options.result;
    };
    SurveyEditor.prototype.setTextValue = function (value) {
        this.jsonEditor.text = value;
    };
    /**
     * Add a new page into the editing survey.
     */
    SurveyEditor.prototype.addPage = function () {
        var name = __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getNewPageName(this.survey.pages);
        var page = this.surveyValue().addNewPage(name);
        this.addPageToUI(page);
        this.setModified({ type: "PAGE_ADDED", newValue: page });
    };
    /**
     * Returns the localized string by it's id
     * @param str the string id.
     */
    SurveyEditor.prototype.getLocString = function (str) {
        return __WEBPACK_IMPORTED_MODULE_1__editorLocalization__["a" /* editorLocalization */].getString(str);
    };
    SurveyEditor.prototype.movePage = function (indexFrom, indexTo) {
        var page = this.survey.pages[indexFrom];
        this.survey.pages.splice(indexFrom, 1);
        this.survey.pages.splice(indexTo, 0, page);
        this.pagesEditor.survey = this.survey;
        this.surveyObjects.selectObject(page);
        this.setModified({
            type: "PAGE_MOVED",
            page: page,
            indexFrom: indexFrom,
            indexTo: indexTo
        });
    };
    SurveyEditor.prototype.addPageToUI = function (page) {
        this.pagesEditor.survey = this.surveyValue();
        this.surveyObjects.addPage(page);
    };
    SurveyEditor.prototype.doOnQuestionAdded = function (question, parentPanel) {
        if (!this.dragDropHelper.isMoving) {
            var page = this.getPageByElement(question);
            var options = { question: question, page: page };
            this.onQuestionAdded.fire(this, options);
        }
        this.surveyObjects.addElement(question, parentPanel);
        this.survey.render();
    };
    SurveyEditor.prototype.doOnElementRemoved = function (question) {
        this.surveyObjects.removeObject(question);
        this.survey.render();
    };
    SurveyEditor.prototype.doOnPanelAdded = function (panel, parentPanel) {
        var page = this.getPageByElement(panel);
        var options = { panel: panel, page: page };
        this.onPanelAdded.fire(this, options);
        this.surveyObjects.addElement(panel, parentPanel);
        this.survey.render();
    };
    SurveyEditor.prototype.doOnPageAdded = function (page) {
        var options = { page: page };
        this.onPageAdded.fire(this, options);
    };
    SurveyEditor.prototype.onPropertyValueChanged = function (property, obj, newValue) {
        var isDefault = property.isDefaultValue(newValue);
        var oldValue = obj[property.name];
        obj[property.name] = newValue;
        if (property.name == "name") {
            this.surveyObjects.nameChanged(obj);
            if (__WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getObjectType(obj) == __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["a" /* ObjType */].Page) {
                this.pagesEditor.changeName(obj);
            }
        }
        this.setModified({
            type: "PROPERTY_CHANGED",
            name: property.name,
            target: obj,
            oldValue: oldValue,
            newValue: newValue
        });
        //TODO add a flag to a property, may change other properties
        if (property.name == "locale" ||
            property.name == "hasComment" ||
            property.name == "hasOther") {
            this.selectedObjectEditorValue.objectChanged();
        }
        this.survey.render();
    };
    SurveyEditor.prototype.doUndoRedo = function (item) {
        this.initSurvey(item.surveyJSON);
        if (item.selectedObjName) {
            var selObj = this.findObjByName(item.selectedObjName);
            if (selObj) {
                this.surveyObjects.selectObject(selObj);
            }
        }
        this.setState("modified");
        this.isAutoSave && this.doSave();
    };
    SurveyEditor.prototype.findObjByName = function (name) {
        var page = this.survey.getPageByName(name);
        if (page)
            return page;
        var question = this.survey.getQuestionByName(name);
        if (question)
            return question;
        return null;
    };
    SurveyEditor.prototype.canSwitchViewType = function (newType) {
        if (newType && this.koViewType() == newType)
            return false;
        if (this.koViewType() == "designer") {
            this.jsonEditor.text = this.getSurveyTextFromDesigner();
        }
        if (this.koViewType() != "editor")
            return true;
        if (!this.jsonEditor.isJsonCorrect) {
            alert(this.getLocString("ed.correctJSON"));
            return false;
        }
        this.initSurvey(new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["JsonObject"]().toJsonObject(this.jsonEditor.survey));
        this.setModified({ type: "VIEW_TYPE_CHANGED", newType: newType });
        return true;
    };
    /**
     * Make a "Survey Designer" tab active.
     */
    SurveyEditor.prototype.showDesigner = function () {
        if (!this.canSwitchViewType("designer"))
            return;
        this.koViewType("designer");
    };
    /**
     * Make a "JSON Editor" tab active.
     */
    SurveyEditor.prototype.showJsonEditor = function () {
        if (this.koViewType() == "editor")
            return;
        this.jsonEditor.show(this.getSurveyTextFromDesigner());
        this.koViewType("editor");
    };
    /**
     * Make a "Test Survey" tab active.
     */
    SurveyEditor.prototype.showTestSurvey = function () {
        if (!this.canSwitchViewType(null))
            return;
        this.showLiveSurvey();
        this.koViewType("test");
    };
    /**
     * Make a Embed Survey" tab active.
     */
    SurveyEditor.prototype.showEmbedEditor = function () {
        if (!this.canSwitchViewType("embed"))
            return;
        this.showSurveyEmbeding();
        this.koViewType("embed");
    };
    SurveyEditor.prototype.getSurveyTextFromDesigner = function () {
        var json = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["JsonObject"]().toJsonObject(this.survey);
        if (this.options && this.options.generateValidJSON)
            return JSON.stringify(json, null, 1);
        return new __WEBPACK_IMPORTED_MODULE_15__json5__["a" /* SurveyJSON5 */]().stringify(json, null, 1);
    };
    SurveyEditor.prototype.getPageByElement = function (obj) {
        var page = this.survey.getPageByElement(obj);
        if (page)
            return page;
        return this.surveyObjects.getSelectedObjectPage(obj);
    };
    SurveyEditor.prototype.selectedObjectChanged = function (obj) {
        var canDeleteObject = false;
        this.selectedObjectEditorValue.selectedObject = obj;
        var objType = __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getObjectType(obj);
        if (objType == __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["a" /* ObjType */].Page) {
            this.survey.currentPage = obj;
            canDeleteObject = this.survey.pages.length > 1;
        }
        if (objType == __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["a" /* ObjType */].Question || objType == __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["a" /* ObjType */].Panel) {
            this.survey.selectedElement = obj;
            canDeleteObject = true;
            this.survey.currentPage = this.getPageByElement(obj);
            var id = obj["id"];
            if (this.renderedElement && id && this.survey.currentPage) {
                var el_1 = this.renderedElement.querySelector("#" + id);
                var pageEl = this.renderedElement.querySelector("#" + this.survey.currentPage.id);
                __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].scrollIntoViewIfNeeded(el_1, pageEl);
            }
        }
        else {
            this.survey.selectedElement = null;
        }
        this.pagesEditor.setSelectedObject(obj);
        this.koCanDeleteObject(canDeleteObject);
        //Select2 work-around
        if (this.renderedElement && this.select2) {
            var el = this.renderedElement.querySelector("#select2-objectSelector-container"); //TODO
            if (el) {
                var item = this.surveyObjects.koSelected();
                if (item && item.text) {
                    el.innerText = item.text();
                }
            }
        }
    };
    SurveyEditor.prototype.applyBinding = function () {
        if (this.renderedElement == null)
            return;
        __WEBPACK_IMPORTED_MODULE_0_knockout__["cleanNode"](this.renderedElement);
        __WEBPACK_IMPORTED_MODULE_0_knockout__["applyBindings"](this, this.renderedElement);
        this.surveyjs = this.renderedElement.querySelector("#surveyjs");
        if (this.surveyjs) {
            var self = this;
            this.surveyjs.onkeydown = function (e) {
                if (!e)
                    return;
                // if (e.keyCode == 46) self.deleteQuestion();
                if (e.keyCode == 38 || e.keyCode == 40) {
                    self.selectQuestion(e.keyCode == 38);
                }
            };
        }
        this.initSurvey(this.getDefaultSurveyJson());
        this.setUndoRedoCurrentState(true);
        this.jsonEditor.init(this.renderedElement.querySelector("#surveyjsJSONEditor"));
        if (typeof jQuery !== "undefined" && jQuery()["select2"]) {
            var options = {
                width: "100%"
            };
            if (this.isRTLValue) {
                options.dir = "rtl";
            }
            this.select2 = jQuery("#objectSelector")["select2"](options);
        }
    };
    SurveyEditor.prototype.getDefaultSurveyJson = function () {
        var json = new __WEBPACK_IMPORTED_MODULE_15__json5__["a" /* SurveyJSON5 */]().parse(SurveyEditor.defaultNewSurveyText);
        if (json["pages"] &&
            json["pages"]["length"] > 0 &&
            json["pages"][0]["name"]) {
            json["pages"][0]["name"] =
                __WEBPACK_IMPORTED_MODULE_1__editorLocalization__["a" /* editorLocalization */].getString("ed.newPageName") + "1";
        }
        return json;
    };
    SurveyEditor.prototype.initSurvey = function (json) {
        var _this = this;
        var self = this;
        this.surveyValue(new __WEBPACK_IMPORTED_MODULE_17__surveyjsObjects__["a" /* SurveyForDesigner */]());
        this.dragDropHelper = new __WEBPACK_IMPORTED_MODULE_13__dragdrophelper__["a" /* DragDropHelper */](this.survey, function (options) {
            self.setModified(options);
        }, this.renderedElement);
        this.surveyValue()["getEditor"] = function () { return self; };
        this.surveyValue()["setJsonObject"](json); //TODO
        if (this.surveyValue().isEmpty) {
            this.surveyValue()["setJsonObject"](this.getDefaultSurveyJson()); //TODO
        }
        this.surveyValue()["dragDropHelper"] = this.dragDropHelper;
        this.surveyValue().onUpdateElementAllowingOptions = function (options) {
            self.onElementAllowOperations.fire(self, options);
        };
        this.surveyValue().onGetMenuItems.add(function (sender, options) {
            var opts = options.obj.allowingOptions;
            if (!opts)
                opts = {};
            if (opts.allowAddToToolbox) {
                options.items.push({
                    name: "addToToolbox",
                    text: self.getLocString("survey.addToToolbox"),
                    onClick: function (selObj) {
                        self.addCustomToolboxQuestion(selObj);
                    }
                });
            }
            if (opts.allowCopy) {
                options.items.push({
                    name: "copy",
                    text: self.getLocString("survey.copy"),
                    onClick: function (selObj) {
                        self.fastCopyQuestion(selObj);
                    }
                });
            }
            if (opts.allowChangeType) {
                var convertClasses = __WEBPACK_IMPORTED_MODULE_7__questionconverter__["a" /* QuestionConverter */].getConvertToClasses(options.obj.getType());
                for (var i = 0; i < convertClasses.length; i++) {
                    var className = convertClasses[i];
                    var text = _this.getLocString("survey.convertTo") +
                        " " +
                        _this.getLocString("qt." + className);
                    options.items.push({
                        name: "convertTo" + className,
                        text: text,
                        className: className,
                        onClick: function (selObj, item) {
                            self.convertCurrentObject(selObj, item.className);
                        }
                    });
                }
            }
            if (opts.allowDelete) {
                var deleteLocaleName = options.obj.isPanel
                    ? "survey.deletePanel"
                    : "survey.deleteQuestion";
                options.items.push({
                    name: "delete",
                    text: self.getLocString(deleteLocaleName),
                    onClick: function (selObj) {
                        self.deleteCurrentObject();
                    }
                });
            }
            self.onDefineElementMenuItems.fire(self, options);
        });
        this.onDesignerSurveyCreated.fire(this, { survey: this.surveyValue() });
        this.survey.render(this.surveyjs);
        this.surveyObjects.survey = this.survey;
        this.pagesEditor.survey = this.survey;
        this.pagesEditor.setSelectedPage(this.survey.currentPage);
        this.surveyValue().onSelectedElementChanged.add(function (sender, options) {
            self.surveyObjects.selectObject(sender["selectedElement"]);
        });
        this.surveyValue().onEditButtonClick.add(function (sender) {
            self.showQuestionEditor(self.koSelectedObject().value);
        });
        this.surveyValue().onElementDoubleClick.add(function (sender, options) {
            self.onElementDoubleClick.fire(self, options);
        });
        this.surveyValue().onProcessHtml.add(function (sender, options) {
            options.html = self.processHtml(options.html);
        });
        this.surveyValue().onCurrentPageChanged.add(function (sender, options) {
            self.pagesEditor.setSelectedPage(sender.currentPage);
        });
        this.surveyValue().onQuestionAdded.add(function (sender, options) {
            self.doOnQuestionAdded(options.question, options.parentPanel);
        });
        this.surveyValue().onQuestionRemoved.add(function (sender, options) {
            self.doOnElementRemoved(options.question);
        });
        this.surveyValue().onPanelAdded.add(function (sender, options) {
            self.doOnPanelAdded(options.panel, options.parentPanel);
        });
        this.surveyValue().onPanelRemoved.add(function (sender, options) {
            self.doOnElementRemoved(options.panel);
        });
        var pAdded = this.surveyValue()["onPageAdded"];
        if (pAdded && pAdded.add) {
            pAdded.add(function (sender, options) {
                self.doOnPageAdded(options.page);
            });
        }
    };
    SurveyEditor.prototype.processHtml = function (html) {
        if (!html)
            return html;
        var scriptRegEx = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
        while (scriptRegEx.test(html)) {
            html = html.replace(scriptRegEx, "");
        }
        return html;
    };
    SurveyEditor.prototype.doDraggingToolboxItem = function (json, e) {
        this.dragDropHelper.startDragToolboxItem(e, this.getNewName(json["type"]), json);
    };
    SurveyEditor.prototype.doClickToolboxItem = function (json) {
        var newElement = this.createNewElement(json);
        this.doClickQuestionCore(newElement);
    };
    SurveyEditor.prototype.copyElement = function (element) {
        var json = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["JsonObject"]().toJsonObject(element);
        json.type = element.getType();
        return this.createNewElement(json);
    };
    SurveyEditor.prototype.dragOverQuestionsEditor = function (data, e) {
        data.survey.dragDropHelper.doDragDropOver(e, data.survey.currentPage);
        return false;
    };
    SurveyEditor.prototype.dropOnQuestionsEditor = function (data, e) {
        data.survey.dragDropHelper.doDrop(e);
    };
    SurveyEditor.prototype.createNewElement = function (json) {
        var newElement = __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["JsonObject"].metaData.createClass(json["type"]);
        new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["JsonObject"]().toObject(json, newElement);
        this.setNewNames(newElement);
        return newElement;
    };
    SurveyEditor.prototype.setNewNames = function (element) {
        this.newQuestions = [];
        this.newPanels = [];
        this.setNewNamesCore(element);
    };
    SurveyEditor.prototype.setNewNamesCore = function (element) {
        var elType = element["getType"]();
        element.name = this.getNewName(elType);
        if (element.isPanel || elType == "page") {
            if (element.isPanel) {
                this.newPanels.push(element);
            }
            var panel = element;
            for (var i = 0; i < panel.elements.length; i++) {
                this.setNewNamesCore(panel.elements[i]);
            }
        }
        else {
            this.newQuestions.push(element);
        }
    };
    SurveyEditor.prototype.getNewName = function (type) {
        if (type == "page")
            return __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getNewPageName(this.survey.pages);
        return type == "panel" ? this.getNewPanelName() : this.getNewQuestionName();
    };
    SurveyEditor.prototype.getNewQuestionName = function () {
        return __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getNewQuestionName(this.getAllQuestions());
    };
    SurveyEditor.prototype.getNewPanelName = function () {
        return __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getNewPanelName(this.getAllPanels());
    };
    SurveyEditor.prototype.getAllQuestions = function () {
        var result = [];
        for (var i = 0; i < this.survey.pages.length; i++) {
            this.addElements(this.survey.pages[i].elements, false, result);
        }
        this.addElements(this.newPanels, false, result);
        this.addElements(this.newQuestions, false, result);
        return result;
    };
    SurveyEditor.prototype.getAllPanels = function () {
        var result = [];
        for (var i = 0; i < this.survey.pages.length; i++) {
            this.addElements(this.survey.pages[i].elements, true, result);
        }
        this.addElements(this.newPanels, true, result);
        this.addElements(this.newQuestions, true, result);
        return result;
    };
    SurveyEditor.prototype.addElements = function (elements, isPanel, result) {
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].isPanel === isPanel) {
                result.push(elements[i]);
            }
            this.addElements(__WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getElements(elements[i]), isPanel, result);
        }
    };
    SurveyEditor.prototype.doClickQuestionCore = function (element, modifiedType) {
        if (modifiedType === void 0) { modifiedType = "ADDED_FROM_TOOLBOX"; }
        var parent = this.survey.currentPage;
        var index = -1;
        var elElement = this.survey.selectedElement;
        if (elElement && elElement.parent) {
            parent = elElement.parent;
            index = parent.elements.indexOf(this.survey.selectedElement);
            if (index > -1)
                index++;
        }
        parent.addElement(element, index);
        if (this.renderedElement) {
            this.dragDropHelper.scrollToElement(this.renderedElement.querySelector("#" + element["id"]));
        }
        this.setModified({ type: modifiedType, question: element });
    };
    SurveyEditor.prototype.deleteQuestion = function () {
        var question = this.getSelectedObjAsQuestion();
        if (question) {
            this.deleteCurrentObject();
        }
    };
    SurveyEditor.prototype.selectQuestion = function (isUp) {
        var question = this.getSelectedObjAsQuestion();
        if (question) {
            this.surveyObjects.selectNextQuestion(isUp);
        }
    };
    SurveyEditor.prototype.getSelectedObjAsQuestion = function () {
        var obj = this.koSelectedObject().value;
        if (!obj)
            return null;
        return __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getObjectType(obj) == __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["a" /* ObjType */].Question
            ? obj
            : null;
    };
    SurveyEditor.prototype.deleteCurrentObject = function () {
        this.deleteObject(this.koSelectedObject().value);
    };
    SurveyEditor.prototype.editCurrentObject = function () {
        this.showQuestionEditor(this.koSelectedObject().value);
    };
    SurveyEditor.prototype.convertCurrentObject = function (obj, className) {
        var newQuestion = __WEBPACK_IMPORTED_MODULE_7__questionconverter__["a" /* QuestionConverter */].convertObject(obj, className);
        this.setModified({
            type: "QUESTION_CONVERTED",
            className: className,
            oldValue: obj,
            newValue: newQuestion
        });
    };
    /**
     * Show the Editor dialog. The element can be a question, panel, page or survey
     * @param element The survey element
     */
    SurveyEditor.prototype.showElementEditor = function (element, onClose) {
        this.showQuestionEditor(element, onClose);
    };
    SurveyEditor.prototype.showQuestionEditor = function (element, onClose) {
        if (onClose === void 0) { onClose = null; }
        var self = this;
        var elWindow = this.renderedElement
            ? this.renderedElement.querySelector("#surveyquestioneditorwindow")
            : null;
        var isCanceled = true;
        this.questionEditorWindow.show(element, elWindow, function (question) {
            self.onQuestionEditorChanged(question);
            isCanceled = false;
        }, this, function () {
            if (onClose)
                onClose(isCanceled);
        });
    };
    SurveyEditor.prototype.onQuestionEditorChanged = function (question) {
        this.surveyObjects.nameChanged(question);
        this.selectedObjectEditorValue.objectChanged();
        this.pagesEditor.updatePages();
        this.pagesEditor.setSelectedPage(question);
        this.setModified({
            type: "QUESTION_CHANGED_BY_EDITOR",
            question: question
        });
        this.survey.render();
    };
    /**
     * Add a question into Toolbox object
     * @param question an added Survey.Question
     * @see toolbox
     */
    SurveyEditor.prototype.addCustomToolboxQuestion = function (question) {
        this.toolbox.addCopiedItem(question);
    };
    /**
     * Copy a question to the active page
     * @param question A copied Survey.Question
     */
    SurveyEditor.prototype.fastCopyQuestion = function (question) {
        var newElement = this.copyElement(question);
        this.doClickQuestionCore(newElement, "ELEMENT_COPIED");
    };
    /**
     * Create a new page with the same elements and place it next to the current one. It returns the new created Survey.Page
     * @param page A copied Survey.Page
     */
    SurveyEditor.prototype.copyPage = function (page) {
        var newPage = this.copyElement(page);
        var index = this.survey.pages.indexOf(page);
        if (index > -1) {
            this.survey.pages.splice(index + 1, 0, newPage);
        }
        else {
            this.survey.pages.push(newPage);
        }
        this.addPageToUI(newPage);
        this.setModified({ type: "PAGE_ADDED", newValue: newPage });
        return newPage;
    };
    /**
     * Delete an element in the survey. It can be a question, a panel or a page.
     * @param element a survey element.
     */
    SurveyEditor.prototype.deleteElement = function (element) {
        this.deleteObject(element);
    };
    SurveyEditor.prototype.deleteObject = function (obj) {
        var options = {
            element: obj,
            elementType: __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getObjectType(obj),
            allowing: true
        };
        this.onElementDeleting.fire(this, options);
        if (!options.allowing)
            return;
        this.surveyObjects.removeObject(obj);
        var objType = __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["b" /* SurveyHelper */].getObjectType(obj);
        if (objType == __WEBPACK_IMPORTED_MODULE_12__surveyHelper__["a" /* ObjType */].Page) {
            this.survey.removePage(obj);
            this.pagesEditor.removePage(obj);
        }
        else {
            this.survey.currentPage.removeElement(obj);
            this.survey.selectedElement = null;
            this.surveyObjects.selectObject(this.survey.currentPage);
        }
        this.setModified({
            type: "OBJECT_DELETED",
            target: obj
        });
        this.survey.render();
    };
    SurveyEditor.prototype.showLiveSurvey = function () {
        var self = this;
        this.surveyLive.onSurveyCreatedCallback = function (survey) {
            self.onTestSurveyCreated.fire(self, { survey: survey });
        };
        this.surveyLive.setJSON(this.getSurveyJSON());
        this.surveyLive.show();
    };
    SurveyEditor.prototype.showSurveyEmbeding = function () {
        var json = this.getSurveyJSON();
        this.surveyEmbeding.json = json;
        this.surveyEmbeding.surveyId = this.surveyId;
        this.surveyEmbeding.surveyPostId = this.surveyPostId;
        this.surveyEmbeding.generateValidJSON =
            this.options && this.options.generateValidJSON;
        this.surveyEmbeding.show();
    };
    SurveyEditor.prototype.getSurveyJSON = function () {
        if (this.koIsShowDesigner())
            return new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["JsonObject"]().toJsonObject(this.survey);
        if (this.jsonEditor.isJsonCorrect)
            return new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["JsonObject"]().toJsonObject(this.jsonEditor.survey);
        return null;
    };
    SurveyEditor.prototype.createAnnotations = function (text, errors) {
        var annotations = new Array();
        for (var i = 0; i < errors.length; i++) {
            var error = errors[i];
            var annotation = {
                row: error.position.start.row,
                column: error.position.start.column,
                text: error.text,
                type: "error"
            };
            annotations.push(annotation);
        }
        return annotations;
    };
    Object.defineProperty(SurveyEditor.prototype, "alwaySaveTextInPropertyEditors", {
        //implements ISurveyObjectEditorOptions
        get: function () {
            return this.alwaySaveTextInPropertyEditorsValue;
        },
        set: function (value) {
            this.alwaySaveTextInPropertyEditorsValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyEditor.prototype, "showApplyButtonInEditors", {
        get: function () {
            return this.showApplyButtonValue;
        },
        set: function (value) {
            this.showApplyButtonValue = value;
        },
        enumerable: true,
        configurable: true
    });
    SurveyEditor.prototype.onItemValueAddedCallback = function (propertyName, itemValue) {
        var options = { propertyName: propertyName, newItem: itemValue };
        this.onItemValueAdded.fire(this, options);
    };
    SurveyEditor.prototype.onMatrixDropdownColumnAddedCallback = function (column) {
        var options = { newColumn: column };
        this.onMatrixColumnAdded.fire(this, options);
    };
    SurveyEditor.prototype.onSetPropertyEditorOptionsCallback = function (propertyName, obj, editorOptions) {
        var options = {
            propertyName: propertyName,
            obj: obj,
            editorOptions: editorOptions
        };
        this.onSetPropertyEditorOptions.fire(this, options);
    };
    SurveyEditor.prototype.onGetErrorTextOnValidationCallback = function (propertyName, obj, value) {
        var options = {
            propertyName: propertyName,
            obj: obj,
            value: value,
            error: ""
        };
        this.onPropertyValidationCustomError.fire(this, options);
        return options.error;
    };
    SurveyEditor.prototype.onValueChangingCallback = function (options) {
        this.onPropertyValueChanging.fire(this, options);
    };
    SurveyEditor.prototype.onPropertyEditorObjectSetCallback = function (propertyName, obj, editor) {
        var options = { propertyName: propertyName, obj: obj, editor: editor };
        this.onPropertyEditorObjectAssign.fire(this, options);
    };
    SurveyEditor.prototype.onPropertyEditorModalShowDescriptionCallback = function (propertyName, obj) {
        var options = {
            obj: obj,
            propertyName: propertyName,
            htmlTop: "",
            htmlBottom: ""
        };
        this.onShowPropertyModalEditorDescription.fire(this, options);
        var res = { top: options.htmlTop, bottom: options.htmlBottom };
        return res;
    };
    return SurveyEditor;
}());

SurveyEditor.defaultNewSurveyText = "{ pages: [ { name: 'page1'}] }";
__WEBPACK_IMPORTED_MODULE_16_survey_knockout__["Survey"].cssType = "bootstrap";
var koSurveyTemplate = new __WEBPACK_IMPORTED_MODULE_16_survey_knockout__["SurveyTemplateText"]()["text"];
koSurveyTemplate = koSurveyTemplate.replace("name: 'survey-content', afterRender: koEventAfterRender", "name: 'survey-content', data: survey");
//koSurveyTemplate = "<div data-bind='data: survey'>" + koSurveyTemplate + "</div>";
__WEBPACK_IMPORTED_MODULE_0_knockout__["components"].register("survey-widget", {
    viewModel: function (params) {
        this.survey = params.survey;
    },
    template: koSurveyTemplate
});


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__propertyEditors_propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Extentions; });

var Extentions = (function () {
    function Extentions() {
    }
    Extentions.registerCustomPropertyEditor = function (name, widgetJSON) {
        __WEBPACK_IMPORTED_MODULE_0__propertyEditors_propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerCustomEditor(name, widgetJSON);
    };
    Extentions.registerPropertyEditor = function (name, creator) {
        __WEBPACK_IMPORTED_MODULE_0__propertyEditors_propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor(name, creator);
    };
    return Extentions;
}());



/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(0);

var frenchTranslation = {
    //Strings in Editor
    "ed": {
        "survey": "Questionnaire",
        "editSurvey": "Éditer le questionnaire",
        "addNewPage": "Ajouter une page",
        "deletePage": "Supprimer une page",
        "editPage": "Éditer une page",
        "newPageName": "page",
        "newQuestionName": "question",
        "newPanelName": "panneau",
        "testSurvey": "Tester le questionnaire",
        "testSurveyAgain": "Tester à nouveau le questionnaire",
        "testSurveyWidth": "Largeur du questionnaire : ",
        "embedSurvey": "Intégrer le questionnaire",
        "saveSurvey": "Sauvegarder le questionnaire",
        "designer": "Éditeur de questionnaire",
        "jsonEditor": "Éditer JSON",
        "undo": "Annuler",
        "redo": "Rétablir",
        "options": "Options",
        "generateValidJSON": "Générer un JSON valide",
        "generateReadableJSON": "Générer un JSON lisible",
        "toolbox": "Boîte à outils",
        "delSelObject": "Supprimer l'objet sélectionné",
        "editSelObject": "Éditer l'objet sélectionné",
        "correctJSON": "SVP corriger le JSON",
        "surveyResults": "Résultat du questionnaire : ",
        "modified": "Modifié",
        "saving": "Sauvegarde en cours",
        "saved": "Sauvegardé"
    },
    //Embed window
    "ew": {
        "angular": "Utiliser la version Angular",
        "jquery": "Utiliser la version jQuery",
        "knockout": "Utiliser la version Knockout",
        "react": "Utiliser la version React",
        "vue": "Utiliser la version Vue",
        "bootstrap": "Pour le framework Bootstrap",
        "standard": "Sans Bootstrap",
        "showOnPage": "Afficher le questionnaire dans une page",
        "showInWindow": "Afficher le questionnaire dans une fenêtre",
        "loadFromServer": "Charger le JSON du questionnaire depuis un serveur",
        "titleScript": "Scripts et styles",
        "titleHtml": "HTML",
        "titleJavaScript": "JavaScript"
    },
    //Operators
    "op": {
        "empty": "est vide",
        "notempty": "n'est pas vide",
        "equal": "égal",
        "notequal": "n'est pas égal",
        "contains": "contient",
        "notcontains": "ne contient pas",
        "greater": "supérieur",
        "less": "inférieur",
        "greaterorequal": "supérieur ou égal",
        "lessorequal": "inférieur ou égal"
    },
    //Survey
    "survey": {
        "edit": "Éditer",
        "dropQuestion": "Déposer votre question ici.",
        "copy": "Copier",
        "addToToolbox": "Ajouter à la boîte à outils",
        "deletePanel": "Supprimer le panneau",
        "deleteQuestion": "Supprimer la question",
        "convertTo": "Convertir en"
    },
    //Properties
    "p": {
        "name": "Nom",
        "title": {
            "name": "Titre",
            "title": "Laissez vide, si même texte que le \"Nom\""
        },
        "page_title": {
            "name": "titre",
            "title": "Titre de la page"
        },
        "addRowText": "Bouton ajouter une ligne",
        "cellType": "Type de cellule",
        "choices": "Choix",
        "choicesByUrl": "Choix par API",
        "choicesOrder": "Ordre des choix",
        "clearInvisibleValues": "Cacher les valeurs invisibles",
        "colCount": "Nombre de colonnes",
        "cols": "Colonnes",
        "columnColCount": "Nombre de colonnes",
        "columnMinWidth": "Largeur minimale des colonnes",
        "columns": "Colonnes",
        "commentText": "Description champ commentaire",
        "completeText": "Texte questionnaire finalisé",
        "completedHtml": "HTML questionnaire finalisé",
        "cookieName": "Nom du cookie",
        "edit": "Éditer",
        "focusFirstQuestionAutomatic": "Focus automatique sur la première question",
        "goNextPageAutomatic": "Aller à la page suivante automatiquement",
        "hasComment": "Champ commentaire ?",
        "hasOther": "Choix autre ?",
        "horizontalScroll": "Scroll horizontal",
        "imageHeight": "Hauteur de l'image",
        "imageWidth": "Largeur de l'image",
        "indent": "Indentation",
        "inputType": "Type de champ",
        "isAllRowRequired": "Toutes les lignes sont-elle obligatoires ?",
        "isRequired": "Obligatoire ?",
        "itemSize": "Nombre maximum de caractères",
        "items": "Items",
        "locale": "Langue",
        "maxRateDescription": "Description note maximum",
        "maxSize": "Taille maximum",
        "minRateDescription": "Description note minimum",
        "minRowCount": "Nombre de lignes minimal",
        "mode": "Mode d'affichage",
        "optionsCaption": "Texte par défaut",
        "otherErrorText": "Texte d'erreur champ \"autre\"",
        "otherText": {
            "name": "Text autre",
            "title": "Champ commentaire ou choix \"autre\""
        },
        "pageNextText": "Bouton page suivante",
        "pagePrevText": "Bouton page précédente",
        "placeHolder": "PlaceHolder (indice dans le champ)",
        "questionStartIndex": "Index de numérotation des questions",
        "questionTitleLocation": "Emplacement titre question",
        "questionTitleTemplate": {
            "name": "Template d'affichage des questions",
            "title": "Exemple: {no}) {title} {require}:"
        },
        "rateValues": "Barème",
        "removeRowText": "Bouton supprimer une ligne",
        "requiredText": "Texte pour les champs obligatoires",
        "rowCount": "Nombre de lignes",
        "rows": "Nombre de lignes",
        "sendResultOnPageNext": "Envoyer les résultats au changement de page",
        "showCompletedPage": "Voir la page formulaire complété ?",
        "showNavigationButtons": "Boutons de navigation",
        "showPageNumbers": "Numérotation des pages",
        "showPageTitles": "Titre des pages",
        "showPreview": "Voir la prévisualisation",
        "showProgressBar": "Barre de progression",
        "showQuestionNumbers": "Numérotation des questions",
        "showTitle": "Afficher le titre",
        "size": "Nombre maximum de caractères",
        "startWithNewLine": "Commencer avec une nouvelle ligne",
        "storeDataAsText": "Stocker les données comme du texte",
        "storeOthersAsComment": "Sauvegarder choix autre comme commentaire",
        "surveyId": "ID du questionnaire",
        "surveyPostId": "PostID questionnaire",
        "survey_title": {
            "name": "titre",
            "title": "Il sera affiché sur chaque page."
        },
        "triggers": "Déclencheurs",
        "validators": "Validateurs",
        "visibleIf": "Visible si ",
        "width": "Largeur"
    },
    "pe": {
        "apply": "Appliquer",
        "ok": "OK",
        "cancel": "Annuler",
        "reset": "Réinitialiser",
        "close": "Fermer",
        "delete": "Supprimer",
        "addNew": "Ajouter un nouveau",
        "removeAll": "Tout supprimer",
        "edit": "Éditer",
        "empty": "<vide>",
        "fastEntry": "Ajout rapide",
        "formEntry": "Ajout via formulaire",
        "testService": "Tester le service",
        "conditionSelectQuestion": "Sélectionner une question...",
        "conditionButtonAdd": "Ajouter",
        "conditionButtonReplace": "Remplacer",
        "conditionHelp": "Veuillez entrer une expression booléenne. Elle doit retourner Vrai(true) pour garder la question/page visible. Par exemple: {question1} = \"valeur1\" or ({question2} = 3 and {question3} < 5)",
        "expressionHelp": "Veuillez entrer une expression. Vous pouvez utiliser des accolades pour accéder aux valeurs des questions '{question1} + {question2}', '({prix}*{quantite}) * (100 - {remise})'",
        "aceEditorHelp": "Appuyer sur Ctrl + espace pour obtenir une aide pour la saisie d'expression",
        "aceEditorRowTitle": "Ligne courante",
        "aceEditorPanelTitle": "Panneau courant",
        "showMore": "Pour plus d'informations, veuillez vous référer à la documentation",
        "assistantTitle": "Questions disponibles :",
        "propertyIsEmpty": "Veuillez entrer une valeur pour la propriété",
        "value": "Valeur",
        "text": "Texte",
        "required": "Obligatoire ?",
        "columnEdit": "Éditer la colonne: {0}",
        "itemEdit": "Éditer l'item: {0}",
        "url": "URL",
        "path": "Chemin",
        "valueName": "Nom de la valeur",
        "titleName": "Nom du titre",
        "hasOther": "Contient un autre item",
        "otherText": "Autre item texte",
        "name": "Nom",
        "title": "Titre",
        "cellType": "Type de cellule",
        "colCount": "Nombre de colonnes",
        "choicesOrder": "Sélectionner l'ordre des choix",
        "visible": "Est visible ?",
        "isRequired": "Est obligatoire ?",
        "startWithNewLine": "Commencer avec une nouvelle ligne ?",
        "rows": "Nombre de lignes",
        "placeHolder": "PlaceHolder (indice dans le champ)",
        "showPreview": "L'aperçu d'image est-il affiché ?",
        "storeDataAsText": "Stocker le contenu du fichier dans le résultat JSON sous forme de texte",
        "maxSize": "Taille maximum du fichier en octets",
        "imageHeight": "Hauteur de l'image",
        "imageWidth": "Largeur de l'image",
        "rowCount": "Nombre de lignes",
        "addRowText": "Texte bouton \"Ajouter une ligne\"",
        "removeRowText": "Texte bouton \"Supprimer une ligne\"",
        "minRateDescription": "Description note minimum",
        "maxRateDescription": "Description note maximum",
        "inputType": "Type de champ",
        "optionsCaption": "Texte par défaut",
        "defaultValue": "Valeur par défaut",
        "surveyEditorTitle": "Éditer les préférences du questionnaire",
        "qEditorTitle": "Éditer la question: {0}",
        "showTitle": "Afficher/cacher le titre",
        "locale": "Langue par défaut",
        "mode": "Mode (édition/lecture seule)",
        "clearInvisibleValues": "Effacer les valeurs invisibles",
        "cookieName": "Nom du cookie (pour empêcher de compléter 2 fois le questionnaire localement)",
        "sendResultOnPageNext": "Envoyer les résultats au changement de page",
        "storeOthersAsComment": "Sauvegarder la valeur \"Autres\" dans un champ séparé",
        "showPageTitles": "Afficher les titres de pages",
        "showPageNumbers": "Afficher les numéros de pages",
        "pagePrevText": "Texte bouton page précédente",
        "pageNextText": "Texte bouton page suivante",
        "completeText": "Texte bouton terminer",
        "startSurveyText": "Texte bouton commencer",
        "showNavigationButtons": "Afficher les boutons de navigation (navigation par défaut)",
        "showPrevButton": "Afficher le bouton précédent (l'utilisateur pourra retourner sur la page précédente)",
        "firstPageIsStarted": "La première page du questionnaire est une page de démarrage.",
        "showCompletedPage": "Afficher la page \"terminé\" à la fin (completedHtml)",
        "goNextPageAutomatic": "Aller à la page suivante automatiquement pour toutes les questions",
        "showProgressBar": "Afficher la barre de progression",
        "questionTitleLocation": "Emplacement du titre de la question",
        "requiredText": "La question requiert un/des symbole(s)",
        "questionStartIndex": "Index de départ de la question (1, 2 ou 'A', 'a')",
        "showQuestionNumbers": "Afficher les numéros de questions",
        "questionTitleTemplate": "Gabarit du titre de question, par défaut : '{no}. {require} {title}'",
        "questionErrorLocation": "Emplacement de l'erreur",
        "focusFirstQuestionAutomatic": "Focus sur la première question au changement de page",
        "questionsOrder": "Ordre des éléments sur la page",
        "maxTimeToFinish": "Temps maximum pour terminer le questionnaire",
        "maxTimeToFinishPage": "Temps maximum pour terminer une page",
        "showTimerPanel": "Afficher le panneau chronomètre",
        "showTimerPanelMode": "Mode d'affichage du panneau chronomètre",
        "renderMode": "Mode de rendu",
        "allowAddPanel": "Autoriser l'ajout du panneau",
        "allowRemovePanel": "Autoriser la suppression du panneau",
        "panelAddText": "Ajouter un panneau texte",
        "panelRemoveText": "Supprimer le panneau texte",
        "isSinglePage": "Afficher tous les éléments sur une seule page",
        "tabs": {
            "general": "Général",
            "fileOptions": "Options",
            "html": "Éditeur HTML",
            "columns": "Colonnes",
            "rows": "Lignes",
            "choices": "Choix",
            "visibleIf": "Visible si",
            "enableIf": "Actif si",
            "rateValues": "Barème",
            "choicesByUrl": "Choix depuis API web",
            "matrixChoices": "Choix par défaut",
            "multipleTextItems": "Champs texte multiples",
            "validators": "Validateurs",
            "navigation": "Navigation",
            "question": "Question",
            "completedHtml": "HTML de fin",
            "loadingHtml": "HTML de chargement",
            "timer": "Chronomètre/Quiz",
            "triggers": "Déclencheurs",
            "templateTitle": "Titre de gabarit"
        },
        "editProperty": "Éditer la propriété \"{0}\"",
        "items": "[ Élements: {0} ]",
        "enterNewValue": "Veuillez saisir la valeur.",
        "noquestions": "Il n'y a aucune question dans le questionnaire.",
        "createtrigger": "Veuillez créer un déclencheur",
        "triggerOn": "Quand ",
        "triggerMakePagesVisible": "Rendre les pages visibles :",
        "triggerMakeQuestionsVisible": "Rendre les questions visibles :",
        "triggerCompleteText": "Terminer le questionnaire en cas de succès.",
        "triggerNotSet": "Le déclencheur n'est pas défini",
        "triggerRunIf": "Exécuter si",
        "triggerSetToName": "Changer la valeur de: ",
        "triggerSetValue": "à: ",
        "triggerIsVariable": "Ne placez pas la variable dans le résultat du questionnaire.",
        "verbChangePage": "Changer de page ",
        "verbChangeType": "Changer le type "
    },
    //questionTypes
    "qt": {
        "checkbox": "Cases à cocher",
        "comment": "Commentaire",
        "dropdown": "Liste déroulante",
        "file": "Fichier",
        "html": "HTML",
        "matrix": "Matrice (choix unique)",
        "matrixdropdown": "Matrice (choix multiples)",
        "matrixdynamic": "Matrice (lignes dynamiques)",
        "multipletext": "Champ multilignes",
        "panel": "Panneau",
        "paneldynamic": "Panneau (panneaux dynamiques)",
        "radiogroup": "Boutons radio",
        "rating": "Évaluation",
        "text": "Champ texte",
        "boolean": "Booléen",
        "expression": "Expression"
    },
    //property values
    "pv": {
        "true": "true",
        "false": "false",
        "ar": "العربية",
        "ca": "català",
        "cz": "čeština",
        "da": "dansk",
        "de": "deutsch",
        "en": "english",
        "es": "español",
        "fa": "فارْسِى",
        "fi": "suomalainen",
        "fr": "français",
        "gr": "ελληνικά",
        "he": "עברית",
        "hu": "magyar",
        "it": "italiano",
        "is": "íslenska",
        "ka": "ქართული",
        "lv": "latviešu",
        "nl": "hollandsk",
        "pl": "polski",
        "pt": "português",
        "ro": "română",
        "ru": "русский",
        "sv": "svenska",
        "tr": "türkçe",
        "zh-cn": "简体中文"
    },
    //test
    "ts": {
        "selectPage": "Sélectionner une page pour la tester"
    },
    //validators
    "validators": {
        "answercountvalidator": "total de réponses",
        "emailvalidator": "e-mail",
        "numericvalidator": "numérique",
        "regexvalidator": "regex",
        "textvalidator": "texte"
    },
    // triggers
    "triggers": {
        "completetrigger": "terminer le questionnaire",
        "setvaluetrigger": "définir la valeur",
        "visibletrigger": "modifier la visibilité"
    }
};
__WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].locales["fr"] = frenchTranslation;


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(0);

var italianTranslation = {
    // strings for survey templates
    survey: {
        dropQuestion: "Aggiungi una domanda qui",
        copy: "Copia",
        addToToolbox: "Aggiungi alla toolbox",
        deletePanel: "Elimina pannello",
        deleteQuestion: "Elimina domanda"
    },
    // strings for question types
    qt: {
        checkbox: "Casella di controllo ",
        comment: "Commento",
        dropdown: "Combo",
        file: "Archivio",
        html: "Html",
        matrix: "Matrice (unica opzione)",
        matrixdropdown: "Matrice (opzioni multiple)",
        matrixdynamic: "Matrice (dinamica)",
        multipletext: "Testo multiplo",
        panel: "Pannello",
        radiogroup: "Opzione multipla",
        rating: "Valutazione",
        text: "Testo semplice"
    },
    // strings for editor
    ed: {
        addNewPage: "Aggiungi nuova pagina",
        newPageName: "pagina",
        newQuestionName: "domanda",
        newPanelName: "pannello",
        testSurvey: "Testa questionario",
        testSurveyAgain: "Testa questionario di nuovo",
        testSurveyWidth: "Testa questionario con: ",
        embedSurvey: "Includi questionario",
        saveSurvey: "Salva questionario",
        designer: "Disegna",
        jsonEditor: "Modifica JSON",
        undo: "Annulla",
        redo: "Ripeti",
        options: "Opzioni",
        generateValidJSON: "Genera JSON valido",
        generateReadableJSON: "Genera JSON leggibile",
        toolbox: "Strumenti",
        delSelObject: "Elimina oggetto selezionato",
        correctJSON: "Per favore, correggi il tuo JSON",
        surveyResults: "Risultati del questionario: "
    },
    // strings for property editors
    pe: {
        apply: "Applica",
        ok: "Accetta",
        cancel: "Annulla",
        reset: "Reimposta",
        close: "Chiudi",
        delete: "Elimina",
        addNew: "Nuovo",
        removeAll: "Elimina tutto",
        edit: "Modifica",
        empty: "<vuoto>",
        fastEntry: "Inserimento rapido",
        formEntry: "Inserimento con dati ",
        testService: "Test del servizio",
        expressionHelp: "Per favore, inserire una espressione booleana. Ad esempio: {domanda1} = 'valore1' or ({domanda2} = 3 and {domanda3} < 5)",
        propertyIsEmpty: "Per favore, inserire un valore per la propietà",
        value: "Valore",
        text: "Testo",
        required: "Richiesto",
        columnEdit: "Modifica colonna: {0}",
        itemEdit: "Modifica elemento: {0}",
        hasOther: "Altri elementi",
        name: "Nome",
        title: "Titolo",
        cellType: "Tipo di cella",
        colCount: "Numero di colonne",
        choicesOrder: "Seleziona altre opzioni",
        visible: "Visibile",
        isRequired: "Richiesto",
        startWithNewLine: "Nuova linea",
        rows: "Numero di righe",
        placeHolder: "Testo di riferimento",
        showPreview: "Mostra anteprima",
        storeDataAsText: "Vedi il contenuto JSON come testo",
        maxSize: "Dimensione massima in bytes",
        imageHeight: "Altezza",
        imageWidth: "Larghezza",
        rowCount: "Numero delle righe",
        addRowText: "Testo del pulsante per aggiungere una nuova righa",
        removeRowText: "Testo del pulsante per eliminare una righa",
        minRateDescription: "Descrizione del valore minimo",
        maxRateDescription: "Descrizione del valore massimo",
        inputType: "Tipo di inserimento",
        optionsCaption: "Titolo dell'opzione",
        qEditorTitle: "Modifica domanda: {0}",
        tabs: {
            general: "Generale",
            fileOptions: "Opzioni",
            html: "Modifica Html",
            columns: "Colonne",
            rows: "Righe",
            choices: "Scelte",
            visibleIf: "Visibile se",
            rateValues: "Volori della classifica",
            choicesByUrl: "Opzioni dal Web",
            matrixChoices: "Opzioni predefinite",
            multipleTextItems: "Voci di testo",
            validators: "Validazioni"
        },
        editProperty: "Modifca propietà '{0}'",
        items: "[ Elemento: {0} ]",
        enterNewValue: "Si prega di inserire il valore.",
        noquestions: "Non c'è alcun dubbio nel questionario.",
        createtrigger: "Si prega di creare un trigger",
        triggerOn: "Attivazione ",
        triggerMakePagesVisible: "Rendere visibili le pagine:",
        triggerMakeQuestionsVisible: "Rendere visibili le domande:",
        triggerCompleteText: "Completare il questionario, in caso di successo.",
        triggerNotSet: "Non impostato",
        triggerRunIf: "Esegui se",
        triggerSetToName: "Cambia il valore a: ",
        triggerSetValue: "a: ",
        triggerIsVariable: "Non posizionare la variabile del risultato del questionario",
        verbChangeType: "Cambia tipo ",
        verbChangePage: "Cambia pagina "
    },
    // strings for operators
    op: {
        empty: "è vuoto",
        notempty: "non è vuoto ",
        equal: "è uguale a",
        notequal: "non è uguale a",
        contains: "contiene",
        notcontains: "non contiene",
        greater: "maggiore",
        less: "minore",
        greaterorequal: "maggiore o uguale",
        lessorequal: "minore o uguale"
    },
    // strings for embed window
    ew: {
        angular: "Versione per Angular",
        jquery: "Versione per jQuery",
        knockout: "Versione per Knockout",
        react: "Versione per React",
        vue: "Versione per Vue",
        bootstrap: "Per framework bootstrap",
        standard: "No bootstrap",
        showOnPage: "Visualizza in questa pagina",
        showInWindow: "Visualizza in una finestra",
        loadFromServer: "Carica JSON dal server",
        titleScript: "Scripts e stili",
        titleHtml: "HTML",
        titleJavaScript: "JavaScript"
    },
    // strings of properties
    p: {
        name: "nome",
        title: {
            name: "titolo",
            title: "Lascia vuoto se è lo stesso di 'Nome'"
        },
        survey_title: {
            name: "titolo",
            title: "Visualizzato in ogni pagina."
        },
        page_title: {
            name: "titolo",
            title: "Titolo della pagina"
        },
        indent: "rientro",
        inputType: "tipo di inserimento",
        isRequired: "richiesto",
        placeHolder: "testo di riferimento",
        size: "numero massimo di caratteri",
        readOnly: "sola lettura"
    }
};
__WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].locales["it"] = italianTranslation;


/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(0);

var persianStrings = {
    //survey templates
    survey: {
        edit: "ویرایش",
        dropQuestion: "لطفا از جعبه ابزار سوالی در اینجا قرار دهید",
        copy: "کپی",
        addToToolbox: "افزودن به جعبه ابزار",
        deletePanel: "حذف پنل",
        deleteQuestion: "حذف سوال",
        convertTo: "تبدیل به"
    },
    //questionTypes
    qt: {
        checkbox: "چند انتخابی",
        comment: "نظر",
        dropdown: "لیست انتخابی",
        file: "فایل",
        html: "Html",
        matrix: "ماتریس (تک انتخابی)",
        matrixdropdown: "ماتریس (چند انتخابی)",
        matrixdynamic: "ماتریس (سطرهای داینامیک)",
        multipletext: "متن چند خطی",
        panel: "پنل",
        paneldynamic: "پنل (پنل های داینامیک)",
        radiogroup: "تک انتخابی",
        rating: "رتبه بندی",
        text: "متن تک خطی",
        boolean: "صحیح و غلط",
        expression: "توصیفی"
    },
    //Strings in Editor
    ed: {
        survey: "نظرسنجی",
        editSurvey: "ویرایش نظرسنجی",
        addNewPage: "درج صفحه جدید",
        deletePage: "حذف صفحه",
        editPage: "ویرایش صفحه",
        newPageName: "صفحه",
        newQuestionName: "سوال",
        newPanelName: "پنل",
        testSurvey: "پیش نمایش",
        testSurveyAgain: "پیش نمایش مجدد",
        testSurveyWidth: "عرض پرسشنامه: ",
        embedSurvey: "کد پرسشنامه",
        saveSurvey: "ذخیره نظرسنجی",
        designer: "طراح پرسشنامه",
        jsonEditor: "ویرایشگر JSON",
        undo: "بازگردانی",
        redo: "بازانجام",
        options: "انتخاب ها",
        generateValidJSON: "تولید کد معتبر JSON",
        generateReadableJSON: "تولید کد خوانا JSON",
        toolbox: "جعبه ابزار",
        delSelObject: "حذف مورد انتخابی",
        editSelObject: "ویرایش مورد انتخابی",
        correctJSON: "کد JSON را تصحیح کنید",
        surveyResults: "نتایج نظرسنجی: ",
        modified: "تغییر داده شده",
        saving: "در حال ذخیره سازی",
        saved: "ذخیره شد"
    },
    //Property Editors
    pe: {
        apply: "اعمال",
        ok: "تایید",
        cancel: "لغو",
        reset: "بازنشانی",
        close: "بستن",
        delete: "حذف",
        addNew: "افزودن",
        removeAll: "حذف همه",
        edit: "ویرایش",
        empty: "<خالی>",
        fastEntry: "تکمیل سریع",
        formEntry: "تکمیل فرم",
        testService: "بررسی سرویس",
        conditionHelp: "لطفا یک مقدار بولین توصیفی وارد کنید که صحیح یا غلط را برگرداند تا صفحه سوالات نمایش داده شود. برای مثال: {question1} = 'value1' or ({question2} * {question4}  > 20 and {question3} < 5)",
        expressionHelp: "لطفا یک عبارت توصیفی را وارد کنید. شما ممکن است از کروشه برای دسترسی به مقدار سوالات استفاده کنید. برای مثال: {question1} = 'value1' or ({question2} = 3 and {question3} < 5)",
        aceEditorHelp: "برای مشاهده نکات تکمیلی ctrl+space را بفشارید",
        aceEditorRowTitle: "سطر فعلی",
        aceEditorPanelTitle: "پنل فعلی",
        showMore: "برای اطلاعات بیشتر لطفا سند راهنما را مطالعه کنید",
        assistantTitle: "سوالات موجود:",
        propertyIsEmpty: "لطفا یک مقدار وارد کنید",
        value: "مقدار",
        text: "متن",
        required: "اجباری؟",
        columnEdit: "ویرایش ستون: {0}",
        itemEdit: "ویرایش آیتم: {0}",
        url: "URL",
        path: "Path",
        valueName: "نام مقدار",
        titleName: "نام عنوان",
        hasOther: "دارای آیتم دیگر",
        name: "نام",
        title: "عنوان",
        cellType: "نوع سلول",
        colCount: "تعداد ستون",
        choicesOrder: "ترتیب گزینه را انتخاب کنید",
        visible: "نمایش داده شود؟",
        isRequired: "ضروری است؟",
        startWithNewLine: "با سطر جدید شروع شود؟",
        rows: "تعداد سطر",
        placeHolder: "نگهدارنده متن",
        showPreview: "پیش نمایش تصویر نشان داده شود؟",
        storeDataAsText: "ذخیره کردن محتوای فایل در JSON به عنوان متن",
        maxSize: "حداکثر سایز به بایت",
        imageHeight: "ارتفاع تصویر",
        imageWidth: "عرض تصویر",
        rowCount: "تعداد سطر",
        addRowText: "متن دکمه درج سطر",
        removeRowText: "متن دکمه حذف سطر",
        minRateDescription: "توضیح حداقل امتیاز",
        maxRateDescription: "توضیح حداکثر امتیاز",
        inputType: "نوع ورودی",
        optionsCaption: "نوشته انتخاب ها",
        defaultValue: "مقدار پیش فرض",
        surveyEditorTitle: "ویرایش نظرسنجی",
        qEditorTitle: "ویرایش سوال: {0}",
        //survey
        showTitle: "نمایش/پنهان کردن عنوان",
        locale: "زبان پیش فرض",
        mode: "حالت (ویرایش/خواندن)",
        clearInvisibleValues: "پاکسازی مقادیر پنهان",
        cookieName: "نام کوکی (به منظور جلوگیری از اجرای دوباره نظرسنجی)",
        sendResultOnPageNext: "ارسال نتایج نظرسنجی در صفحه بعدی",
        storeOthersAsComment: "ذخیره مقدار 'سایر' در فیلد جداگانه",
        showPageTitles: "نمایش عنوان صفحات",
        showPageNumbers: "نمایش شماره صفحات",
        pagePrevText: "متن دکمه صفحه قبلی",
        pageNextText: "متن دکمه صفحه بعدی",
        completeText: "متن دکمه تکمیل نظرسنجی",
        startSurveyText: "متن دکمه شروع نظرسنجی",
        showNavigationButtons: "نمایش دکمه های ناوبری (ناوبری پیش فرض)",
        showPrevButton: "نمایش دکمه قبلی (کاربر ممکن است به صفحه قبل برگردد)",
        firstPageIsStarted: "صفحه اول در نظرسنجی نقطه آغازین آن است.",
        showCompletedPage: "نمایش صفحه اتمام نظرسنجی در پایان (completedHtml)",
        goNextPageAutomatic: "با پاسخگویی به تمام سوالات، به صورت اتوماتیک به صفحه بعد برود",
        showProgressBar: "نمایش نشانگر پیشرفت",
        questionTitleLocation: "محل عنوان سوال",
        requiredText: "سوالات نشان دار اجباری هستند",
        questionStartIndex: "نمایه شروع سوالات (۱،۲ یا a و b)",
        showQuestionNumbers: "نمایش شماره های سوالات",
        questionTitleTemplate: "قالب عنوان سوال، به صورت پیش فرض: '{no}. {require} {title}'",
        questionErrorLocation: "محل خطای سوال",
        focusFirstQuestionAutomatic: "تمرکز بر روی اولین سوال با تغییر صفحه",
        questionsOrder: "ترتیب المان ها در صفحه",
        maxTimeToFinish: "نهایت زمان برای اتمام نظرسنجی",
        maxTimeToFinishPage: "نهایت زمان برای اتمام این صفحه نظرسنجی",
        showTimerPanel: "نمایش پنل زمان سنج",
        showTimerPanelMode: "نمایش حالت پنل زمان سنج",
        renderMode: "حالت رندر",
        allowAddPanel: "اجازه افزودن پنل",
        allowRemovePanel: "اجازه حذف پنل",
        panelAddText: "متن افزودن پنل",
        panelRemoveText: "متن حذف پنل",
        isSinglePage: "نمایش تمام المان ها در یک صفحه",
        tabs: {
            general: "عمومی",
            fileOptions: "انتخاب ها",
            html: "ویرایشگر HTML",
            columns: "ستون ها",
            rows: "سطرها",
            choices: "انتخاب ها",
            visibleIf: "نمایش در صورت",
            rateValues: "مقادیر رتبه بندی",
            choicesByUrl: "انتخاب ها از وب",
            matrixChoices: "انتخاب های پیشفرض",
            multipleTextItems: "فیلدهای متنی",
            validators: "اعتبارسنجی ها",
            navigation: "ناوبری",
            question: "سوال",
            completedHtml: "HTML صفحه تکمیل نظرسنجی",
            loadingHtml: "HTML بارگزاری",
            timer: "زمان سنج/کوئیز",
            triggers: "اجرا کننده",
            templateTitle: "عنوان قالب"
        },
        editProperty: "ویرایش خصوصیت '{0}'",
        items: "[ آیتم ها: {0} ]",
        enterNewValue: "لطفا یک مقدار وارد کنید",
        noquestions: "سوالی در پرسشنامه درج نشده",
        createtrigger: "اجرا کننده ای بسازید",
        triggerOn: "در ",
        triggerMakePagesVisible: "صفحات را قابل نمایش کن:",
        triggerMakeQuestionsVisible: "سوالات را قابل نمایش کن:",
        triggerCompleteText: "پرسشنامه را تکمیل کن اگر موفق بود.",
        triggerNotSet: "اجرا کننده تنظیم نشده.",
        triggerRunIf: "اجرا در صورت",
        triggerSetToName: "تعییر مقدار از: ",
        triggerSetValue: "به: ",
        triggerIsVariable: "عدم درج متغییر در نتایج پرسشنامه",
        verbChangeType: "تغییر نوع ",
        verbChangePage: "تغییر صفحه "
    },
    //Property values
    pv: {
        true: "صحیح",
        false: "نادرست",
        ar: "العربية",
        cz: "čeština",
        da: "dansk",
        de: "deutsch",
        en: "english",
        es: "español",
        fi: "suomalainen",
        fr: "français",
        gr: "ελληνικά",
        it: "italiano",
        is: "íslenska",
        nl: "hollandsk",
        pl: "polski",
        pt: "português",
        ro: "română",
        ru: "русский",
        sv: "svenska",
        tr: "türkçe",
        zh_cn: "简体中文"
    },
    //Operators
    op: {
        empty: "خالی باشد",
        notempty: "خالی نباشد",
        equal: "مساوی باشد",
        notequal: "مساوی نباشد",
        contains: "شامل",
        notcontains: "شامل نباشد",
        greater: "بزرگتر",
        less: "کوچکتر",
        greaterorequal: "بزرگتر یا مساوی",
        lessorequal: "کوچکتر یا مساوی"
    },
    //Embed window
    ew: {
        angular: "استفاده از نسخه Angular",
        jquery: "استفاده از نسخه jQuery",
        knockout: "استفاده از نسخه ناک اوت",
        react: "استفاده از نسخه React",
        vue: "استفاده از نسخه Vue",
        bootstrap: "برای فریم ورک بوتسترپ",
        standard: "بدون بوتسترپ",
        showOnPage: "نمایش نظرسنجی در یک صفحه",
        showInWindow: "نمایش نظرسنجی در یک پنجره",
        loadFromServer: "بارگزاری JSON از سرور",
        titleScript: "اسکریپت و شیوه نمایش",
        titleHtml: "HTML",
        titleJavaScript: "جاوااسکریپت"
    },
    //Test Survey
    ts: {
        selectPage: "صفحه ای را برای آزمایش انتخاب کنید:"
    },
    validators: {
        answercountvalidator: "تعداد پاسخ",
        emailvalidator: "ایمیل",
        numericvalidator: "عدد",
        regexvalidator: "regex",
        textvalidator: "متن"
    },
    triggers: {
        completetrigger: "تکمیل نظرسنجی",
        setvaluetrigger: "تنظیم مقدار",
        visibletrigger: "تغییر وضعیت دیده شدن"
    },
    //Properties
    p: {
        name: "نام",
        title: { name: "عنوان", title: "اگر خالی باشد مانند نام درج می شود" },
        survey_title: { name: "عنوان", title: "در تمام صفحات دیده می شود" },
        page_title: { name: "عنوان", title: "عنوان صفحه" }
    }
};
__WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].locales["fa"] = persianStrings;


/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(0);

var polishStrings = {
    //survey templates
    survey: {
        edit: "Edytuj",
        dropQuestion: "Przeciągnij pytanie.",
        copy: "Kopiuj",
        addToToolbox: "Dodaj do palety",
        deletePanel: "Usuń panel",
        deleteQuestion: "Usuń pytanie",
        convertTo: "Konwertuj na"
    },
    //questionTypes
    qt: {
        checkbox: "Wielokrotny wybór",
        comment: "Komentarz",
        dropdown: "Lista wyboru",
        file: "Plik",
        html: "Html",
        matrix: "Macierz (jednokrotny wybór)",
        matrixdropdown: "Matrix (wielokrotny wybór)",
        matrixdynamic: "Matrix (dynamiczne wiersze)",
        multipletext: "Wiele linii tekstu",
        panel: "Panel",
        paneldynamic: "Panel (dynamiczne panele)",
        radiogroup: "Jednokrotny wybór",
        rating: "Ocena",
        text: "Pojedyncza odpowiedź",
        boolean: "Prawda/Fałsz",
        expression: "Wyrażenie"
    },
    //Strings in Editor
    ed: {
        survey: "Ankieta",
        Survey: "Ankieta",
        editSurvey: "Edytuj ankietę",
        addNewPage: "Dodaj nową sekcję",
        deletePage: "Usuń sekcję",
        editPage: "Edytuj sekcję",
        newPageName: "sekcja",
        newQuestionName: "pytanie",
        newPanelName: "panel",
        testSurvey: "Testuj ankietę",
        testSurveyAgain: "Testuj ponownie",
        testSurveyWidth: "Szerokość ankiety: ",
        embedSurvey: "Embed Survey",
        saveSurvey: "Zapisz ankietę",
        designer: "Projektant ankiety",
        jsonEditor: "JSON Editor",
        undo: "Cofnij",
        redo: "Ponów",
        options: "Opcje",
        generateValidJSON: "Generate Valid JSON",
        generateReadableJSON: "Generate Readable JSON",
        toolbox: "Paleta",
        delSelObject: "Usuń wybrany element",
        correctJSON: "Please correct JSON.",
        surveyResults: "Wynik ankiety: ",
        modified: "Zmodyfikowana",
        saving: "Trwa zapis",
        saved: "Zapisano"
    },
    //Property Editors
    pe: {
        apply: "Zastosuj",
        ok: "OK",
        cancel: "Anuluj",
        reset: "Resetuj",
        close: "Zamknij",
        delete: "Usuń",
        addNew: "Dodaj nową",
        removeAll: "Usuń wszystkie",
        edit: "Edytuj",
        empty: "<pusty>",
        fastEntry: "Szybkie wprowadzanie",
        formEntry: "Formularz",
        testService: "Testuj usługę",
        conditionHelp: "Podaj wyrażenie, które zwróci wartość prawda/fałsz. Jeśli chcesz, aby sekcja lub pytanie pozostały widoczne - powinno zwrócić prawdę. Przykład: {pytanie1} = 'wartość1' or ({pytanie2} * {pytanie4}  > 20 and {pytanie3} < 5)",
        expressionHelp: "Please enter an expression. You may use curly brackets to get access to the question values: '{question1} + {question2}', '({price}*{quantity}) * (100 - {discount})'",
        aceEditorHelp: "Press ctrl+space to get expression completion hint",
        aceEditorRowTitle: "Current row",
        aceEditorPanelTitle: "Current panel",
        showMore: "For more details please check the documentation",
        assistantTitle: "Available questions:",
        propertyIsEmpty: "Podaj wartość",
        value: "Wartość",
        text: "Etykieta",
        required: "Wymagane?",
        columnEdit: "Edit column: {0}",
        itemEdit: "Edit item: {0}",
        url: "URL",
        path: "Path",
        valueName: "Value name",
        titleName: "Title name",
        hasOther: "Czy możliwa własna odpowiedź",
        otherText: "Other item text",
        name: "Nazwa",
        title: "Etykieta",
        cellType: "Typ komórki",
        colCount: "Liczba kolumn",
        choicesOrder: "Kolejność odpowiedzi",
        visible: "Czy widoczne?",
        isRequired: "Czy wymagalne?",
        startWithNewLine: "Czy rozpoczyna się nową linią?",
        rows: "Liczba wierszy",
        placeHolder: "Input place holder",
        showPreview: "Is image preview shown?",
        storeDataAsText: "Store file content in JSON result as text",
        maxSize: "Maximum file size in bytes",
        imageHeight: "Image height",
        imageWidth: "Image width",
        rowCount: "Row count",
        addRowText: "Add row button text",
        removeRowText: "Remove row button text",
        minRateDescription: "Opis najniższej oceny",
        maxRateDescription: "Opis najwyższej oceny",
        inputType: "Input type",
        optionsCaption: "Options caption",
        defaultValue: "Default value",
        surveyEditorTitle: "Edytuj ankietę",
        qEditorTitle: "Edytuj: {0}",
        //survey
        showTitle: "Pokaż/ukryj tytuł",
        locale: "Domyślny język",
        mode: "Tryb (edycja/podgląd)",
        clearInvisibleValues: "Usuń niewidoczne odpowiedzi",
        cookieName: "Cookie name (to disable run survey two times locally)",
        sendResultOnPageNext: "Send survey results on page next",
        storeOthersAsComment: "Store 'others' value in separate field",
        showPageTitles: "Show page titles",
        showPageNumbers: "Show page numbers",
        pagePrevText: "Page previous button text",
        pageNextText: "Page next button text",
        completeText: "Complete button text",
        startSurveyText: "Start button text",
        showNavigationButtons: "Show navigation buttons (default navigation)",
        showPrevButton: "Show previous button (user may return on previous page)",
        firstPageIsStarted: "The first page in the survey is a started page.",
        showCompletedPage: "Show the completed page at the end (completedHtml)",
        goNextPageAutomatic: "On answering all questions, go to the next page automatically",
        showProgressBar: "Show progress bar",
        questionTitleLocation: "Question title location",
        requiredText: "The question required symbol(s)",
        questionStartIndex: "Question start index (1, 2 or 'A', 'a')",
        showQuestionNumbers: "Show question numbers",
        questionTitleTemplate: "Question title template, default is: '{no}. {require} {title}'",
        questionErrorLocation: "Question error location",
        focusFirstQuestionAutomatic: "Focus first question on changing the page",
        questionsOrder: "Elements order on the page",
        maxTimeToFinish: "Maximum time to finish the survey",
        maxTimeToFinishPage: "Maximum time to finish a page in the survey",
        showTimerPanel: "Show timer panel",
        showTimerPanelMode: "Show timer panel mode",
        renderMode: "Render mode",
        allowAddPanel: "Allow adding a panel",
        allowRemovePanel: "Allow removing the panel",
        panelAddText: "Adding panel text",
        panelRemoveText: "Removing panel text",
        isSinglePage: "Show all elements on one page",
        tabs: {
            general: "Ogólne",
            fileOptions: "Options",
            html: "Html Editor",
            columns: "Kolumny",
            rows: "Wiersze",
            choices: "Odpowiedzi",
            visibleIf: "Widoczne jeśli",
            enableIf: "Enable If",
            rateValues: "Wartość oceny",
            choicesByUrl: "Odpowiedzi z webserwisu",
            matrixChoices: "Default Choices",
            multipleTextItems: "Text Inputs",
            validators: "Validators",
            navigation: "Navigation",
            question: "Question",
            completedHtml: "Completed Html",
            loadingHtml: "Loading Html",
            timer: "Timer/Quiz",
            triggers: "Triggers",
            templateTitle: "Template title"
        },
        editProperty: "Edit property '{0}'",
        items: "[ Items: {0} ]",
        enterNewValue: "Please, enter the value.",
        noquestions: "There is no any question in the survey.",
        createtrigger: "Please create a trigger",
        triggerOn: "On ",
        triggerMakePagesVisible: "Make pages visible:",
        triggerMakeQuestionsVisible: "Make elements visible:",
        triggerCompleteText: "Complete the survey if succeed.",
        triggerNotSet: "The trigger is not set",
        triggerRunIf: "Run if",
        triggerSetToName: "Change value of: ",
        triggerSetValue: "to: ",
        triggerIsVariable: "Do not put the variable into the survey result."
    },
    //Property values
    pv: {
        true: "prawda",
        false: "fałsz",
        ar: "العربية",
        ca: "català",
        cz: "čeština",
        da: "dansk",
        de: "deutsch",
        en: "english",
        es: "español",
        fa: "فارْسِى",
        fi: "suomalainen",
        fr: "français",
        gr: "ελληνικά",
        he: "עברית",
        hu: "magyar",
        it: "italiano",
        is: "íslenska",
        ka: "ქართული",
        lv: "latviešu",
        nl: "hollandsk",
        pl: "polski",
        pt: "português",
        ro: "română",
        ru: "русский",
        sv: "svenska",
        tr: "türkçe",
        "zh-cn": "简体中文"
    },
    //Operators
    op: {
        empty: "is empty",
        notempty: "is not empty",
        equal: "equals",
        notequal: "not equals",
        contains: "contains",
        notcontains: "not contains",
        greater: "greater",
        less: "less",
        greaterorequal: "greater or equals",
        lessorequal: "Less or Equals"
    },
    //Embed window
    ew: {
        angular: "Use Angular version",
        jquery: "Use jQuery version",
        knockout: "Use Knockout version",
        react: "Use React version",
        vue: "Use Vue version",
        bootstrap: "For bootstrap framework",
        standard: "No bootstrap",
        showOnPage: "Show survey on a page",
        showInWindow: "Show survey in a window",
        loadFromServer: "Load Survey JSON from server",
        titleScript: "Scripts and styles",
        titleHtml: "HTML",
        titleJavaScript: "JavaScript"
    },
    //Test Survey
    ts: {
        selectPage: "Wybierz stronę, aby ją przetestować:"
    },
    validators: {
        answercountvalidator: "answer count",
        emailvalidator: "e-mail",
        numericvalidator: "numeric",
        regexvalidator: "regex",
        textvalidator: "text"
    },
    triggers: {
        completetrigger: "complete survey",
        setvaluetrigger: "set value",
        visibletrigger: "change visibility"
    },
    //Properties
    p: {
        name: "nazwa",
        title: {
            name: "tytuł",
            title: "Pozostaw pusty, jeśli ma być taki sam, jak 'Nazwa'"
        },
        page_title: { name: "tytuł", title: "Tytuł sekcji" }
    }
};
__WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].locales["pl"] = polishStrings;


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(0);

var portugueseTranslation = {
    //survey templates
    survey: {
        dropQuestion: "Por favor arraste uma pergunta aqui.",
        copy: "Copiar",
        addToToolbox: "Adicionar à toolbox",
        deletePanel: "Remover Painel",
        deleteQuestion: "Remover Pergunta"
    },
    //questionTypes
    qt: {
        checkbox: "Checkbox",
        comment: "Comentário",
        dropdown: "Dropdown",
        file: "Arquivo",
        html: "Html",
        matrix: "Matriz (opção única)",
        matrixdropdown: "Matriz (multiplas opções)",
        matrixdynamic: "Matriz (linhas dinâmicas)",
        multipletext: "Texto múltiplo",
        panel: "Painel",
        radiogroup: "Radiogroup",
        rating: "Rating",
        text: "Texto único"
    },
    //Strings in Editor
    ed: {
        addNewPage: "Adicionar Nova Página",
        newPageName: "página",
        newQuestionName: "pergunta",
        newPanelName: "painel",
        testSurvey: "Testar pesquisa",
        testSurveyAgain: "Testar pesquisa novamente",
        testSurveyWidth: "Tamanho do pesquisa: ",
        embedSurvey: "Incorporar Pesquisa",
        saveSurvey: "Salvar Pesquisa",
        designer: "Designer de Pesquisa",
        jsonEditor: "Editor de JSON",
        undo: "Desfazer",
        redo: "Refazer",
        options: "Opções",
        generateValidJSON: "Gerar JSON válido",
        generateReadableJSON: "Gerar JSON legível",
        toolbox: "Toolbox",
        delSelObject: "Apagar objeto selecionado",
        correctJSON: "Por favor corrija o JSON.",
        surveyResults: "Resultado da pesquisa: "
    },
    //Property Editors
    pe: {
        apply: "Aplicar",
        ok: "OK",
        cancel: "Cancelar",
        reset: "Limpar",
        close: "Fechar",
        delete: "Apagar",
        addNew: "Adicionar Novo",
        removeAll: "Remover Todos",
        edit: "Editar",
        empty: "<vazio>",
        fastEntry: "Entrada Rápida",
        formEntry: "Entrada com formulário",
        testService: "Testar o serviço",
        expressionHelp: "Por favor informe uma expressão boleana. Ela deve retornar verdadeiro para manter a pergunta/página visível. Por exemplo: {´pergunta1} = 'valor1' or ({pergunta2} = 3 and {pergunta3} < 5)",
        propertyIsEmpty: "Por favor informe um valor na propriedade",
        value: "Valor",
        text: "Texto",
        required: "Obrigatório?",
        columnEdit: "Editar coluna: {0}",
        itemEdit: "Editar item: {0}",
        hasOther: "Tem outro item",
        name: "Nome",
        title: "Título",
        cellType: "Tipo de célula",
        colCount: "Contagem de células",
        choicesOrder: "Selecione a ordem das alternativas",
        visible: "É visível?",
        isRequired: "É obrigatório?",
        startWithNewLine: "Começa com uma nova linha?",
        rows: "Contagem de linhas",
        placeHolder: "Texto de referência",
        showPreview: "Mostra pré-visualização de imagem?",
        storeDataAsText: "Gravar conteúdo de arquivo no resultado JSON como texto",
        maxSize: "Tamanho máximo de arquivo em bytes",
        imageHeight: "Altura da imagem",
        imageWidth: "Largura da imagem",
        rowCount: "Contagem de linhas",
        addRowText: "Texto do botão para adicionar linhas",
        removeRowText: "Texto do botão para remover linhas",
        minRateDescription: "Descrição de qualificação mínima",
        maxRateDescription: "Descrição de qualificação máxima",
        inputType: "Tipo de entrada",
        optionsCaption: "Título de opção",
        qEditorTitle: "Editar pergunta: {0}",
        tabs: {
            general: "Geral",
            fileOptions: "Opções",
            html: "Editor Html",
            columns: "Colunas",
            rows: "Linhas",
            choices: "Opções",
            visibleIf: "Visível se",
            rateValues: "Valores de qualificação",
            choicesByUrl: "Opções com origem na Web",
            matrixChoices: "Opções padrão",
            multipleTextItems: "Entradas de texto",
            validators: "Validadores"
        },
        editProperty: "Editar propriedade '{0}'",
        items: "[ Items: {0} ]",
        enterNewValue: "Por favor, informe o valor.",
        noquestions: "Não há nenhuma pergunta na pesquisa.",
        createtrigger: "Por favor, crie um gatilho",
        triggerOn: "Ligado ",
        triggerMakePagesVisible: "Tornar páginas visíveis:",
        triggerMakeQuestionsVisible: "Tornar perguntas visíves:",
        triggerCompleteText: "Completar a pesquisa se obtiver êxito.",
        triggerNotSet: "O gatilho não está definido",
        triggerRunIf: "Executar se",
        triggerSetToName: "Mudar o valor de: ",
        triggerSetValue: "para: ",
        triggerIsVariable: "Não colocar a variável no resultado da pesquisa.",
        verbChangeType: "Alterar tipo ",
        verbChangePage: "Alterar página "
    },
    //Operators
    op: {
        empty: "está vazio",
        notempty: "não está vazio",
        equal: "é igual",
        notequal: "não é igual",
        contains: "contém",
        notcontains: "não contém",
        greater: "maior",
        less: "menor",
        greaterorequal: "maior ou igual",
        lessorequal: "menor ou igual"
    },
    //Embed window
    ew: {
        angular: "Usar versão Angular",
        jquery: "Usar versão jQuery",
        knockout: "Usar versão Knockout",
        react: "Usar versão React",
        vue: "Usar versão Vue",
        bootstrap: "Para framework bootstrap",
        standard: "Sem bootstrap",
        showOnPage: "Mostrar pesquisa em uma página",
        showInWindow: "Mostrar pesquisa em uma janela",
        loadFromServer: "Carregar JSON da pesquisa de um servidor",
        titleScript: "Scripts e estilos",
        titleHtml: "HTML",
        titleJavaScript: "JavaScript"
    },
    //Properties
    p: {
        name: "nome",
        title: { name: "título", title: "Deixar vazio se for o mesmo que 'Nome'" },
        survey_title: { name: "título", title: "Será mostrado em cada página." },
        page_title: { name: "título", title: "Título de página" }
    }
};
__WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].locales["pt"] = portugueseTranslation;


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(0);

var simplifiedChineseTranslation = {
    // strings for survey templates
    survey: {
        edit: "编辑",
        dropQuestion: "请将问题放置于此",
        copy: "复制",
        addToToolbox: "添加到工具箱",
        deletePanel: "删除面板",
        deleteQuestion: "删除题目",
        convertTo: "转变为"
    },
    // strings for question types
    qt: {
        checkbox: "多项选择",
        comment: "多行文本框",
        dropdown: "下拉框",
        file: "文件上传",
        html: "Html 代码",
        matrix: "矩阵 (单选题)",
        matrixdropdown: "矩阵 (下拉框)",
        matrixdynamic: "矩阵 (动态问题)",
        multipletext: "文本框组",
        panel: "面板",
        paneldynamic: "面板(动态)",
        radiogroup: "单项选择",
        rating: "评分",
        text: "文本框",
        boolean: "布尔选择",
        expression: "表达式"
    },
    // strings for editor
    ed: {
        survey: "调查问卷",
        editSurvey: "修改",
        addNewPage: "添加新页面",
        deletePage: "删除页面",
        editPage: "编辑页面",
        newPageName: "页面",
        newQuestionName: "问题",
        newPanelName: "面板",
        testSurvey: "测试问卷",
        testSurveyAgain: "再次测试问卷",
        testSurveyWidth: "问卷宽度: ",
        embedSurvey: "将问卷嵌入网页",
        saveSurvey: "保存问卷",
        designer: "问卷设计器",
        jsonEditor: "JSON 编辑器",
        undo: "撤销",
        redo: "恢复",
        options: "选项",
        generateValidJSON: "生成 JSON 数据",
        generateReadableJSON: "生成易读的 JSON 数据",
        toolbox: "工具箱",
        delSelObject: "删除所选对象",
        editSelObject: "编辑所选对象",
        correctJSON: "请修正 JSON 数据",
        surveyResults: "问卷结果: ",
        modified: "已修改",
        saving: "保存中...",
        saved: "已保存"
    },
    // strings for property editors
    pe: {
        apply: "应用",
        ok: "确定",
        cancel: "取消",
        reset: "重置",
        close: "关闭",
        delete: "删除",
        addNew: "新建",
        removeAll: "全部删除",
        edit: "编辑器",
        empty: "<空>",
        fastEntry: "快速输入",
        formEntry: "表单输入",
        testService: "测试服务",
        showMore: "更多细节请查看文档",
        conditionHelp: "请输入一个布尔表达式。当布尔值为真，问题/页面可见。例如：{question1} = 'value1' or ({question2} * {question4}  > 20 and {question3} < 5)",
        expressionHelp: "请输入一项条件判断。当条件判断为真时问题/页面将可见。例如: {question1} = 'value1' or ({question2} = 3 and {question3} < 5)",
        propertyIsEmpty: "请为该属性设定一个值",
        value: "值",
        text: "显示文本",
        required: "是否为必填项?",
        columnEdit: "编辑列: {0}",
        itemEdit: "编辑选项: {0}",
        hasOther: "可添加其他答案?",
        otherText: "其他答案文本",
        url: "URL",
        path: "Path",
        valueName: "Value name",
        titleName: "Title name",
        name: "题目名",
        title: "题目文本",
        cellType: "单元格类型",
        colCount: "列数",
        choicesOrder: "设置选项顺序",
        visible: "是否可见?",
        isRequired: "是否为必填项?",
        startWithNewLine: "问题是否新起一行?",
        rows: "文本框行数",
        placeHolder: "占位文本",
        showPreview: "是否显示图像预览?",
        storeDataAsText: "以 JSON 文本方式存储文件",
        maxSize: "文件最大尺寸 (Bytes)",
        imageHeight: "图片高度",
        imageWidth: "图片宽度",
        rowCount: "默认行数",
        addRowText: "添加条目按钮文本",
        removeRowText: "删除条目按钮文本",
        minRateDescription: "最小值提示",
        maxRateDescription: "最大值提示",
        inputType: "文本框类型",
        optionsCaption: "下拉框提示语",
        qEditorTitle: "编辑问题: {0}",
        //survey
        showTitle: "显示/隐藏 标题",
        locale: "默认语言",
        mode: "模式 (编辑/只读)",
        clearInvisibleValues: "清除隐藏值",
        cookieName: "Cookie name (to disable run survey two times locally)",
        sendResultOnPageNext: "Send survey results on page next",
        storeOthersAsComment: "Store 'others' value in separate field",
        showPageTitles: "显示页面标题",
        showPageNumbers: "显示页数",
        pagePrevText: "前一页按钮文本",
        pageNextText: "后一页按钮文本",
        completeText: "完成按钮文本",
        startSurveyText: "开始按钮文本",
        showNavigationButtons: "显示导航按钮 (默认导航)",
        showPrevButton: "显示前一页按钮 (用户可返回至前一页面)",
        firstPageIsStarted: "调查的第一页面为起始页.",
        showCompletedPage: "结尾展示完成后的页面 (completedHtml)",
        goNextPageAutomatic: "回答本页所有问题后，自动跳转到下一页",
        showProgressBar: "显示进度条",
        questionTitleLocation: "问题的标题位置",
        requiredText: "The question required symbol(s)",
        questionStartIndex: "问题起始标志 (1, 2 or 'A', 'a')",
        showQuestionNumbers: "显示问题编号",
        questionTitleTemplate: "问题标题模板, 默认为: '{no}. {require} {title}'",
        questionErrorLocation: "问题错误定位",
        focusFirstQuestionAutomatic: "改变页面时聚焦在第一个问题",
        questionsOrder: "Elements order on the page",
        maxTimeToFinish: "完成调查的最长时间",
        maxTimeToFinishPage: "完成调查中页面的最长时间",
        showTimerPanel: "显示计时器面板",
        showTimerPanelMode: "显示计时器面板模式",
        renderMode: "渲染模式",
        allowAddPanel: "允许添加面板",
        allowRemovePanel: "允许删除面板",
        panelAddText: "添加面板文本",
        panelRemoveText: "删除面板文本",
        isSinglePage: "在一个页面上展示所有元素",
        tabs: {
            general: "通用项",
            navigation: "导航",
            question: "问题",
            completedHtml: "完成后的Html",
            loadingHtml: "加载中的Html",
            timer: "问卷计时器",
            trigger: "触发器",
            fileOptions: "选项",
            html: "HTML 编辑器",
            columns: "设置列",
            rows: "设置行",
            choices: "设置选项",
            visibleIf: "设置可见条件",
            enableIf: "Enable If",
            rateValues: "设置评分值",
            choicesByUrl: "通过 URL 导入选项",
            matrixChoices: "默认选项",
            multipleTextItems: "文本输入",
            validators: "校验规则"
        },
        editProperty: "编辑属性: '{0}'",
        items: "[ 项目数量: {0} ]",
        enterNewValue: "请设定值",
        noquestions: "问卷中还没有创建任何问题",
        createtrigger: "请创建触发器",
        triggerOn: "当 ",
        triggerMakePagesVisible: "使页面可见:",
        triggerMakeQuestionsVisible: "使问题可见:",
        triggerCompleteText: "如果满足条件，则完成问卷",
        triggerNotSet: "触发器尚未设置",
        triggerRunIf: "满足下列条件时执行",
        triggerSetToName: "修改下列问题值: ",
        triggerSetValue: "修改为: ",
        triggerIsVariable: "在问卷提交结果中不要包含该变量",
        verbChangeType: "编辑类型 ",
        verbChangePage: "编辑页面 "
    },
    // strings for operators
    op: {
        empty: "为空",
        notempty: "不为空",
        equal: "等于",
        notequal: "不等于",
        contains: "包含",
        notcontains: "不包含",
        greater: "大于",
        less: "小于",
        greaterorequal: "大于等于",
        lessorequal: "小于等于"
    },
    // strings for embed window
    ew: {
        angular: "使用 Angular 时",
        jquery: "使用 JQuery 时",
        knockout: "使用 Knockout 时",
        react: "使用 React 时",
        vue: "使用 Vue 时",
        bootstrap: "使用 Bootstrap 时",
        standard: "不使用 Bootstrap 时",
        showOnPage: "嵌入页面显示",
        showInWindow: "使用单独的问卷窗口",
        loadFromServer: "从服务器加载问卷 JSON 数据",
        titleScript: "脚本和样式",
        titleHtml: "HTML",
        titleJavaScript: "JavaScript"
    },
    validators: {
        answercountvalidator: "数量检查",
        emailvalidator: "Email",
        numericvalidator: "数字",
        regexvalidator: "正则表达式",
        textvalidator: "文本"
    },
    triggers: {
        completetrigger: "完成问卷",
        setvaluetrigger: "设置问题值",
        visibletrigger: "修改可见性"
    },
    // strings of properties
    p: {
        commentText: "备注文本",
        choices: "选项",
        choicesByUrl: "Url选项",
        choicesOrder: "选项排序",
        colCount: "列数",
        correctAnswer: "正确答案",
        defaultVaule: "默认选项",
        description: "说明",
        enableIf: "允许判断",
        hasComment: "hasComment",
        hasOther: "允许其他答案",
        otherText: "其他答案文本",
        page: "所在页面",
        readOnly: "只读",
        indent: "缩进",
        isRequired: "必选",
        requiredErrorText: "requiredErrorText",
        otherErrorText: "requiredErrorText",
        startWithNewLine: "允许问题在新行",
        //survey
        showTitle: "显示/隐藏 标题",
        locale: "默认语言",
        mode: "模式 (编辑/只读)",
        clearInvisibleValues: "清除隐藏值",
        cookieName: "Cookie name (to disable run survey two times locally)",
        sendResultOnPageNext: "Send survey results on page next",
        storeOthersAsComment: "Store 'others' value in separate field",
        showPageTitles: "显示页面标题",
        showPageNumbers: "显示页数",
        pagePrevText: "前一页按钮文本",
        pageNextText: "后一页按钮文本",
        completeText: "完成按钮文本",
        startSurveyText: "开始按钮文本",
        showNavigationButtons: "显示导航按钮 (默认导航)",
        showPrevButton: "显示前一页按钮 (用户可返回至前一页面)",
        firstPageIsStarted: "调查的第一页面为起始页.",
        showCompletedPage: "结尾展示完成后的页面 (completedHtml)",
        goNextPageAutomatic: "回答本页所有问题后，自动跳转到下一页",
        showProgressBar: "显示进度条",
        questionTitleLocation: "问题的标题位置",
        requiredText: "The question required symbol(s)",
        questionStartIndex: "问题起始标志 (1, 2 or 'A', 'a')",
        showQuestionNumbers: "显示问题编号",
        questionTitleTemplate: "问题标题模板, 默认为: '{no}. {require} {title}'",
        questionErrorLocation: "问题错误定位",
        focusFirstQuestionAutomatic: "改变页面时聚焦在第一个问题",
        questionsOrder: "页面中元素的顺序",
        maxTimeToFinish: "完成调查的最长时间",
        maxTimeToFinishPage: "完成调查中页面的最长时间",
        showTimerPanel: "显示计时器面板",
        showTimerPanelMode: "显示计时器面板模式",
        renderMode: "渲染模式",
        allowAddPanel: "允许添加面板",
        allowRemovePanel: "允许删除面板",
        panelAddText: "添加面板文本",
        panelRemoveText: "删除面板文本",
        isSinglePage: "在一个页面上展示所有元素",
        name: "名字",
        title: {
            name: "标题",
            title: "如果与名字相同，请设置为空值"
        },
        survey_title: {
            name: "标题",
            title: "问卷标题在每页上都会显示"
        },
        page_title: {
            name: "标题",
            title: "页面标题"
        }
    }
};
__WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].locales["zh-cn"] = simplifiedChineseTranslation;


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editorLocalization__ = __webpack_require__(0);

var spanishTranslation = {
    // strings for survey templates
    survey: {
        edit: "Editar",
        dropQuestion: "Por favor coloque una pregunta aquí de la caja de herramientas en la izquierda.",
        copy: "Copiar",
        addToToolbox: "Añadir a la caja de herramientas",
        deletePanel: "Eliminar Panel",
        deleteQuestion: "Borrar Pregunta",
        convertTo: "Convertir a"
    },
    //questionTypes
    qt: {
        checkbox: "Checkbox",
        comment: "Comentario",
        dropdown: "Dropdown",
        file: "Archivo",
        html: "Html",
        matrix: "Matriz (elección única)",
        matrixdropdown: "Matriz (elección múltiple)",
        matrixdynamic: "Matriz (filas dinámicas)",
        multipletext: "Texto múltiple",
        panel: "Panel",
        paneldynamic: "Panel (paneles dinámicos)",
        radiogroup: "Grupo de radio",
        rating: "Rating",
        text: "Entrada sencilla",
        boolean: "Booleano",
        expression: "Expresión"
    },
    //Strings in Editor
    ed: {
        survey: "Encuesta",
        editSurvey: "Editar Encuesta",
        addNewPage: "Añadir Nueva Página",
        deletePage: "Borrar Página",
        editPage: "Editar Página",
        newPageName: "página",
        newQuestionName: "pregunta",
        newPanelName: "panel",
        testSurvey: "Probar Encuesta",
        testSurveyAgain: "Probar Encuesta Otra Vez",
        testSurveyWidth: "Ancho de Encuesta: ",
        embedSurvey: "Empotrar Encuesta",
        saveSurvey: "Guardar Encuesta",
        designer: "Diseñador de Encuesta",
        jsonEditor: "Editor de JSON",
        undo: "Deshacer",
        redo: "Rehacer",
        options: "Opciones",
        generateValidJSON: "Generar JSON válido",
        generateReadableJSON: "Generar JSON legible",
        toolbox: "Caja de herramientas",
        delSelObject: "Borrar objeto seleccionado",
        editSelObject: "Editar objeto seleccionado",
        correctJSON: "Por favor corrija JSON.",
        surveyResults: "Resultado de Encuesta: ",
        modified: "Modificado",
        saving: "Salvando",
        saved: "Salvado"
    },
    //Property Editors
    pe: {
        apply: "Aplicar",
        ok: "OK",
        cancel: "Cancelar",
        reset: "Restaurar",
        close: "Cerrar",
        delete: "Borrar",
        addNew: "Añadir nuevo",
        addItem: "Click para añadir articulo...",
        removeAll: "Quitar todos",
        edit: "Editar",
        move: "Mover",
        empty: "<vacío>",
        fastEntry: "Entrada rápida",
        formEntry: "Entrar en forma",
        testService: "Pruebe el servicio",
        conditionSelectQuestion: "Seleccionar pregunta...",
        conditionButtonAdd: "Añadir",
        conditionButtonReplace: "Reemplazar",
        conditionHelp: "Por favor proporcione una expresión booleana. Debería regresar verdadero para mantener la pregunta/página visible. Por ejemplo: {pregunta1} = 'valor1' or ({pregunta2} * {pregunta4}  > 20 and {pregunta3} < 5)",
        expressionHelp: "Por favor proporcione una expresión. Puede hacer uso de llaves para tener acceso a los valores de la pregunta: '{pregunta1} + {pregunta2}', '({precio}*{cantidad}) * (100 - {descuento})'",
        aceEditorHelp: "Presione ctrl+espacio para obtener un indicio de completado de expresión",
        aceEditorRowTitle: "Fila actual",
        aceEditorPanelTitle: "Panel actual",
        showMore: "Por favor use la documentación para más detalles",
        assistantTitle: "Preguntas disponibles:",
        propertyIsEmpty: "Por favor proporcione un valor",
        value: "Valor",
        text: "Texto",
        required: "Requerido?",
        columnEdit: "Editar columna: {0}",
        itemEdit: "Editar artículo: {0}",
        url: "URL",
        path: "trayecto",
        valueName: "Nombre del valor",
        titleName: "Título",
        hasOther: "Tiene otro artículo",
        otherText: "Texto de otro artículo",
        name: "Nombre",
        title: "Título",
        cellType: "Tipo de celda",
        colCount: "Conteo de columnas",
        choicesOrder: "Orden de selección de elecciones",
        visible: "Es visible?",
        isRequired: "Es requerido?",
        startWithNewLine: "Es inicio con nueva línea?",
        rows: "Conteo de filas",
        placeHolder: "Marcador de entrada",
        showPreview: "Se muestra avance de imagen?",
        storeDataAsText: "Guardar contenido de archivo en resultado JSON como texto",
        maxSize: "Tamaño máximo de archivo en bytes",
        imageHeight: "Altura de imagen",
        imageWidth: "Ancho de imagen",
        rowCount: "Conteo de filas",
        addRowText: "Añadir texto de boton de fila",
        removeRowText: "Quitar texto de boton de fila",
        minRateDescription: "Descripción de la tasa mínima",
        maxRateDescription: "Descripción de la tarifa máxima",
        inputType: "Tipo de entrada",
        optionsCaption: "Leyenda de opciones",
        defaultValue: "Valor de defecto",
        surveyEditorTitle: "Editar ajustes de encuesta",
        qEditorTitle: "Editar: {0}",
        //survey
        showTitle: "Mostrar/esconder título",
        locale: "Lenguaje de defecto",
        mode: "Modo (editar/solo lectura)",
        clearInvisibleValues: "Borrar valores invisibles",
        cookieName: "Nombre de Cookie (para deshabilitar corra encuesta dos veces localmente)",
        sendResultOnPageNext: "Mandar resultados de encuesta en página siguiente",
        storeOthersAsComment: "Guardar valor 'otros' en campo separado",
        showPageTitles: "Mostrar títulos de página",
        showPageNumbers: "Mostrar números de página",
        pagePrevText: "Texto de botón de página previa",
        pageNextText: "Texto de botón de página próxima",
        completeText: "Texto de botón de completado",
        startSurveyText: "Texto de botón de inicio",
        showNavigationButtons: "Mostrar botones de navigación (navegación de defecto)",
        showPrevButton: "Mostrar botón previo (el usuario puede regresar en página previa)",
        firstPageIsStarted: "La primera página en la encuesta es una página iniciada.",
        showCompletedPage: "Mostrar la página completada al final (completedHtml)",
        goNextPageAutomatic: "Al contestar todas las preguntas, ir a la próxima página automáticamente",
        showProgressBar: "Mostrar barra de progreso",
        questionTitleLocation: "Localización de título de pregunta",
        requiredText: "La pregunta requiere de símbolo(s)",
        questionStartIndex: "Índice de inicio de pregunta (1, 2 o 'A', 'a')",
        showQuestionNumbers: "Mostrar números de preguntas",
        questionTitleTemplate: "Plantilla de título de pregunta, defecto es: '{no}. {require} {title}'",
        questionErrorLocation: "Localización de error de pregunta",
        focusFirstQuestionAutomatic: "Foco en primera pregunta al cambiar la página",
        questionsOrder: "Órden de elementos en la página",
        maxTimeToFinish: "Tiempo máximo para finalizar la encuesta",
        maxTimeToFinishPage: "Tiempo máximo para finalizar una página en la encuesta",
        showTimerPanel: "Mostrar panel de temporizador",
        showTimerPanelMode: "Modo de muestra de panel de temporizador",
        renderMode: "Modo de interpretador",
        allowAddPanel: "Permitir adición de un panel",
        allowRemovePanel: "Permitir remoción del panel",
        panelAddText: "Añadiendo texto de panel",
        panelRemoveText: "Quitando texto de panel",
        isSinglePage: "Mostrar todos los elementos en una página",
        tabs: {
            general: "General",
            fileOptions: "Opciones",
            html: "Editor Html",
            columns: "Columnas",
            rows: "Filas",
            choices: "Opciones",
            visibleIf: "Visible Si",
            enableIf: "Habilitar Si",
            rateValues: "Valores de tasa",
            choicesByUrl: "Opciones de la Web",
            matrixChoices: "Opciones de defecto",
            multipleTextItems: "Entradas de texto",
            validators: "Validadores",
            navigation: "Navegación",
            question: "Pregunta",
            completedHtml: "Html Completado",
            loadingHtml: "Cargando Html",
            timer: "Temporizador/Quiz",
            triggers: "Disparadores",
            templateTitle: "Título de plantilla"
        },
        editProperty: "Editar propiedad '{0}'",
        items: "[ Items: {0} ]",
        enterNewValue: "Por favor, proporcione el valor.",
        noquestions: "No hay ni una pregunta en la encuesta.",
        createtrigger: "Por favor cree un disparador",
        triggerOn: "En ",
        triggerMakePagesVisible: "Hacer páginas visibles:",
        triggerMakeQuestionsVisible: "Hacer elementos visibles:",
        triggerCompleteText: "Complete la encuesta en caso de éxito.",
        triggerNotSet: "El disparador no está configurado",
        triggerRunIf: "Correr si",
        triggerSetToName: "Cambiar valor de: ",
        triggerSetValue: "a: ",
        triggerIsVariable: "No poner la variable en el resultado de la encuesta."
    },
    //Property values
    pv: {
        true: "verdadero",
        false: "falso",
        ar: "العربية",
        ca: "català",
        cz: "čeština",
        da: "dansk",
        de: "deutsch",
        en: "english",
        es: "español",
        fa: "فارْسِى",
        fi: "suomalainen",
        fr: "français",
        gr: "ελληνικά",
        he: "עברית",
        hu: "magyar",
        it: "italiano",
        is: "íslenska",
        ka: "ქართული",
        lv: "latviešu",
        nl: "hollandsk",
        no: "norsk",
        pl: "polski",
        pt: "português",
        ro: "română",
        ru: "русский",
        sv: "svenska",
        tr: "türkçe",
        "zh-cn": "简体中文"
    },
    //Operators
    op: {
        empty: "es vacío",
        notempty: "no es vacío",
        equal: "igual a",
        notequal: "no igual a",
        contains: "contiene",
        notcontains: "no contiene",
        greater: "mayor",
        less: "menor",
        greaterorequal: "mayor o igual a",
        lessorequal: "menor or igual a"
    },
    //Embed window
    ew: {
        angular: "Use versión Angular",
        jquery: "Use versión jQuery",
        knockout: "Use versión Knockout",
        react: "Use versión React",
        vue: "Use versión Vue",
        bootstrap: "Para entorno bootstrap",
        standard: "No bootstrap",
        showOnPage: "Mostrar encuesta en una página",
        showInWindow: "Mostrar encuesta en una ventana",
        loadFromServer: "Cargar JSON de encuesta del servidor",
        titleScript: "Scripts y estilos",
        titleHtml: "HTML",
        titleJavaScript: "JavaScript"
    },
    //Test Survey
    ts: {
        selectPage: "Seleccione la página para probarla:"
    },
    validators: {
        answercountvalidator: "cuenta de respuestas",
        emailvalidator: "e-mail",
        numericvalidator: "numerico",
        regexvalidator: "regex",
        textvalidator: "texto"
    },
    triggers: {
        completetrigger: "encuesta completa",
        setvaluetrigger: "valor ajustado",
        visibletrigger: "cambio de visibilidad"
    },
    //Properties
    p: {
        name: "nombre",
        title: {
            name: "título",
            title: "Dejarlo vacío, si es igual que 'Nombre'"
        },
        page_title: { name: "título", title: "Título de página" }
    }
};
__WEBPACK_IMPORTED_MODULE_0__editorLocalization__["a" /* editorLocalization */].locales["es"] = spanishTranslation;


/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__);
/* unused harmony export SurveyDescription */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveysManager; });


var ServiceAPI = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](ServiceAPI, _super);
    function ServiceAPI(baseUrl, accessKey) {
        var _this = _super.call(this) || this;
        _this.baseUrl = baseUrl;
        _this.accessKey = accessKey;
        return _this;
    }
    ServiceAPI.prototype.getActiveSurveys = function (onLoad) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", this.baseUrl + "/getActive?accessKey=" + this.accessKey);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onload = function () {
            var result = xhr.response ? JSON.parse(xhr.response) : null;
            onLoad(xhr.status == 200, result, xhr.response);
        };
        xhr.send();
    };
    ServiceAPI.prototype.createSurvey = function (name, onCreate) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", this.baseUrl + "/create?accessKey=" + this.accessKey + "&name=" + name);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onload = function () {
            var result = xhr.response ? JSON.parse(xhr.response) : null;
            onCreate(xhr.status == 200, result, xhr.response);
        };
        xhr.send();
    };
    ServiceAPI.prototype.saveSurvey = function (id, json, onSave) {
        var xhr = new XMLHttpRequest();
        xhr.open("POST", this.baseUrl + "/changeJson?accessKey=" + this.accessKey);
        xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        xhr.onload = function () {
            var result = xhr.response ? JSON.parse(xhr.response) : null;
            !!onSave && onSave(xhr.status == 200, result, xhr.response);
        };
        xhr.send(JSON.stringify({ Id: id, Json: json, Text: json }));
    };
    ServiceAPI.prototype.updateSurveyName = function (id, name, onUpdate) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", this.baseUrl +
            "/changeName/" +
            id +
            "?accessKey=" +
            this.accessKey +
            "&name=" +
            name);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onload = function () {
            var result = xhr.response ? JSON.parse(xhr.response) : null;
            !!onUpdate && onUpdate(xhr.status == 200, result, xhr.response);
        };
        xhr.send();
    };
    return ServiceAPI;
}(__WEBPACK_IMPORTED_MODULE_1_survey_knockout__["dxSurveyService"]));
var SurveyDescription = (function () {
    function SurveyDescription(name, createdAt, id, resultId, postId) {
        if (name === void 0) { name = ko.observable(""); }
        if (createdAt === void 0) { createdAt = new Date(Date.now()).toDateString(); }
        if (id === void 0) { id = ""; }
        if (resultId === void 0) { resultId = ""; }
        if (postId === void 0) { postId = ""; }
        this.name = name;
        this.createdAt = createdAt;
        this.id = id;
        this.resultId = resultId;
        this.postId = postId;
    }
    return SurveyDescription;
}());

var SurveysManager = (function () {
    function SurveysManager(baseUrl, accessKey, editor) {
        var _this = this;
        this.baseUrl = baseUrl;
        this.accessKey = accessKey;
        this.editor = editor;
        this.isEditMode = ko.observable(false);
        this.surveyId = ko.observable();
        this.surveys = ko.observableArray();
        this.currentSurvey = ko.observable();
        this.currentSurveyName = ko.observable("");
        this.isLoading = ko.observable(false);
        this.nameEditorKeypress = function (model, event) {
            if (event.keyCode === 13) {
                _this.edit(model, event);
            }
            else if (event.keyCode === 27) {
                _this.isEditMode(false);
            }
        };
        var hash = window.location.hash;
        if (hash.indexOf("#") === 0) {
            this.surveyId(hash.slice(1));
        }
        this.api = new ServiceAPI(baseUrl + SurveysManager.serviceUrlPath, accessKey);
        editor.isAutoSave = true;
        editor.showState = true;
        editor.saveSurveyFunc = function (saveNo, callback) {
            if (!editor.surveyId && !_this.surveyId()) {
                _this.addHandler(function (success) { return callback(saveNo, success); });
            }
            if (!!editor.surveyId || !!_this.surveyId()) {
                _this.api.saveSurvey(editor.surveyId || _this.surveyId(), editor.text, function (success) { return callback(saveNo, success); });
            }
        };
        this.surveys(this.getSurveys());
        if (!this.surveyId()) {
            this.currentSurvey(this.surveys()[0]);
        }
        else {
            var survey = this.surveys().filter(function (s) { return s.id === _this.surveyId(); })[0];
            if (!!survey) {
                this.currentSurvey(survey);
                this.surveyId(undefined);
            }
            else {
                editor.loadSurvey(this.surveyId());
            }
        }
        var onCurrentSurveyChanged = function (survey) {
            if (!!survey) {
                _this.surveyId(undefined);
                window.location.hash = "#" + survey.id;
                if (editor.surveyId === survey.id)
                    return;
                editor.loadSurvey(survey.id);
                editor.surveyId = survey.id;
                editor.surveyPostId = survey.postId;
            }
            else {
                if (!_this.surveyId()) {
                    editor.surveyId = "";
                    editor.surveyPostId = "";
                    window.location.hash = "";
                    editor.text = "";
                }
            }
        };
        this.currentSurvey.subscribe(onCurrentSurveyChanged);
        onCurrentSurveyChanged(this.currentSurvey());
        var currentSurveyCanBeAttached = ko.observable(false);
        ko.computed(function () {
            var survey = _this.currentSurvey();
            currentSurveyCanBeAttached(false);
            if (!!survey) {
                _this.api.updateSurveyName(survey.id, survey.name.peek(), function (success) {
                    currentSurveyCanBeAttached(success);
                });
            }
        });
        this.toolbarItem = {
            id: "svd-attach-survey",
            template: "attach-survey",
            visible: currentSurveyCanBeAttached,
            action: ko.computed(function () {
                return "https://dxsurvey.com/Home/AttachSurvey/" +
                    (_this.currentSurvey() && _this.currentSurvey().id);
            }),
            css: "link-to-attach",
            innerCss: "icon-cloud",
            title: "Attach survey to your SurveyJS service account..."
        };
    }
    SurveysManager.prototype.getSurveys = function () {
        return JSON.parse(window.localStorage.getItem(SurveysManager.StorageKey) || "[]").map(function (item) {
            return new SurveyDescription(ko.observable(item.name), item.createdAt, item.id, item.resultId, item.postId);
        });
    };
    SurveysManager.prototype.setSurveys = function (surveys) {
        window.localStorage.setItem(SurveysManager.StorageKey, ko.toJSON(surveys));
    };
    SurveysManager.prototype.edit = function (model, event) {
        var survey = this.currentSurvey();
        if (!!survey) {
            if (this.isEditMode()) {
                survey.name(this.currentSurveyName());
                this.setSurveys(this.surveys());
                this.api.updateSurveyName(survey.id, survey.name());
                this.isEditMode(false);
            }
            else {
                this.currentSurveyName(survey.name());
                this.isEditMode(true);
                $(event.target)
                    .parents(".svd-manage")
                    .find("input")
                    .focus();
            }
        }
    };
    SurveysManager.prototype.addHandler = function (onAdd) {
        var _this = this;
        this.isLoading(true);
        this.api.createSurvey("NewSurvey", function (success, result, response) {
            var newSurveyDescription = new SurveyDescription(ko.observable(result.Name), result.CreatedAt, result.Id, result.ResultId, result.PostId);
            _this.surveys.push(newSurveyDescription);
            _this.setSurveys(_this.surveys());
            _this.editor.surveyId = result.Id;
            _this.editor.surveyPostId = result.PostId;
            _this.api.saveSurvey(result.Id, _this.editor.text);
            _this.currentSurvey(newSurveyDescription);
            _this.isLoading(false);
            onAdd && onAdd(success, result, response);
        });
    };
    SurveysManager.prototype.add = function () {
        this.addHandler();
    };
    SurveysManager.prototype.remove = function () {
        if (confirm("Do you really want to remove current survey?")) {
            this.surveys.remove(this.currentSurvey());
            this.setSurveys(this.surveys());
            this.currentSurvey(this.surveys()[0]);
        }
    };
    Object.defineProperty(SurveysManager.prototype, "cssEdit", {
        get: function () {
            return this.isEditMode() ? "icon-saved" : "icon-edit";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveysManager.prototype, "cssAdd", {
        get: function () {
            return !this.surveyId() ? "icon-new" : "icon-fork";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveysManager.prototype, "titleEdit", {
        get: function () {
            return this.isEditMode() ? "Save survey name" : "Edit survey name";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveysManager.prototype, "titleAdd", {
        get: function () {
            return !this.surveyId() ? "Add new survey" : "Fork this survey";
        },
        enumerable: true,
        configurable: true
    });
    return SurveysManager;
}());

SurveysManager.serviceUrlPath = "/api/MySurveys";
SurveysManager.StorageKey = "mySurveys";


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyCellsEditor; });






var SurveyPropertyCellsEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyCellsEditor, _super);
    function SurveyPropertyCellsEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.koRows = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
        _this.koColumns = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
        _this.koCanEdit = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false);
        return _this;
    }
    SurveyPropertyCellsEditor.prototype.getValueText = function (value) {
        var strName = !value ? "empty" : "notEmpty";
        return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe." + strName);
    };
    SurveyPropertyCellsEditor.prototype.beforeShow = function () {
        _super.prototype.beforeShow.call(this);
        this.setupCells();
    };
    SurveyPropertyCellsEditor.prototype.onBeforeApply = function () {
        if (!this.canEdit)
            return;
        var matrix = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["QuestionMatrix"]("");
        matrix.setSurveyImpl(this.object.survey);
        matrix.rows = this.rows;
        matrix.columns = this.columns;
        matrix.cells = this.object.cells;
        for (var i = 0; i < matrix.rows.length; i++) {
            var cells = this.koRows()[i].koCells();
            for (var j = 0; j < matrix.columns.length; j++) {
                matrix.setCellText(i, j, cells[j].text());
            }
        }
        if (!matrix.cells.isEmpty) {
            this.koValue(matrix.cells);
        }
        else {
            this.koValue(null);
        }
    };
    Object.defineProperty(SurveyPropertyCellsEditor.prototype, "editorType", {
        get: function () {
            return "cells";
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyCellsEditor.prototype.onValueChanged = function () {
        if (this.isShowingModal) {
            this.setupCells();
        }
    };
    Object.defineProperty(SurveyPropertyCellsEditor.prototype, "canEdit", {
        get: function () {
            return this.rows.length > 0 && this.columns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyCellsEditor.prototype, "rows", {
        get: function () {
            return this.object && this.object.rows ? this.object.rows : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyCellsEditor.prototype, "columns", {
        get: function () {
            return this.object && this.object.columns ? this.object.columns : [];
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyCellsEditor.prototype.getCellText = function (rowIndex, columnIndex) {
        return this.object.getCellText(rowIndex, columnIndex);
    };
    SurveyPropertyCellsEditor.prototype.setupCells = function () {
        this.koRows([]);
        this.koColumns([]);
        this.koCanEdit(this.canEdit);
        if (!this.canEdit)
            return;
        var cols = [];
        for (var i = 0; i < this.columns.length; i++) {
            cols.push(this.columns[i].text);
        }
        var rows = [];
        for (var i = 0; i < this.rows.length; i++) {
            rows.push(this.createRow(i));
        }
        this.koColumns(cols);
        this.koRows(rows);
    };
    SurveyPropertyCellsEditor.prototype.createRow = function (rowIndex) {
        var row = {
            row: this.rows[rowIndex],
            koCells: __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]()
        };
        var cells = [];
        for (var i = 0; i < this.columns.length; i++) {
            cells.push({ text: __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](this.getCellText(rowIndex, i)) });
        }
        row.koCells(cells);
        return row;
    };
    return SurveyPropertyCellsEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__["a" /* SurveyPropertyModalEditor */]));

__WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("cells", function (property) {
    return new SurveyPropertyCellsEditor(property);
});


/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__propertyEditorFactory__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__editorLocalization__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyConditionEditor; });
/* unused harmony export doGetCompletions */
/* unused harmony export insertMatch */






var SurveyPropertyConditionEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyConditionEditor, _super);
    function SurveyPropertyConditionEditor(property, _type, syntaxCheckMethodName) {
        if (_type === void 0) { _type = "condition"; }
        if (syntaxCheckMethodName === void 0) { syntaxCheckMethodName = "createCondition"; }
        var _this = _super.call(this, property) || this;
        _this._type = _type;
        _this.syntaxCheckMethodName = syntaxCheckMethodName;
        _this.availableOperators = [];
        _this.availableOperators = __WEBPACK_IMPORTED_MODULE_4__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].getOperators();
        _this.koIsValid = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](true);
        _this.koAddConditionQuestion = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("");
        _this.koAddConditionOperator = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("");
        _this.koAddConditionValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("");
        _this.koAddConditionType = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("and");
        var self = _this;
        _this.koCanAddCondition = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            return (this.koAddConditionQuestion() != "" &&
                this.koAddConditionQuestion() != undefined &&
                this.koAddConditionOperator() != "" &&
                (!this.koAddContionValueEnabled() || this.koAddConditionValue() != ""));
        }, _this);
        _this.koShowAddConditionType = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            if (!this.koIsValid())
                return false;
            var text = this.koTextValue();
            if (text)
                text = text.trim();
            return text;
        }, _this);
        _this.koAddConditionButtonText = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            var name = this.koIsValid()
                ? "conditionButtonAdd"
                : "conditionButtonReplace";
            return __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */].getString("pe." + name);
        }, _this);
        _this.koAddContionValueEnabled = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            var op = this.koAddConditionOperator();
            return op != "empty" && op != "notempty";
        }, _this);
        _this.onConditionAddClick = function () {
            self.addCondition();
        };
        _this.resetAddConditionValues();
        return _this;
    }
    Object.defineProperty(SurveyPropertyConditionEditor.prototype, "editorType", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyConditionEditor.prototype, "availableQuestions", {
        get: function () {
            if (this.object instanceof __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["MatrixDropdownColumn"]) {
                return this.object.colOwner["survey"].getAllQuestions();
            }
            return (this.object && this.object.survey.getAllQuestions()) || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyConditionEditor.prototype, "allCondtionQuestions", {
        get: function () {
            if (!this.object)
                return [];
            var names = [];
            var questions = this.availableQuestions;
            for (var i = 0; i < questions.length; i++) {
                this.addConditionQuestionNames(questions[i], names);
            }
            this.addMatrixColumnsToCondtion(names);
            this.addPanelDynamicQuestionsToCondtion(names);
            names.sort();
            return names;
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyConditionEditor.prototype.addConditionQuestionNames = function (question, names) {
        if (question == this.object)
            return;
        if (question["addConditionNames"]) {
            question["addConditionNames"](names);
        }
        else {
            names.push(question.name);
        }
    };
    SurveyPropertyConditionEditor.prototype.addMatrixColumnsToCondtion = function (names) {
        if (!(this.object instanceof __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["MatrixDropdownColumn"]) ||
            !this.object ||
            !this.object.colOwner ||
            !this.object.colOwner["columns"])
            return;
        var columns = this.object.colOwner["columns"];
        for (var i = 0; i < columns.length; i++) {
            if (columns[i] == this.object)
                continue;
            names.push("row." + columns[i].name);
        }
    };
    SurveyPropertyConditionEditor.prototype.addPanelDynamicQuestionsToCondtion = function (names) {
        if (!(this.object.data instanceof __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["QuestionPanelDynamicItem"]))
            return;
        var panel = this.object.data.panel;
        var questionNames = [];
        for (var i = 0; i < panel.questions.length; i++) {
            var q = panel.questions[i];
            if (q.name == this.object.name)
                continue;
            this.addConditionQuestionNames(q, questionNames);
        }
        for (var i = 0; i < questionNames.length; i++) {
            names.push("panel." + questionNames[i]);
        }
    };
    Object.defineProperty(SurveyPropertyConditionEditor.prototype, "hasAceEditor", {
        get: function () {
            return (typeof ace !== "undefined" &&
                typeof ace.require("ace/ext/language_tools") !== "undefined");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyConditionEditor.prototype, "addConditionQuestionOptions", {
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */].getString("pe.conditionSelectQuestion");
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyConditionEditor.prototype.addCondition = function () {
        if (!this.koCanAddCondition())
            return;
        var text = "";
        if (this.koShowAddConditionType()) {
            text = this.koTextValue() + " " + this.koAddConditionType() + " ";
        }
        text +=
            "{" +
                this.koAddConditionQuestion() +
                "} " +
                this.getAddConditionOperator();
        if (this.koAddContionValueEnabled()) {
            text += " " + this.getAddConditionValue();
        }
        this.koTextValue(text);
        this.resetAddConditionValues();
    };
    SurveyPropertyConditionEditor.prototype.getAddConditionOperator = function () {
        var op = this.koAddConditionOperator();
        if (op == "equal")
            return "=";
        if (op == "notequal")
            return "<>";
        if (op == "greater")
            return ">";
        if (op == "less")
            return "<";
        if (op == "greaterorequal")
            return ">=";
        if (op == "lessorequal")
            return "<=";
        return op;
    };
    SurveyPropertyConditionEditor.prototype.getAddConditionValue = function () {
        var val = this.koAddConditionValue();
        if (!val)
            return val;
        if (val == "true" || val == "false")
            return val;
        if (!isNaN(val))
            return val;
        if (!this.isQuote(val[0]))
            val = "'" + val;
        if (!this.isQuote(val[val.length - 1]))
            val = val + "'";
        return val;
    };
    SurveyPropertyConditionEditor.prototype.isQuote = function (ch) {
        return ch == "'" || ch == '"';
    };
    SurveyPropertyConditionEditor.prototype.onkoTextValueChanged = function (newValue) {
        if (!newValue) {
            this.koIsValid(true);
        }
        else {
            var conditionParser = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ConditionsParser"]();
            conditionParser[this.syntaxCheckMethodName](newValue);
            this.koIsValid(!conditionParser.error);
        }
    };
    SurveyPropertyConditionEditor.prototype.resetAddConditionValues = function () {
        this.koAddConditionQuestion("");
        this.koAddConditionOperator("equal");
        this.koAddConditionValue("");
    };
    return SurveyPropertyConditionEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__["b" /* SurveyPropertyTextEditor */]));

__WEBPACK_IMPORTED_MODULE_4__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("condition", function (property) {
    return new SurveyPropertyConditionEditor(property, "condition", "createCondition");
});
__WEBPACK_IMPORTED_MODULE_4__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("expression", function (property) {
    return new SurveyPropertyConditionEditor(property, "expression", "parseExpression");
});
var operations = [
    {
        value: "and",
        title: "logical 'and' operator"
    },
    {
        value: "&&",
        title: "logical 'and' operator"
    },
    {
        value: "or",
        title: "logical 'or' operator"
    },
    {
        value: "||",
        title: "logical 'or' operator"
    },
    {
        value: "empty",
        title: "returns true if the left operand is empty	{questionName} empty"
    },
    {
        value: "notempty",
        title: "returns true if the left operand is not empty	{questionName} notempty"
    },
    {
        value: "=",
        title: "returns true if two values are equal	{questionName} = 5, {questionName} == 'abc', {questionName} equal 124"
    },
    {
        value: "==",
        title: "returns true if two values are equal	{questionName} = 5, {questionName} == 'abc', {questionName} equal 124"
    },
    {
        value: "equal",
        title: "returns true if two values are equal	{questionName} = 5, {questionName} == 'abc', {questionName} equal 124"
    },
    {
        value: "<>",
        title: "returns true if two values are not equal	{questionName} <> 5, {questionName} != 'abc', {questionName} notequal 124"
    },
    {
        value: "!=",
        title: "returns true if two values are not equal	{questionName} <> 5, {questionName} != 'abc', {questionName} notequal 124"
    },
    {
        value: "notequal",
        title: "returns true if two values are not equal	{questionName} <> 5, {questionName} != 'abc', {questionName} notequal 124"
    },
    {
        value: ">",
        title: "returns true if the left operand greater then the second operand	{questionName} > 2, {questionName} greater 'a'"
    },
    {
        value: "greater",
        title: "returns true if the left operand greater then the second operand	{questionName} > 2, {questionName} greater 'a'"
    },
    {
        value: "<",
        title: "returns true if the left operand less then the second operand	{questionName} < 2, {questionName} less 'a'"
    },
    {
        value: "less",
        title: "returns true if the left operand less then the second operand	{questionName} < 2, {questionName} less 'a'"
    },
    {
        value: ">=",
        title: "returns true if the left operand equal or greater then the second operand	{questionName} >= 2, {questionName} greaterorequal 'a'"
    },
    {
        value: "greaterorequal",
        title: "returns true if the left operand equal or greater then the second operand	{questionName} >= 2, {questionName} greaterorequal 'a'"
    },
    {
        value: "<=",
        title: "returns true if the left operand equal or less then the second operand	{questionName} <= 2, {questionName} lessorequal 'a'"
    },
    {
        value: "lessorequal",
        title: "returns true if the left operand equal or less then the second operand	{questionName} <= 2, {questionName} lessorequal 'a'"
    },
    {
        value: "contains",
        title: "return true if the left operand is an array and it contains a value of the second operand	{questionName} contains 'a'"
    },
    {
        value: "notcontains",
        title: "return true if the left operand is an array and it does not contain a value of the second operand"
    }
];
var createAnnotations = function (condition, syntaxCheckMethodName) {
    condition = condition || "";
    var annotations = new Array();
    var conditionParser = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ConditionsParser"]();
    conditionParser[syntaxCheckMethodName](condition);
    if (!!condition && conditionParser.error) {
        var toErrorSubstring = condition.substring(0, conditionParser.error.at);
        var column = toErrorSubstring.length - toErrorSubstring.lastIndexOf("\n");
        var annotation = {
            row: condition.match(/\n/g) ? condition.match(/\n/g).length : 0,
            column: column,
            text: conditionParser.error.code + " (" + column + ")",
            type: "error"
        };
        annotations.push(annotation);
    }
    return annotations;
};
var ID_REGEXP = /[a-zA-Z_0-9{\*\/\<\>\=\!\$\.\-\u00A2-\uFFFF]/;
function doGetCompletions(prevIdentifier, prefix, config, completer) {
    if (completer === void 0) { completer = null; }
    var completions = [];
    var currentQuestion = config.question;
    var usableQuestions = (config.questions || []).filter(function (q) { return q !== currentQuestion; });
    if (!!usableQuestions ||
        currentQuestion instanceof __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["MatrixDropdownColumn"] ||
        currentQuestion.data instanceof __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["QuestionPanelDynamicItem"]) {
        if (prevIdentifier === "row" &&
            currentQuestion instanceof __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["MatrixDropdownColumn"]) {
            completions = currentQuestion.colOwner["columns"]
                .filter(function (e) { return e.name !== currentQuestion.name; })
                .map(function (column) {
                return {
                    name: "",
                    value: "{row." + column.name + "}",
                    some: "",
                    meta: column.title,
                    identifierRegex: ID_REGEXP
                };
            });
        }
        else if (prevIdentifier === "panel" &&
            currentQuestion.data instanceof __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["QuestionPanelDynamicItem"]) {
            var panel = currentQuestion.data.panel;
            completions = panel.elements
                .filter(function (e) { return e.name !== currentQuestion.name; })
                .map(function (element) {
                return {
                    name: "",
                    value: "{panel." + element.name + "}",
                    some: "",
                    meta: element.name,
                    identifierRegex: ID_REGEXP
                };
            });
        }
        else {
            var operationsFiltered = operations.filter(function (op) { return !prefix || op.value.indexOf(prefix) !== -1; });
            var questionsFiltered = usableQuestions.filter(function (op) { return !prefix || op.name.indexOf(prefix) !== -1; });
            if (currentQuestion instanceof __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["MatrixDropdownColumn"]) {
                completions.push({
                    name: "",
                    value: "{row.",
                    some: "",
                    meta: __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */].getString(__WEBPACK_IMPORTED_MODULE_5__editorLocalization__["b" /* defaultStrings */].pe.aceEditorRowTitle),
                    identifierRegex: ID_REGEXP
                });
            }
            else if (currentQuestion.data instanceof __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["QuestionPanelDynamicItem"]) {
                completions.push({
                    name: "",
                    value: "{panel.",
                    some: "",
                    meta: __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */].getString(__WEBPACK_IMPORTED_MODULE_5__editorLocalization__["b" /* defaultStrings */].pe.aceEditorPanelTitle),
                    identifierRegex: ID_REGEXP
                });
            }
            completions = completions
                .concat(questionsFiltered.map(function (q) {
                return {
                    completer: completer,
                    name: "",
                    value: "{" + q.name + "}",
                    some: "",
                    meta: q.title,
                    identifierRegex: ID_REGEXP
                };
            }))
                .concat(operationsFiltered.map(function (op) {
                return {
                    name: "",
                    value: op.value,
                    some: "",
                    meta: op.title,
                    identifierRegex: ID_REGEXP
                };
            }));
        }
    }
    return completions;
}
function insertMatch(editor, data) {
    if (editor.completer.completions.filterText) {
        var allRanges = editor.selection.getAllRanges();
        for (var rangeIndex = 0, range; (range = allRanges[rangeIndex]); rangeIndex++) {
            range.start.column -= editor.completer.completions.filterText.length;
            var rangeText = editor.session.getTextRange(range);
            if (rangeText.indexOf("{") !== 0) {
                var extRange = range.clone();
                extRange.start.column--;
                if (editor.session.getTextRange(extRange).indexOf("{") === 0) {
                    range = extRange;
                }
            }
            editor.session.remove(range);
        }
    }
    editor.execCommand("insertstring", data.value || data);
}
__WEBPACK_IMPORTED_MODULE_1_knockout__["bindingHandlers"].aceEditor = {
    init: function (element, options) {
        var configs = options();
        var langTools = ace.require("ace/ext/language_tools");
        var langUtils = ace.require("ace/autocomplete/util");
        var editor = ace.edit(element);
        var objectEditor = configs.editor;
        var isUpdating = false;
        editor.setOption("useWorker", false);
        editor.getSession().on("change", function () {
            var errors = createAnnotations(editor.getValue(), objectEditor.syntaxCheckMethodName);
            isUpdating = true;
            objectEditor.koTextValue(editor.getValue());
            isUpdating = false;
            //   objectEditor.koHasError(errors.length > 0);
            //   if (errors.length > 0) {
            //     objectEditor.koErrorText(errors[0].text);
            //   }
            editor.getSession().setAnnotations(errors);
        });
        var updateCallback = function () {
            if (!isUpdating) {
                editor.setValue(objectEditor.koTextValue() || "");
            }
        };
        var valueSubscription = objectEditor.koTextValue.subscribe(updateCallback);
        updateCallback();
        var completer = {
            identifierRegexps: [ID_REGEXP],
            insertMatch: insertMatch,
            getCompletions: function (editor, session, pos, prefix, callback) {
                var prevIdentifier = langUtils.retrievePrecedingIdentifier(session.getLine(pos.row), pos.column - 1);
                var completions = doGetCompletions(prevIdentifier, prefix, configs, completer);
                callback(null, completions);
            },
            getDocTooltip: function (item) {
                item.docHTML =
                    "<div style='max-width: 300px; white-space: normal;'>" +
                        item.meta +
                        "</div>";
            }
        };
        langTools.setCompleters([completer]);
        editor.setOptions({
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true
        });
        __WEBPACK_IMPORTED_MODULE_1_knockout__["utils"].domNodeDisposal.addDisposeCallback(element, function () {
            editor.destroy();
            valueSubscription.dispose();
        });
        editor.focus();
    }
};


/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyDefaultValueEditor; });






var SurveyPropertyDefaultValueEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyDefaultValueEditor, _super);
    function SurveyPropertyDefaultValueEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.koSurvey = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["Survey"]());
        return _this;
    }
    SurveyPropertyDefaultValueEditor.prototype.getValueText = function (value) {
        if (!value)
            return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.empty");
        return JSON.stringify(value);
    };
    SurveyPropertyDefaultValueEditor.prototype.beforeShow = function () {
        _super.prototype.beforeShow.call(this);
        this.createSurvey();
    };
    SurveyPropertyDefaultValueEditor.prototype.onBeforeApply = function () {
        if (!this.survey)
            return;
        this.setValueCore(this.survey.getValue(this.object.name));
    };
    Object.defineProperty(SurveyPropertyDefaultValueEditor.prototype, "editorType", {
        get: function () {
            return "value";
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyDefaultValueEditor.prototype.createSurvey = function () {
        var qjson = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"]().toJsonObject(this.object);
        qjson.type = this.getJsonType(this.object.getType());
        qjson.titleLocation = "hidden";
        delete qjson["visible"];
        delete qjson["visibleIf"];
        delete qjson["enable"];
        delete qjson["enableIf"];
        var json = { questions: [], showNavigationButtons: false };
        json.questions.push(qjson);
        this.survey = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["Survey"](json);
        this.survey.setValue(this.object.name, this.editingValue);
        this.koSurvey(this.survey);
    };
    SurveyPropertyDefaultValueEditor.prototype.getJsonType = function (type) {
        return type != "expression" ? type : "text";
    };
    return SurveyPropertyDefaultValueEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__["a" /* SurveyPropertyModalEditor */]));

__WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("value", function (property) {
    return new SurveyPropertyDefaultValueEditor(property);
});


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyItemsEditor__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__objectProperty__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__propertyEditorFactory__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_utils__ = __webpack_require__(16);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyItemValuesEditor; });
/* unused harmony export SurveyPropertyItemValuesEditorColumn */
/* unused harmony export SurveyPropertyItemValuesEditorItem */
/* unused harmony export SurveyPropertyItemValuesEditorCell */








var SurveyPropertyItemValuesEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyItemValuesEditor, _super);
    function SurveyPropertyItemValuesEditor(property) {
        var _this = _super.call(this, property) || this;
        var self = _this;
        _this.columnsValue = _this.createColumns();
        _this.koActiveView = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("form");
        _this.koShowTextView = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](_this.canShowTextView);
        _this.koItemsText = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]("");
        _this.koActiveView.subscribe(function (newValue) {
            if (newValue == "form")
                self.updateItems(self.koItemsText());
            else
                self.koItemsText(self.getItemsText());
        });
        _this.changeToTextViewClick = function () {
            self.koActiveView("text");
        };
        _this.changeToFormViewClick = function () {
            self.koActiveView("form");
        };
        return _this;
    }
    Object.defineProperty(SurveyPropertyItemValuesEditor.prototype, "editorType", {
        get: function () {
            return "itemvalues";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyItemValuesEditor.prototype, "columns", {
        get: function () {
            return this.columnsValue;
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyItemValuesEditor.prototype.checkForErrors = function () {
        var result = false;
        for (var i = 0; i < this.koItems().length; i++) {
            var item = this.koItems()[i];
            result = item.hasError || result;
        }
        return result;
    };
    SurveyPropertyItemValuesEditor.prototype.createColumns = function () {
        var result = [];
        var properties = this.getProperties();
        for (var i = 0; i < properties.length; i++) {
            if (!properties[i].visible)
                continue;
            result.push(new SurveyPropertyItemValuesEditorColumn(properties[i]));
        }
        return result;
    };
    SurveyPropertyItemValuesEditor.prototype.getProperties = function () {
        //TODO remove these class and property registration later.
        if (!__WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.findClass("itemvalue")) {
            __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.addClass("itemvalue", []);
        }
        if (!__WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.findProperty("itemvalue", "value")) {
            __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.addProperty("itemvalue", { name: "!value" });
        }
        if (!__WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.findProperty("itemvalue", "text")) {
            __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.addProperty("itemvalue", {
                name: "text",
                onGetValue: function (obj) {
                    return obj.locText.pureText;
                }
            });
        }
        var className = this.property ? this.property.type : "itemvalue";
        if (className == this.editorType)
            className = "itemvalue";
        var properties = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.getProperties(className);
        return properties;
    };
    SurveyPropertyItemValuesEditor.prototype.createEditorOptions = function () {
        var options = _super.prototype.createEditorOptions.call(this);
        options.showTextView = true;
        return options;
    };
    SurveyPropertyItemValuesEditor.prototype.onSetEditorOptions = function (editorOptions) {
        _super.prototype.onSetEditorOptions.call(this, editorOptions);
        this.koShowTextView(this.canShowTextView && editorOptions.showTextView);
    };
    SurveyPropertyItemValuesEditor.prototype.createNewEditorItem = function () {
        var nextValue = null;
        var values = this.koItems().map(function (item) {
            return item.item.itemValue;
        });
        nextValue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_utils__["b" /* getNextValue */])("item", values);
        var itemValue = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ItemValue"](nextValue);
        itemValue.locOwner = this;
        if (this.options) {
            this.options.onItemValueAddedCallback(this.editablePropertyName, itemValue);
        }
        return new SurveyPropertyItemValuesEditorItem(itemValue, this.columns);
    };
    SurveyPropertyItemValuesEditor.prototype.createEditorItem = function (item) {
        var itemValue = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ItemValue"](null);
        itemValue.locOwner = this;
        itemValue.setData(item);
        return new SurveyPropertyItemValuesEditorItem(itemValue, this.columns);
    };
    SurveyPropertyItemValuesEditor.prototype.createItemFromEditorItem = function (editorItem) {
        var item = editorItem.item;
        var alwaySaveTextInPropertyEditors = this.options && this.options.alwaySaveTextInPropertyEditors;
        if (!alwaySaveTextInPropertyEditors && item.text == item.value) {
            item.text = null;
        }
        var itemValue = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ItemValue"](null);
        itemValue.setData(item);
        return itemValue;
    };
    SurveyPropertyItemValuesEditor.prototype.onBeforeApply = function () {
        if (this.koActiveView() != "form") {
            this.updateItems(this.koItemsText());
        }
        _super.prototype.onBeforeApply.call(this);
    };
    SurveyPropertyItemValuesEditor.prototype.updateItems = function (text) {
        var items = [];
        if (text) {
            var texts = text.split("\n");
            for (var i = 0; i < texts.length; i++) {
                if (!texts[i])
                    continue;
                var valueItem = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ItemValue"](texts[i]);
                var item = {
                    value: valueItem.value,
                    text: valueItem.hasText ? valueItem.text : ""
                };
                items.push(item);
            }
        }
        this.koItems(this.getItemsFromValue(items));
    };
    SurveyPropertyItemValuesEditor.prototype.getItemsText = function () {
        var text = [];
        var items = this.koItems();
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (item.cells[0].hasError)
                continue;
            var itemText = item.cells[0].value;
            if (item.cells[1].value)
                itemText += __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ItemValue"].Separator + item.cells[1].value;
            text.push(itemText);
        }
        return text.join("\n");
    };
    Object.defineProperty(SurveyPropertyItemValuesEditor.prototype, "canShowTextView", {
        get: function () {
            return this.columns.length == 2;
        },
        enumerable: true,
        configurable: true
    });
    return SurveyPropertyItemValuesEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyItemsEditor__["a" /* SurveyPropertyItemsEditor */]));

var SurveyPropertyItemValuesEditorColumn = (function () {
    function SurveyPropertyItemValuesEditorColumn(property) {
        this.property = property;
    }
    Object.defineProperty(SurveyPropertyItemValuesEditorColumn.prototype, "text", {
        get: function () {
            var text = __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe." + this.property.name);
            return text ? text : this.property.name;
        },
        enumerable: true,
        configurable: true
    });
    return SurveyPropertyItemValuesEditorColumn;
}());

var SurveyPropertyItemValuesEditorItem = (function () {
    function SurveyPropertyItemValuesEditorItem(item, columns) {
        this.item = item;
        this.columns = columns;
        this.cellsValue = [];
        for (var i = 0; i < columns.length; i++) {
            this.cellsValue.push(new SurveyPropertyItemValuesEditorCell(item, columns[i]));
        }
    }
    Object.defineProperty(SurveyPropertyItemValuesEditorItem.prototype, "cells", {
        get: function () {
            return this.cellsValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyItemValuesEditorItem.prototype, "hasError", {
        get: function () {
            var res = false;
            for (var i = 0; i < this.cells.length; i++) {
                res = this.cells[i].hasError || res;
            }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    return SurveyPropertyItemValuesEditorItem;
}());

var SurveyPropertyItemValuesEditorCell = (function () {
    function SurveyPropertyItemValuesEditorCell(item, column) {
        this.item = item;
        this.column = column;
        var self = this;
        var propEvent = function (property, newValue) {
            self.value = newValue;
        };
        this.objectPropertyValue = new __WEBPACK_IMPORTED_MODULE_5__objectProperty__["a" /* SurveyObjectProperty */](this.property, propEvent);
        this.objectPropertyValue.editor.isInplaceProperty = true;
        this.objectProperty.object = item;
    }
    Object.defineProperty(SurveyPropertyItemValuesEditorCell.prototype, "property", {
        get: function () {
            return this.column.property;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyItemValuesEditorCell.prototype, "objectProperty", {
        get: function () {
            return this.objectPropertyValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyItemValuesEditorCell.prototype, "editor", {
        get: function () {
            return this.objectProperty.editor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyItemValuesEditorCell.prototype, "koValue", {
        get: function () {
            return this.objectProperty.editor.koValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyItemValuesEditorCell.prototype, "value", {
        get: function () {
            return this.property.getValue(this.item);
        },
        set: function (val) {
            this.property.setValue(this.item, val, null);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyItemValuesEditorCell.prototype, "hasError", {
        get: function () {
            return this.editor.hasError();
        },
        enumerable: true,
        configurable: true
    });
    return SurveyPropertyItemValuesEditorCell;
}());

__WEBPACK_IMPORTED_MODULE_6__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("itemvalues", function (property) {
    return new SurveyPropertyItemValuesEditor(property);
}, "itemvalue");


/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__questionEditors_questionEditor__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__propertyNestedPropertyEditor__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyDropdownColumnsEditor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return SurveyPropertyMatrixDropdownColumnsItem; });







var SurveyPropertyDropdownColumnsEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyDropdownColumnsEditor, _super);
    function SurveyPropertyDropdownColumnsEditor(property) {
        return _super.call(this, property) || this;
    }
    Object.defineProperty(SurveyPropertyDropdownColumnsEditor.prototype, "editorType", {
        get: function () {
            return "matrixdropdowncolumns";
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyDropdownColumnsEditor.prototype.createNewEditorItem = function () {
        var newColumn = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["MatrixDropdownColumn"]("");
        if (this.options) {
            this.options.onMatrixDropdownColumnAddedCallback(newColumn);
        }
        //newColumn.colOwner = TODO set colOwner.
        return new SurveyPropertyMatrixDropdownColumnsItem(newColumn, this.options);
    };
    SurveyPropertyDropdownColumnsEditor.prototype.createEditorItem = function (item) {
        return new SurveyPropertyMatrixDropdownColumnsItem(item, this.options);
    };
    SurveyPropertyDropdownColumnsEditor.prototype.createItemFromEditorItem = function (editorItem) {
        return editorItem.column;
    };
    return SurveyPropertyDropdownColumnsEditor;
}(__WEBPACK_IMPORTED_MODULE_5__propertyNestedPropertyEditor__["a" /* SurveyNestedPropertyEditor */]));

var SurveyPropertyMatrixDropdownColumnsItem = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyMatrixDropdownColumnsItem, _super);
    function SurveyPropertyMatrixDropdownColumnsItem(column, options) {
        if (options === void 0) { options = null; }
        var _this = _super.call(this) || this;
        _this.column = column;
        _this.options = options;
        _this.cellTypeChoices = _this.getPropertyChoices();
        _this.koName = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](column.name);
        _this.koCellType = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](column.cellType);
        _this.koTitle = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](column.name === column.title ? "" : column.title);
        _this.koIsRequired = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](_this.column.isRequired);
        _this.koHasError = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false);
        var self = _this;
        _this.koCanEdit = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            return self.koCellType() != "default";
        });
        _this.koEditorName = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */]
                .getString("pe.columnEdit")["format"](self.koName());
        });
        _this.koCellType.subscribe(function (newValue) {
            self.resetSurveyQuestionEditor();
        });
        return _this;
    }
    SurveyPropertyMatrixDropdownColumnsItem.prototype.createSurveyQuestionEditor = function () {
        this.column.cellType = this.koCellType();
        return new __WEBPACK_IMPORTED_MODULE_3__questionEditors_questionEditor__["b" /* SurveyQuestionEditor */](this.column, null, "matrixdropdowncolumn@" + this.koCellType(), this.options);
    };
    SurveyPropertyMatrixDropdownColumnsItem.prototype.hasError = function () {
        if (_super.prototype.hasError.call(this))
            return true;
        this.koHasError(!this.koName());
        return this.koHasError();
    };
    SurveyPropertyMatrixDropdownColumnsItem.prototype.apply = function () {
        _super.prototype.apply.call(this);
        this.column.name = this.koName();
        this.column.title = this.koTitle();
        this.column.cellType = this.koCellType();
        this.column.isRequired = this.koIsRequired();
    };
    SurveyPropertyMatrixDropdownColumnsItem.prototype.getPropertyChoices = function () {
        var property = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.findProperty("matrixdropdowncolumn", "cellType");
        return property ? property.choices : [];
    };
    return SurveyPropertyMatrixDropdownColumnsItem;
}(__WEBPACK_IMPORTED_MODULE_5__propertyNestedPropertyEditor__["b" /* SurveyNestedPropertyEditorItem */]));

__WEBPACK_IMPORTED_MODULE_6__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("matrixdropdowncolumns", function (property) {
    return new SurveyPropertyDropdownColumnsEditor(property);
});


/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyMultipleValuesEditor; });






var SurveyPropertyMultipleValuesEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyMultipleValuesEditor, _super);
    function SurveyPropertyMultipleValuesEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.items = [];
        _this.koEditingValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
        _this.koItems = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
        _this.setItems();
        return _this;
    }
    SurveyPropertyMultipleValuesEditor.prototype.getValueText = function (value) {
        if (!value)
            return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.empty");
        if (!Array.isArray(value))
            value = [value];
        var str = "[";
        for (var i = 0; i < value.length; i++) {
            if (i > 0)
                str += ", ";
            str += this.getTextByItemValue(value[i]);
        }
        str += "]";
        return str;
    };
    SurveyPropertyMultipleValuesEditor.prototype.setObject = function (value) {
        _super.prototype.setObject.call(this, value);
        this.setItems();
        this.setEditingValue();
    };
    SurveyPropertyMultipleValuesEditor.prototype.updateValue = function () {
        _super.prototype.updateValue.call(this);
        this.setEditingValue();
    };
    SurveyPropertyMultipleValuesEditor.prototype.onBeforeApply = function () {
        this.koValue(this.koEditingValue());
    };
    Object.defineProperty(SurveyPropertyMultipleValuesEditor.prototype, "editorType", {
        get: function () {
            return "multiplevalues";
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyMultipleValuesEditor.prototype.setItems = function () {
        __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ItemValue"].setData(this.items, this.property.choices);
        this.koItems(this.items);
    };
    SurveyPropertyMultipleValuesEditor.prototype.getTextByItemValue = function (val) {
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].value == val)
                return this.items[i].text;
        }
        return val;
    };
    SurveyPropertyMultipleValuesEditor.prototype.setEditingValue = function () {
        var val = this.koValue();
        if (val == null || val == undefined)
            val = [];
        if (!Array.isArray(val))
            val = [val];
        this.koEditingValue(val);
    };
    return SurveyPropertyMultipleValuesEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__["a" /* SurveyPropertyModalEditor */]));

__WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("multiplevalues", function (property) {
    return new SurveyPropertyMultipleValuesEditor(property);
});


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyResultfullEditor; });
/* unused harmony export SurveyPropertyResultfullEditorItem */






var SurveyPropertyResultfullEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyResultfullEditor, _super);
    function SurveyPropertyResultfullEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.items = [];
        _this.koItems = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
        _this.createSurvey();
        return _this;
    }
    Object.defineProperty(SurveyPropertyResultfullEditor.prototype, "editorType", {
        get: function () {
            return "restfull";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyPropertyResultfullEditor.prototype, "restfullValue", {
        get: function () {
            if (this.editingObject)
                return this.editingObject[this.property.name];
            if (this.editingValue)
                return this.editingValue;
            return null;
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyResultfullEditor.prototype.getValueText = function (value) {
        if (!value || !value.url)
            return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.empty");
        var str = value.url;
        if (str.length > 20) {
            str = str.substr(0, 20) + "...";
        }
        return str;
    };
    SurveyPropertyResultfullEditor.prototype.addItem = function (propName, val) {
        var self = this;
        this.items.push(new SurveyPropertyResultfullEditorItem(propName, val ? val[propName] : "", function (item) {
            self.onItemValueChanged(item);
        }));
    };
    SurveyPropertyResultfullEditor.prototype.onItemValueChanged = function (item) {
        this.question.choicesByUrl[item.name] = item.koValue();
        this.run();
    };
    SurveyPropertyResultfullEditor.prototype.onValueChanged = function () {
        var val = this.restfullValue;
        this.items = [];
        this.addItem("url", val);
        this.addItem("path", val);
        this.addItem("valueName", val);
        this.addItem("titleName", val);
        if (val && val["getCustomPropertiesNames"]) {
            var customProperties = val["getCustomPropertiesNames"]();
            for (var i = 0; i < customProperties.length; i++) {
                var propName = customProperties[i];
                this.addItem(propName, val);
            }
        }
        this.koItems(this.items);
    };
    SurveyPropertyResultfullEditor.prototype.onBeforeApply = function () {
        var val = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["ChoicesRestfull"]();
        val["owner"] = this.editingObject;
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];
            val[item.name] = item.koValue();
        }
        this.setValueCore(val);
    };
    SurveyPropertyResultfullEditor.prototype.run = function () {
        this.question.choicesByUrl.run();
    };
    SurveyPropertyResultfullEditor.prototype.createSurvey = function () {
        this.survey = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["Survey"]();
        this.survey.showNavigationButtons = false;
        this.survey.showQuestionNumbers = "off";
        var page = this.survey.addNewPage("page1");
        this.question = page.addNewQuestion("dropdown", "q1");
        this.question.title = __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.testService");
        this.question.choices = [];
    };
    return SurveyPropertyResultfullEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyModalEditor__["a" /* SurveyPropertyModalEditor */]));

var SurveyPropertyResultfullEditorItem = (function () {
    function SurveyPropertyResultfullEditorItem(name, val, onValueChanged) {
        this.name = name;
        this.onValueChanged = onValueChanged;
        this.isSetttingValue = false;
        this.koValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](val ? val : "");
        var self = this;
        this.koValue.subscribe(function (newValue) {
            if (!self.isSetttingValue) {
                self.onValueChanged(self);
            }
        });
    }
    SurveyPropertyResultfullEditorItem.prototype.setValue = function (val) {
        this.isSetttingValue = true;
        this.koValue(val);
        this.isSetttingValue = false;
    };
    return SurveyPropertyResultfullEditorItem;
}());

__WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("restfull", function (property) {
    return new SurveyPropertyResultfullEditor(property);
});


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__surveyHelper__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__questionEditors_questionEditor__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__propertyNestedPropertyEditor__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyTextItemsEditor; });
/* unused harmony export SurveyPropertyTextItemsItem */








var SurveyPropertyTextItemsEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyTextItemsEditor, _super);
    function SurveyPropertyTextItemsEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.isTitleVisible = _this.getIsTitleVisible();
        return _this;
    }
    Object.defineProperty(SurveyPropertyTextItemsEditor.prototype, "editorType", {
        get: function () {
            return "textitems";
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyTextItemsEditor.prototype.createNewEditorItem = function () {
        var newItem = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["MultipleTextItem"](this.getNewName());
        //newColumn.colOwner = TODO set colOwner.
        return new SurveyPropertyTextItemsItem(newItem);
    };
    SurveyPropertyTextItemsEditor.prototype.createEditorItem = function (item) {
        return new SurveyPropertyTextItemsItem(item);
    };
    SurveyPropertyTextItemsEditor.prototype.createItemFromEditorItem = function (editorItem) {
        return editorItem.item;
    };
    SurveyPropertyTextItemsEditor.prototype.getNewName = function () {
        var objs = [];
        var items = this.koItems();
        for (var i = 0; i < items.length; i++) {
            objs.push({ name: items[i].koName() });
        }
        return __WEBPACK_IMPORTED_MODULE_3__surveyHelper__["b" /* SurveyHelper */].getNewName(objs, "text");
    };
    SurveyPropertyTextItemsEditor.prototype.getIsTitleVisible = function () {
        var property = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.findProperty("multipletextitem", "title");
        return property != null && property.visible;
    };
    return SurveyPropertyTextItemsEditor;
}(__WEBPACK_IMPORTED_MODULE_6__propertyNestedPropertyEditor__["a" /* SurveyNestedPropertyEditor */]));

var SurveyPropertyTextItemsItem = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyTextItemsItem, _super);
    function SurveyPropertyTextItemsItem(item) {
        var _this = _super.call(this) || this;
        _this.item = item;
        _this.koName = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](item.name);
        _this.koTitle = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](item.name === item.title ? "" : item.title);
        _this.koIsRequired = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](_this.item.isRequired);
        _this.koHasError = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](false);
        var self = _this;
        _this.koEditorName = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */]
                .getString("pe.itemEdit")["format"](self.koName());
        });
        return _this;
    }
    SurveyPropertyTextItemsItem.prototype.createSurveyQuestionEditor = function () {
        return new __WEBPACK_IMPORTED_MODULE_5__questionEditors_questionEditor__["b" /* SurveyQuestionEditor */](this.item, null, "multipletextitem");
    };
    SurveyPropertyTextItemsItem.prototype.hasError = function () {
        if (_super.prototype.hasError.call(this))
            return true;
        this.koHasError(!this.koName());
        return this.koHasError();
    };
    SurveyPropertyTextItemsItem.prototype.apply = function () {
        _super.prototype.apply.call(this);
        this.item.name = this.koName();
        this.item.title = this.koTitle();
        this.item.isRequired = this.koIsRequired();
    };
    return SurveyPropertyTextItemsItem;
}(__WEBPACK_IMPORTED_MODULE_6__propertyNestedPropertyEditor__["b" /* SurveyNestedPropertyEditorItem */]));

__WEBPACK_IMPORTED_MODULE_7__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("textitems", function (property) {
    return new SurveyPropertyTextItemsEditor(property);
});


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyItemsEditor__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyTriggersEditor; });
/* unused harmony export SurveyPropertyTrigger */
/* unused harmony export SurveyPropertyVisibleTrigger */
/* unused harmony export SurveyPropertySetValueTrigger */
/* unused harmony export SurveyPropertyTriggerObjects */






var SurveyPropertyTriggersEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyTriggersEditor, _super);
    function SurveyPropertyTriggersEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.availableTriggers = [];
        _this.triggerClasses = [];
        var self = _this;
        _this.onDeleteClick = function () {
            self.koItems.remove(self.koSelected());
        };
        _this.onAddClick = function (item) {
            self.addItem(item.value);
        };
        _this.koSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](null);
        _this.koPages = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
        _this.koQuestions = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
        _this.koElements = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"]();
        _this.triggerClasses = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.getChildrenClasses("surveytrigger", true);
        _this.availableTriggers = _this.getAvailableTriggers();
        _this.koTriggers = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"](_this.getLocalizedTriggers());
        return _this;
    }
    Object.defineProperty(SurveyPropertyTriggersEditor.prototype, "editorType", {
        get: function () {
            return "triggers";
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyTriggersEditor.prototype.onValueChanged = function () {
        if (this.editingObject) {
            this.koPages(this.getNames(this.editingObject.pages));
            this.koQuestions(this.getNames(this.editingObject.getAllQuestions()));
            this.koElements(this.getNames(this.getAllElements()));
        }
        _super.prototype.onValueChanged.call(this);
        if (this.koSelected) {
            this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null);
        }
    };
    //TODO this code should be in the library
    SurveyPropertyTriggersEditor.prototype.getAllElements = function () {
        var res = [];
        var pages = this.editingObject.pages;
        for (var i = 0; i < pages.length; i++) {
            this.addElemenetsIntoList(pages[i], res);
        }
        return res;
    };
    SurveyPropertyTriggersEditor.prototype.addElemenetsIntoList = function (element, list) {
        var elements = element.getElementsInDesign(false);
        if (!elements)
            return;
        for (var i = 0; i < elements.length; i++) {
            list.push(elements[i]);
            this.addElemenetsIntoList(elements[i], list);
        }
    };
    SurveyPropertyTriggersEditor.prototype.addItem = function (triggerType) {
        var trigger = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.createClass(triggerType);
        var triggerItem = this.createPropertyTrigger(trigger);
        this.koItems.push(triggerItem);
        this.koSelected(triggerItem);
    };
    SurveyPropertyTriggersEditor.prototype.createEditorItem = function (item) {
        var jsonObj = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"]();
        var trigger = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.createClass(item.getType());
        jsonObj.toObject(item, trigger);
        return this.createPropertyTrigger(trigger);
    };
    SurveyPropertyTriggersEditor.prototype.createItemFromEditorItem = function (editorItem) {
        var editorTrigger = editorItem;
        return editorTrigger.createTrigger();
    };
    SurveyPropertyTriggersEditor.prototype.getLocalizedTriggers = function () {
        var res = [];
        for (var i = 0; i < this.availableTriggers.length; i++) {
            var name = this.availableTriggers[i];
            res.push({ value: name, text: __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getTriggerName(name) });
        }
        return res;
    };
    SurveyPropertyTriggersEditor.prototype.getAvailableTriggers = function () {
        var result = [];
        for (var i = 0; i < this.triggerClasses.length; i++) {
            result.push(this.triggerClasses[i].name);
        }
        return result;
    };
    SurveyPropertyTriggersEditor.prototype.getNames = function (items) {
        var names = [];
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (item["name"]) {
                names.push(item["name"]);
            }
        }
        return names;
    };
    SurveyPropertyTriggersEditor.prototype.createPropertyTrigger = function (trigger) {
        var triggerItem = null;
        if (trigger.getType() == "visibletrigger") {
            triggerItem = new SurveyPropertyVisibleTrigger(trigger, this.koPages, this.koElements);
        }
        if (trigger.getType() == "setvaluetrigger") {
            triggerItem = new SurveyPropertySetValueTrigger(trigger, this.koQuestions);
        }
        if (!triggerItem) {
            triggerItem = new SurveyPropertyTrigger(trigger);
        }
        return triggerItem;
    };
    return SurveyPropertyTriggersEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyItemsEditor__["a" /* SurveyPropertyItemsEditor */]));

var SurveyPropertyTrigger = (function () {
    function SurveyPropertyTrigger(trigger) {
        this.trigger = trigger;
        this.availableOperators = [];
        this.availableOperators = __WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].getOperators();
        this.triggerType = trigger.getType();
        this.koType = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](this.triggerType);
        this.koName = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.name);
        this.koOperator = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.operator);
        this.koValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.value);
        var self = this;
        this.koRequireValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            return self.koOperator() != "empty" && self.koOperator() != "notempty";
        });
        this.koIsValid = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            if (self.koName() && (!self.koRequireValue() || self.koValue()))
                return true;
            return false;
        });
        this.koText = __WEBPACK_IMPORTED_MODULE_1_knockout__["computed"](function () {
            self.koName();
            self.koOperator();
            self.koValue();
            return self.getText();
        });
    }
    SurveyPropertyTrigger.prototype.createTrigger = function () {
        var trigger = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.createClass(this.triggerType);
        trigger.name = this.koName();
        trigger.operator = this.koOperator();
        trigger.value = this.koValue();
        return trigger;
    };
    SurveyPropertyTrigger.prototype.getText = function () {
        if (!this.koIsValid())
            return __WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.triggerNotSet");
        return (__WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.triggerRunIf") +
            " '" +
            this.koName() +
            "' " +
            this.getOperatorText() +
            this.getValueText());
    };
    SurveyPropertyTrigger.prototype.getOperatorText = function () {
        var op = this.koOperator();
        for (var i = 0; i < this.availableOperators.length; i++) {
            if (this.availableOperators[i].name == op)
                return this.availableOperators[i].text;
        }
        return op;
    };
    SurveyPropertyTrigger.prototype.getValueText = function () {
        if (!this.koRequireValue())
            return "";
        return " " + this.koValue();
    };
    return SurveyPropertyTrigger;
}());

var SurveyPropertyVisibleTrigger = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyVisibleTrigger, _super);
    function SurveyPropertyVisibleTrigger(trigger, koPages, koQuestions) {
        var _this = _super.call(this, trigger) || this;
        _this.trigger = trigger;
        _this.pages = new SurveyPropertyTriggerObjects(__WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.triggerMakePagesVisible"), koPages(), trigger.pages);
        _this.questions = new SurveyPropertyTriggerObjects(__WEBPACK_IMPORTED_MODULE_4__editorLocalization__["a" /* editorLocalization */].getString("pe.triggerMakeQuestionsVisible"), koQuestions(), trigger.questions);
        return _this;
    }
    SurveyPropertyVisibleTrigger.prototype.createTrigger = function () {
        var trigger = _super.prototype.createTrigger.call(this);
        trigger.pages = this.pages.koChoosen();
        trigger.questions = this.questions.koChoosen();
        return trigger;
    };
    return SurveyPropertyVisibleTrigger;
}(SurveyPropertyTrigger));

var SurveyPropertySetValueTrigger = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertySetValueTrigger, _super);
    function SurveyPropertySetValueTrigger(trigger, koQuestions) {
        var _this = _super.call(this, trigger) || this;
        _this.trigger = trigger;
        _this.koQuestions = koQuestions;
        _this.kosetToName = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.setToName);
        _this.kosetValue = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.setValue);
        _this.koisVariable = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](trigger.isVariable);
        return _this;
    }
    SurveyPropertySetValueTrigger.prototype.createTrigger = function () {
        var trigger = _super.prototype.createTrigger.call(this);
        trigger.setToName = this.kosetToName();
        trigger.setValue = this.kosetValue();
        trigger.isVariable = this.koisVariable();
        return trigger;
    };
    return SurveyPropertySetValueTrigger;
}(SurveyPropertyTrigger));

var SurveyPropertyTriggerObjects = (function () {
    function SurveyPropertyTriggerObjects(title, allObjects, choosenObjects) {
        this.title = title;
        this.koChoosen = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"](choosenObjects);
        var array = [];
        for (var i = 0; i < allObjects.length; i++) {
            var item = allObjects[i];
            if (choosenObjects.indexOf(item) < 0) {
                array.push(item);
            }
        }
        this.koObjects = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"](array);
        this.koSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
        this.koChoosenSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"]();
        var self = this;
        this.onDeleteClick = function () {
            self.deleteItem();
        };
        this.onAddClick = function () {
            self.addItem();
        };
    }
    SurveyPropertyTriggerObjects.prototype.deleteItem = function () {
        this.changeItems(this.koChoosenSelected(), this.koChoosen, this.koObjects);
    };
    SurveyPropertyTriggerObjects.prototype.addItem = function () {
        this.changeItems(this.koSelected(), this.koObjects, this.koChoosen);
    };
    SurveyPropertyTriggerObjects.prototype.changeItems = function (item, removedFrom, addTo) {
        removedFrom.remove(item);
        addTo.push(item);
        removedFrom.sort();
        addTo.sort();
    };
    return SurveyPropertyTriggerObjects;
}());

__WEBPACK_IMPORTED_MODULE_5__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("triggers", function (property) {
    return new SurveyPropertyTriggersEditor(property);
});


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_survey_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__propertyItemsEditor__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__objectEditor__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__editorLocalization__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__propertyEditorFactory__ = __webpack_require__(4);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPropertyValidatorsEditor; });
/* unused harmony export SurveyPropertyValidatorItem */







var SurveyPropertyValidatorsEditor = (function (_super) {
    __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __extends */](SurveyPropertyValidatorsEditor, _super);
    function SurveyPropertyValidatorsEditor(property) {
        var _this = _super.call(this, property) || this;
        _this.availableValidators = [];
        _this.validatorClasses = [];
        var self = _this;
        _this.selectedObjectEditor = new __WEBPACK_IMPORTED_MODULE_4__objectEditor__["a" /* SurveyObjectEditor */]();
        _this.selectedObjectEditor.onPropertyValueChanged.add(function (sender, options) {
            self.onPropertyValueChanged(options.property, options.object, options.newValue);
        });
        _this.koSelected = __WEBPACK_IMPORTED_MODULE_1_knockout__["observable"](null);
        _this.koSelected.subscribe(function (newValue) {
            self.selectedObjectEditor.selectedObject =
                newValue != null ? newValue.validator : null;
        });
        _this.validatorClasses = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.getChildrenClasses("surveyvalidator", true);
        _this.availableValidators = _this.getAvailableValidators();
        _this.koValidators = __WEBPACK_IMPORTED_MODULE_1_knockout__["observableArray"](_this.getLocalizedValidators());
        _this.onDeleteClick = function () {
            self.koItems.remove(self.koSelected());
        };
        _this.onAddClick = function (item) {
            self.addItem(item.value);
        };
        return _this;
    }
    Object.defineProperty(SurveyPropertyValidatorsEditor.prototype, "editorType", {
        get: function () {
            return "validators";
        },
        enumerable: true,
        configurable: true
    });
    SurveyPropertyValidatorsEditor.prototype.onValueChanged = function () {
        _super.prototype.onValueChanged.call(this);
        if (this.koSelected) {
            this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null);
        }
    };
    SurveyPropertyValidatorsEditor.prototype.createEditorItem = function (item) {
        var jsonObj = new __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"]();
        var validator = __WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.createClass(item.getType());
        jsonObj.toObject(item, validator);
        validator.locOwner = this;
        return new SurveyPropertyValidatorItem(validator);
    };
    SurveyPropertyValidatorsEditor.prototype.createItemFromEditorItem = function (editorItem) {
        var item = editorItem;
        return item.validator;
    };
    SurveyPropertyValidatorsEditor.prototype.addItem = function (validatorType) {
        var newValidator = new SurveyPropertyValidatorItem(__WEBPACK_IMPORTED_MODULE_2_survey_knockout__["JsonObject"].metaData.createClass(validatorType));
        newValidator["locOwner"] = this;
        this.koItems.push(newValidator);
        this.koSelected(newValidator);
    };
    SurveyPropertyValidatorsEditor.prototype.getLocalizedValidators = function () {
        var res = [];
        for (var i = 0; i < this.availableValidators.length; i++) {
            var name = this.availableValidators[i];
            res.push({
                value: name,
                text: __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */].getValidatorName(name)
            });
        }
        return res;
    };
    SurveyPropertyValidatorsEditor.prototype.getAvailableValidators = function () {
        var res = [];
        for (var i = 0; i < this.validatorClasses.length; i++) {
            res.push(this.validatorClasses[i].name);
        }
        return res;
    };
    SurveyPropertyValidatorsEditor.prototype.onPropertyValueChanged = function (property, obj, newValue) {
        if (this.koSelected() == null)
            return;
        this.koSelected().validator[property.name] = newValue;
    };
    return SurveyPropertyValidatorsEditor;
}(__WEBPACK_IMPORTED_MODULE_3__propertyItemsEditor__["a" /* SurveyPropertyItemsEditor */]));

var SurveyPropertyValidatorItem = (function () {
    function SurveyPropertyValidatorItem(validator) {
        this.validator = validator;
        this.text = __WEBPACK_IMPORTED_MODULE_5__editorLocalization__["a" /* editorLocalization */].getValidatorName(validator.getType());
    }
    return SurveyPropertyValidatorItem;
}());

__WEBPACK_IMPORTED_MODULE_6__propertyEditorFactory__["a" /* SurveyPropertyEditorFactory */].registerEditor("validators", function (property) {
    return new SurveyPropertyValidatorsEditor(property);
});


/***/ }),
/* 58 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 59 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 60 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 61 */
/***/ (function(module, exports) {

module.exports = "<div class=\"svd_container\">\n     <ul class=\"navbar-default container-fluid nav nav-tabs editor-tabs\">\n        <li class=\"nav-item\" data-bind=\"css: {active: koViewType() == 'designer'}\">\n            <a class=\"nav-link\" href=\"#\" data-bind=\"click:selectDesignerClick, text: $root.getLocString('ed.designer')\"></a>\n        </li>\n             <li class=\"nav-item\" data-bind=\"visible: showTestSurveyTab, css: {active: koViewType() == 'test'}\">\n            <a class=\"nav-link\" href=\"#\" data-bind=\"click:selectTestClick, text: $root.getLocString('ed.testSurvey')\"></a>\n        </li>\n        <li class=\"nav-item\" data-bind=\"visible: showEmbededSurveyTab, css: {active: koViewType() == 'embed'}\">\n            <a class=\"nav-link\" href=\"#\" data-bind=\"click:selectEmbedClick, text: $root.getLocString('ed.embedSurvey')\"></a>\n        </li>\n    </ul>\n\n    <div class=\"panel card svd_content\">\n        <div class=\"row svd_survey_designer\" data-bind=\"visible: koViewType() == 'designer'\">\n            <div class=\"col-lg-2 col-md-2 col-sm-1 col-xs-1 svd_toolbox\">\n                <!-- ko if: toolbox.koHasCategories -->\n                <div class=\"panel-group\" role=\"tablist\" data-bind=\"foreach: toolbox.koCategories\">\n                    <div class=\"panel panel-info\">\n                        <div class=\"panel-heading\" role=\"tab\" data-bind=\"css: { 'header-expand': !koCollapsed() }, click: expand\">\n                            <span data-bind=\"text: name\"></span>\n                            <span class=\"icon-toolbox-arrow\" data-bind=\"css: { 'icon-toolbox-arrow-down': koCollapsed(), 'icon-toolbox-arrow-up': !koCollapsed()}\"></span>\n                        </div>\n                        <div role=\"tabpanel\" data-bind=\"css: { 'panel-collapse collapse': koCollapsed}\">\n                            <!-- ko foreach: items -->\n                            <div draggable=\"true\" class=\"svd_toolbox_item\" data-bind=\"click: $root.clickToolboxItem, event:{dragstart: function(el, e) { $root.draggingToolboxItem($data, e); return true;}, dragend: function(el, e) { $root.dragEnd(); }}\">\n                                <span data-bind=\"css: iconName, attr: {title: title}\"></span>\n                                <span class=\"svd_toolbox_item_text hidden-sm hidden-xs\" data-bind=\"text:title\"></span>\n                            </div>\n                            <!-- /ko  -->\n                        </div>\n                    </div>\n                </div>\n                <!-- /ko  -->\n                <!-- ko if: !toolbox.koHasCategories() -->\n                <div class=\"svd_toolbox_title hidden-sm hidden-xs\" data-bind=\"text: $root.getLocString('ed.toolbox')\"></div>\n                <!-- ko foreach: toolbox.koItems -->\n                <div draggable=\"true\" class=\"svd_toolbox_item\" data-bind=\"click: $root.clickToolboxItem, event:{dragstart: function(el, e) { $root.draggingToolboxItem($data, e); return true;}, dragend: function(el, e) { $root.dragEnd(); }}\">\n                    <span data-bind=\"css: iconName, attr: {title: title}\"></span>\n                    <span class=\"svd_toolbox_item_text hidden-sm hidden-xs\" data-bind=\"text:title\"></span>\n                </div>\n                <!-- /ko  -->\n                <!-- /ko  -->\n            </div>\n            <div class=\"col-xs-11 svd_editors\" data-bind=\"css: {'col-lg-7 col-md-7 col-sm-8': koShowPropertyGrid, 'col-lg-10 col-md-10 col-sm-11': !koShowPropertyGrid()}\">\n                <div class=\"svd_toolbar\">\n                    <!-- ko foreach: toolbarItems -->\n                    <span class=\"svd_action\" data-bind=\"css: $data.css, visible: visible, attr: { id: id }\">\n                        <!-- ko template: { name: $data.template || 'svd-toolbar-button', data: $data.data || $data } -->\n                        <!-- /ko -->\n                    </span>\n                    <!-- /ko -->\n                </div>\n                <div class=\"svd_pages_editor\" data-bind=\"visible: koShowPagesToolbox, template: { name: 'pageeditor', data: pagesEditor }\"></div>\n                <div class=\"svd_questions_editor\" id=\"scrollableDiv\" data-bind=\"style: { height: koDesignerHeight }, event: { dragover: dragOverQuestionsEditor, drop: dropOnQuestionsEditor }\">\n                    <div id=\"surveyjs\"></div>\n                    <!-- ko if: isCurrentPageEmpty -->\n                    <div class=\"empty-message\" data-bind=\"text: $root.getLocString('survey.dropQuestion')\"></div>\n                    <!-- /ko -->\n                </div>\n            </div>\n            <div class=\"col-lg-3 col-md-3 col-sm-3 hidden-xs svd_properties\" data-bind=\"visible: koShowPropertyGrid\">\n                <div class=\"svd_object_selector\">\n                    <div class=\"svd_custom_select\">\n                        <select id=\"objectSelector\" class=\"form-control\" data-bind=\"options: koObjects, optionsText: 'text', value: koSelectedObject\"></select>\n                    </div>\n                    <span class=\"icon-edit\" data-bind=\"click: editCurrentObject, attr: { title: $root.getLocString('ed.editSelObject')}\"></span>\n                </div>\n                <div class=\"svd_object_editor\" data-bind=\"style: {height: koDesignerHeight}\">\n                    <div data-bind=\"template: { name: 'objecteditor', data: selectedObjectEditor }\"></div>\n                </div>\n            </div>\n        </div>\n\n        <div data-bind=\"visible: koViewType() == 'editor'\">\n            <div data-bind=\"template: { name: 'jsoneditor', data: jsonEditor }\"></div>\n        </div>\n\n        <div data-bind=\"visible: koViewType() == 'test', style: {width: koTestSurveyWidth}\">\n            <div id=\"surveyjsExample\" data-bind=\"template: { name: 'surveylive', data: surveyLive }\"></div>\n        </div>\n\n        <div data-bind=\"visible: koViewType() == 'embed'\">\n            <div data-bind=\"template: { name: 'surveyembeding', data: surveyEmbeding }\"></div>\n        </div>\n    </div>\n    <div data-bind=\"template: { name: 'questioneditor', data: questionEditorWindow }\"></div>\n</div>";

/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"jsoneditor\">\n    <div data-bind=\"visible: !hasAceEditor\">\n        <textarea class=\"svd_json_editor_area\" data-bind=\"textInput:koText\"></textarea>\n        <!-- ko foreach: koErrors -->\n        <div>\n            <span>Error: </span><span data-bind=\"text: text\"></span>\n        </div>\n        <!-- /ko  -->\n    </div>\n    <div id=\"surveyjsJSONEditor\" class=\"svd_json_editor\"></div>\n</script>";

/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"surveys-manage\">\n    <div class=\"svd-manage\">\n        <div class=\"svd-manage-mask\" data-bind=\"visible: isLoading\"></div>\n        <div class=\"svd-manage-control\">\n            <select class=\"svd-manage-select\" data-bind=\"visible: !isEditMode(), options: surveys,\n                        optionsText: 'name',\n                        value: currentSurvey,\n                        optionsCaption: 'Choose survey to edit or start editing and survey will be saved automatically...'\"></select>\n            <input type=\"text\" class=\"svd-manage-name\" data-bind=\"visible: isEditMode, value: currentSurveyName, event: { keyup: nameEditorKeypress }\"/>\n        </div>\n        <div class=\"svd-manage-buttons\">\n            <span class=\"icon\" data-bind=\"visible: currentSurvey, click: edit, css: cssEdit, attr: { title: titleEdit }\"></span>\n            <span class=\"icon\" data-bind=\"visible: !isEditMode(), click: add, css: cssAdd, attr: { title: titleAdd }\"></span>\n            <span class=\"icon icon-delete\" title=\"Delete current survey\" data-bind=\"visible: !isEditMode() && !surveyId() && currentSurvey(), click:remove\"></span>\n        </div>\n    </div>\n</script>\n<script type=\"text/html\" id=\"attach-survey\">\n    <a target=\"_blank\" href=\"#\" data-bind=\"attr: { href: action, title: title }\"><span class=\"icon\" data-bind=\"css: innerCss\"></span><span data-bind=\"text: title\"></span></a>\n</script>\n";

/***/ }),
/* 64 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"objecteditor\">\n    <table class=\"table svd_table-nowrap svd_properties_grid\">\n        <tbody data-bind=\"foreach: koProperties\">\n            <!-- ko template: { name: 'objecteditorproperty', afterRender: $parent.koAfterRender } -->\n            <!-- /ko -->\n        </tbody>\n    </table>\n</script>\n<script type=\"text/html\" id=\"objecteditorproperty\">\n    <tr data-bind=\"click: $parent.changeActiveProperty($data), css: {'active': $parent.koActiveProperty() == $data}\">\n        <td width=\"50%\">\n            <span data-bind=\"text: displayName, attr: {title: title || displayName}\"></span>\n        </td>\n        <td width=\"50%\">\n            <span data-bind=\"css: {'form-control': !editor.alwaysShowEditor && (koText() === '' || koText() === null) }, text: koText, visible: !koIsShowEditor(), attr: {title: koText}\"\n                style=\"text-overflow:ellipsis;white-space:nowrap;overflow:hidden\"></span>\n            <div data-bind=\"visible: koIsShowEditor()\">\n                <!-- ko template: { name: 'propertyeditor-' + editorType, data: $data.editor, afterRender: function(elements) { afterRenderHandler($element.parentElement, elements); } } -->\n                <!-- /ko -->\n            </div>\n        </td>\n    </tr>\n</script>";

/***/ }),
/* 65 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"pageeditor\">\n    <ul class=\"nav nav-tabs\" data-bind=\"tabs:true\">\n        <li class=\"svd_edit_survey_li\" data-bind=\"click:selectSurveyClick, css: { active: isSurveyActive() }\">\n            <div>\n                <a class=\"nav-link svd_page_nav\" href=\"#\">\n                    <span data-bind=\"text:$root.getLocString('ed.survey')\"></span>\n                </a>\n                <div class=\"page-nav btn-group inline menu-disabled\" data-bind=\"css: { 'menu-disabled': !isSurveyActive() }\">\n                    <div style=\"-webkit-tap-highlight-color:rgba(0,0,0,0)\" onclick=\"return true\"></div>\n                    <span data-bind=\"click: editSurveyClick, css: getSelectedClass()\"></span>\n                </div>\n            </div>\n        </li>\n        <ul class=\"nav nav-tabs\">\n            <!-- ko foreach: koPages -->\n            <li data-bind=\"css: { active: koSelected() }, event:{\n            keydown:function(el, e){ $parent.keyDown(el, e); },\n            dragstart:function(el, e){ $parent.dragStart(el); return true; },\n            dragover:function(el, e){ $parent.dragOver(el);},\n            dragend:function(el, e){ $parent.dragEnd();},\n            drop:function(el, e){ $parent.dragDrop(el);}\n          }\">\n                <div data-bind=\"click:$parent.selectPageClick\">\n                    <a class=\"nav-link svd_page_nav\" href=\"#\">\n                        <span data-bind=\"text: title\"></span>\n                    </a>\n                    <div class=\"ddmenu-container page-nav btn-group inline menu-disabled\" data-bind=\"css: { 'menu-disabled': (!koSelected() || !$parent.isPageActive()) }\">\n                        <div style=\"-webkit-tap-highlight-color:rgba(0,0,0,0)\" onclick=\"return true\"></div>\n\n                        <div class=\"ddmenu\">\n                            <span tabindex=\"0\">\n                                <span data-bind=\"css: getSelectedClass()\"></span>\n                            </span>\n\n                            <div tabindex=\"0\" onclick=\"return true\"></div>\n                            <ul>\n                                <li>\n                                    <button class=\"btn btn-primary btn-sm btn-xs\" data-bind=\"click: $parent.showQuestionEditor.bind($parent), text: $root.getLocString('ed.editPage')\"></button>\n                                </li>\n                                <li>\n                                    <button class=\"btn btn-primary btn-sm btn-xs\" data-bind=\"click: $parent.copyPageClick.bind($parent), text: $root.getLocString('survey.Copy')\"></button>\n                                </li>\n                                <li>\n                                    <button class=\"btn btn-primary btn-sm btn-xs\" data-bind=\"click: $parent.deletePageClick.bind($parent), text: $root.getLocString('ed.deletePage'), visible: !$parent.isLastPage()\"></button>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n                <!-- ko if: $index() === $parent.koPages().length - 1 -->\n                <span class=\"svd_add_page_li\">\n                    <button class=\"svd_add_new_page_btn\" data-bind=\"click: $parent.addNewPageClick, attr: {title:  $root.getLocString('ed.addNewPage')}\">\n                        <span class=\"glyphicon glyphicon-plus\"></span>\n                    </button>\n                </span>\n                <!-- /ko -->\n            </li>\n            <!-- /ko  -->\n        </ul>\n    </ul>\n</script>";

/***/ }),
/* 66 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-boolean\">\n    <div class=\"sjs-cb-wrapper\">\n        <label>\n            <div class=\"sjs-cb-container\">\n                <input class=\"svd_editor_control\" type=\"checkbox\" data-bind=\"checked: koValue, disable: $data.readOnly\">\n                <span class=\"checkmark\"></span>\n                <!-- ko if: $data.isDiplayNameVisible -->\n                <span class=\"sjs-cb-label\" data-bind=\"text: $data.displayName\"></span>\n                <!-- /ko -->\n            </div>\n        </label>\n    </div>\n</script>";

/***/ }),
/* 67 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-cells\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } -->\n    <!-- /ko -->\n</script>\n<script type=\"text/html\" id=\"propertyeditorcontent-cells\">\n    <div class=\"panel card\">\n        <div data-bind=\"visible:!koCanEdit(), text: $root.getLocString('pe.cellsEmptyRowsColumns')\"></div>\n        <div  data-bind=\"visible: koCanEdit\" style=\"overflow:auto\">\n            <table class=\"table\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <!-- ko foreach: koColumns -->\n                        <th>\n                            <span data-bind=\"text:$data\"></span>\n                        </th>\n                        <!-- /ko -->\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- ko foreach: koRows  -->\n                    <tr>\n                        <td>\n                        <span data-bind=\"text:row.text\"></span>\n                        </td>\n                        <!-- ko foreach: koCells -->\n                        <td style=\"min-width:120px\">\n                            <textarea rows=\"2\" cols=\"25\" class=\"form-control\" data-bind=\"textInput:text\"></textarea>\n                        </td>\n                        <!-- /ko -->\n                    </tr>\n                    <!-- /ko -->\n                </tbody>\n            </table>\n        </div>\n    </div>\n</script>";

/***/ }),
/* 68 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-condition\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } -->\n    <!-- /ko -->\n</script>\n\n<script type=\"text/html\" id=\"propertyeditorcontent-condition\">\n    <div class=\"propertyeditor-condition\">\n        <div class=\"form-inline form-group\">\n            <div class=\"form-control svd_custom_select\">\n                <select data-bind=\"options: allCondtionQuestions, value: koAddConditionQuestion, optionsCaption: addConditionQuestionOptions\"></select>\n            </div>\n            <div class=\"form-control svd_custom_select\">\n                <select data-bind=\"options:availableOperators, optionsValue: 'name', optionsText: 'text', value:koAddConditionOperator\"></select>\n            </div>\n            <input class=\"form-control\" type=\"text\" data-bind=\"textInput:koAddConditionValue, enable: koAddContionValueEnabled\" style=\"width:120px\" />\n            <input type=\"button\" class=\"form-control btn btn-primary\" data-bind=\"enable: koCanAddCondition, click: onConditionAddClick, value: koAddConditionButtonText\" />\n        </div>\n        <!-- ko if: $parent.hasAceEditor -->\n        <span data-bind=\"text:$root.getLocString('pe.aceEditorHelp')\"></span>\n        <div id=\"expression-ace-editor\" style=\"height: 400px; width: 100%;\" data-bind=\"value:koValue, aceEditor:{questions: $parent.availableQuestions, question: $data.editingObject, editor: $parent}\"></div>\n        <!-- /ko -->\n\n        <!-- ko if: !$parent.hasAceEditor -->\n        <textarea data-bind=\"value:koValue\" rows=\"8\" autofocus=\"autofocus\"></textarea>\n        <!-- /ko -->\n\n        <!-- <div class=\"assistant\">\n            <div class=\"assistant-title\" data-bind=\"text:$root.getLocString('pe.assistantTitle')\"></div>\n            <div class=\"assistant-content\" data-bind=\"foreach:availableQuestions\">\n                <div class=\"assistant-item\" data-bind=\" text:name, click:function () { $parent.insertQuestion($data, $element); } \"></div>\n            </div>\n        </div> -->\n        <span data-bind=\"text:$root.getLocString('pe.conditionHelp')\" style=\"white-space:normal \"></span>\n        <div>\n            <a data-bind=\"text:$root.getLocString('pe.showMore')\" target=\"_blank\" href=\"https://surveyjs.io/Documentation/LibraryParameter?id=QuestionBase&parameter=visibleIf\"></a>\n        </div>\n    </div>\n</script>";

/***/ }),
/* 69 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-custom\">\n    <!-- ko template: { name: \"propertyeditor-customcontent\", data: $data, afterRender: $data.koAfterRender } --><!-- /ko -->\n</script>\n<script type=\"text/html\" id=\"propertyeditor-customcontent\"><div></div></script>";

/***/ }),
/* 70 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-value\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\n</script>\n\n<script type=\"text/html\" id=\"propertyeditorcontent-value\">\n    <form>\n        <div class=\"form-group svd_wrap_elements\">\n            <survey-widget params=\"survey: koSurvey\"></survey-widget>\n        </div>\n    </form>\n</script>\n";

/***/ }),
/* 71 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-dropdown\">\n    <div class=\"svd_custom_select svd_property_editor_dropdown\">\n        <select class=\"form-control svd_editor_control\" data-bind=\"value: koValue, disable: readOnly, options: koChoices,  optionsValue: 'value',  optionsText: 'text'\"  style=\"width:100%\"></select>\n    </div>\n</script> ";

/***/ }),
/* 72 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-expression\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } -->\n    <!-- /ko -->\n</script>\n\n<script type=\"text/html\" id=\"propertyeditorcontent-expression\">\n    <div class=\"propertyeditor-expression\">\n        <!-- ko if: $parent.hasAceEditor -->\n        <span data-bind=\"text:$root.getLocString('pe.aceEditorHelp')\"></span>\n        <div id=\"expression-ace-editor\" style=\"height: 400px; width: 100%;\" data-bind=\"value:koValue, aceEditor: {questions: $parent.availableQuestions, question: $data.editingObject, editor: $parent}\"></div>\n        <!-- /ko -->\n\n        <!-- ko if: !$parent.hasAceEditor -->\n        <textarea data-bind=\"value:koValue\" rows=\"8\" autofocus=\"autofocus\"></textarea>\n        <!-- /ko -->\n\n        <!-- <div class=\"assistant\">\n            <div class=\"assistant-title\" data-bind=\"text:$root.getLocString('pe.assistantTitle')\"></div>\n            <div class=\"assistant-content\" data-bind=\"foreach:availableQuestions\">\n                <div class=\"assistant-item\" data-bind=\"text:name, click:function () { $parent.insertQuestion($data, $element); } \"></div>\n            </div>\n        </div> -->\n        <span data-bind=\"text:$root.getLocString('pe.expressionHelp')\" style=\"white-space:normal\"></span>\n        <!-- <div>\n            <a data-bind=\"text:$root.getLocString('pe.showMore')\" target=\"_blank\" href=\"https://surveyjs.io/Documentation/LibraryParameter?id=QuestionBase&parameter=visibleIf\"></a>\n        </div> -->\n    </div>\n</script>";

/***/ }),
/* 73 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-html\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\n</script>\n\n<script type=\"text/html\" id=\"propertyeditorcontent-html\">\n    <textarea class=\"form-control\" data-bind=\"value:koValue, disable: readOnly\" style=\"width:100%\" rows=\"10\" autofocus=\"autofocus\"></textarea>\n</script>\n";

/***/ }),
/* 74 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-itemvalues\">\n    <!-- ko template: { name: 'propertyeditor-modal' } -->\n    <!-- /ko -->\n</script>\n<script type=\"text/html\" id=\"propertyeditorcontent-itemvalues\">\n    <div style=\"margin-bottom:3px\" data-bind=\"visible: koShowTextView\">\n        <button class=\"btn-sm btn-xs\" data-bind=\"css: {'btn btn-primary':koActiveView() == 'form', 'btn-link':koActiveView() != 'form'}, click:changeToFormViewClick, text: $root.getLocString('pe.formEntry')\"></button>\n        <button class=\"btn-sm btn-xs\" data-bind=\"css: {'btn btn-primary':koActiveView() != 'form', 'btn-link':koActiveView() == 'form'}, click:changeToTextViewClick, text: $root.getLocString('pe.fastEntry')\"></button>\n    </div>\n    <div data-bind=\"visible:koActiveView() == 'form'\" style=\"overflow-y: auto; overflow-x:hidden; max-height:400px;min-height:200px\">\n        <table class=\"svd_items_table\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <!-- ko foreach: columns -->\n                    <th data-bind=\"text: text\"></th>\n                    <!-- /ko -->\n                    <th></th>\n                </tr>\n            </thead>\n            <!-- ko template: { name: 'propertyeditor-itemvalues-items', afterRender: afterItemsRendered} -->\n            <!-- /ko -->\n        </table>\n    </div>\n    <div data-bind=\"visible:koActiveView() == 'form'\">\n        <input type=\"button\" class=\"btn btn-primary\" data-bind=\"visible: koAllowAddRemoveItems, click: onAddClick, value: $root.getLocString('pe.addNew')\"\n        />\n        <input type=\"button\" class=\"btn btn-danger\" data-bind=\"visible: koAllowAddRemoveItems, click: onClearClick, value: $root.getLocString('pe.removeAll')\"\n        />\n    </div>\n    <div data-bind=\"visible:koActiveView() != 'form'\">\n        <textarea class=\"form-control\" data-bind=\"textInput: koItemsText\" style=\"overflow-y: auto; overflow-x:hidden; max-height:400px; min-height:250px; width:100%\"></textarea>\n    </div>\n</script>\n<script type=\"text/html\" id=\"propertyeditor-itemvalues-items\">\n    <tbody>\n        <!-- ko foreach: koItems -->\n        <tr>\n            <td>\n                <div class=\"svd-drag-handle\">\n                    ☰\n                </div>\n            </td>\n            <!-- ko foreach: cells -->\n            <td>\n                <!-- ko template: { name: 'propertyeditor', data: objectProperty.editor } -->\n                <!-- /ko -->\n            </td>\n            <!-- /ko -->\n            <td>\n                <button type=\"button\" class=\"btn btn-sm btn-xs btn-danger\" data-bind=\"visible: $parent.koAllowAddRemoveItems, click: $parent.onDeleteClick\">\n                    <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\n                </button>\n            </td>\n        </tr>\n        <!-- /ko -->\n    </tbody>\n</script>";

/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-matrixdropdowncolumns\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } -->\n    <!-- /ko -->\n</script>\n<script type=\"text/html\" id=\"propertyeditorcontent-matrixdropdowncolumns\">\n    <table class=\"svd_items_table\" data-bind=\"visible: koIsList\">\n        <thead>\n            <tr>\n                <th data-bind=\"text: $root.getLocString('pe.required')\"></th>\n                <th data-bind=\"text: $root.getLocString('pe.cellType')\"></th>\n                <th data-bind=\"text: $root.getLocString('pe.name')\"></th>\n                <th data-bind=\"text: $root.getLocString('pe.title')\"></th>\n                <th></th>\n            </tr>\n        </thead>\n        <tbody>\n            <!-- ko foreach: koItems -->\n            <tr>\n                <td>\n                    <!-- ko template: { name: \"propertyeditor-boolean\", data: { koValue: koIsRequired } } -->\n                    <!-- /ko -->\n                    <button type=\"button\" class=\"btn btn-sm\" data-bind=\"visible: koCanEdit, click: $parent.onEditItemClick\">\n                        <span class=\"glyphicon glyphicon-edit\" data-bind=\"text: $root.getLocString('pe.edit')\"></span>\n                    </button>\n                </td>\n                <td>\n                    <div class=\"svd_custom_select\" style=\"width:125px\">\n                        <select class=\"form-control\" data-bind=\"options: cellTypeChoices, value: koCellType\"></select>\n                    </div>\n                </td>\n                <td>\n                    <input type=\"text\" class=\"form-control\" data-bind=\"value:koName\" style=\"width:100px\" />\n                    <div class=\"alert alert-danger no-padding\" role=\"alert\" data-bind=\"visible:koHasError, text: $root.getLocString('pe.enterNewValue')\"></div>\n                </td>\n                <td>\n                    <input type=\"text\" class=\"form-control\" data-bind=\"value:koTitle\" style=\"width:120px\" />\n                </td>\n                <td>\n                    <button type=\"button\" class=\"btn btn-sm btn-danger\" data-bind=\"visible: $parent.koAllowAddRemoveItems, click: $parent.onDeleteClick\">\n                        <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\n                    </button>\n                </td>\n            </tr>\n            <!-- /ko -->\n            <tr>\n                <td colspan=\"5\">\n                    <div data-bind=\"visible: koAllowAddRemoveItems\">\n                        <input type=\"button\" class=\"btn btn-primary\" data-bind=\"click: onAddClick, value: $root.getLocString('pe.addNew')\" />\n                        <input type=\"button\" class=\"btn btn-danger\" data-bind=\"click: onClearClick, value: $root.getLocString('pe.removeAll')\" />\n                    </div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <!-- ko if: !koIsList() -->\n    <!-- ko template: { name: \"propertyeditorcontent-nested\", data: $data } -->\n    <!-- /ko -->\n    <!-- /ko -->\n</script>";

/***/ }),
/* 76 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-modal\">\n    <div class=\"input-group\" data-bind=\"visible:!$data.isEditable\">\n        <a class=\"form-control\" data-bind=\"click: $data.onShowModal, attr: {'data-target' : modalNameTarget}\">\n            <span data-bind=\"text: koText\"></span>\n        </a>\n        <div class=\"input-group-addon\">\n            <span class=\"glyphicon glyphicon-edit\" aria-hidden=\"true\" data-bind=\"click: $data.onShowModal, attr: {'data-target' : modalNameTarget}, text: $root.getLocString('pe.edit')\"></span>\n        </div>\n    </div>\n    <div class=\"input-group\" data-bind=\"visible:$data.isEditable\">\n        <input class=\"form-control svd_editor_control\" type=\"text\" data-bind=\"value: koValue\" />\n        <div class=\"input-group-addon\">\n            <span class=\"glyphicon glyphicon-edit\" aria-hidden=\"true\" data-bind=\"click: $data.onShowModal, attr: {'data-target' : modalNameTarget}, text: $root.getLocString('pe.edit')\"></span>\n        </div>\n    </div>\n\n    <div data-bind=\"attr: {id : modalName}\" class=\"modal\" role=\"dialog\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <button type=\"button\" class=\"close\" data-bind=\"click: onResetClick\">&times;</button>\n                    <h4 class=\"modal-title\" data-bind=\"text:$data.koTitleCaption\"></h4>\n                </div>\n                <div class=\"modal-body svd_notopbottompaddings\">\n                    <!-- ko template: { name: 'propertyeditor-modalcontent', data: $data } -->\n                    <!-- /ko -->\n                </div>\n                <div class=\"modal-footer\">\n                    <input type=\"button\" class=\"btn btn-primary\" data-bind=\"visible: $data.koShowApplyButton, click: $data.onApplyClick, value: $root.getLocString('pe.apply')\"\n                        style=\"width:100px\" />\n                    <input type=\"button\" class=\"btn btn-default btn-secondary\" data-bind=\"click: $data.onOkClick, value: $root.getLocString('pe.ok')\"\n                        style=\"width:100px\" />\n                    <input type=\"button\" class=\"btn btn-primary\" data-bind=\"click: $data.onResetClick, value: $root.getLocString('pe.cancel')\"\n                        style=\"width:100px\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</script>";

/***/ }),
/* 77 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-modalcontent\">\n    <div data-bind=\"html: $data.koHtmlTop\"></div>\n    <!-- ko template: { name: 'propertyeditorcontent-' + editorType, data: $data, afterRender: $data.koAfterRender } -->\n    <!-- /ko -->\n    <div data-bind=\"html: $data.koHtmlBottom\"></div>\n</script>";

/***/ }),
/* 78 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-multiplevalues\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } -->\n    <!-- /ko -->\n</script>\n<script type=\"text/html\" class=\"btn-xs\" id=\"propertyeditorcontent-multiplevalues\">\n    <div style=\"max-height:300px; overflow-y:scroll;\">\n        <!-- ko foreach: { data: koItems, as: 'item'}  -->\n        <div data-bind=\"style:{display: 'inline-block'\">\n            <label>\n                <input type=\"checkbox\" data-bind=\"attr: {value: item.value}, checked: $parent.koEditingValue\" />\n                <span class=\"checkbox-material\">\n                    <span class=\"check\"></span>\n                </span>\n                <span style=\"position: static;\" data-bind=\"text: item.text\"></span>\n            </label>\n        </div>\n        <!-- /ko -->\n    </div>\n</script>";

/***/ }),
/* 79 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditorcontent-nested\">\n    <div style=\"padding: 5px\">\n        <button type=\"button\" class=\"btn btn-sm\" data-bind=\"click: onCancelEditItemClick\">\n            <span class=\"glyphicon glyphicon-list-alt\"></span>\n        </button>\n        <span data-bind=\"text: koEditItem().koEditorName\"></span>\n    </div>\n    <!-- ko template: { name: \"questioneditor-content\", data: koEditItem().itemEditor } -->\n    <!-- /ko -->\n</script>";

/***/ }),
/* 80 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-number\">\n    <input class=\"form-control svd_editor_control\" type=\"number\" data-bind=\"value: koValue, disable: readOnly\" style=\"width:100%\" />\n</script>";

/***/ }),
/* 81 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-restfull\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } -->\n    <!-- /ko -->\n</script>\n\n<script type=\"text/html\" id=\"propertyeditorcontent-restfull\">\n    <form>\n        <div class=\"form-group\" data-bind=\"foreach: koItems\">\n            <label data-bind=\"attr: {for: name}, text: $root.getLocString('pe.'+name)\"></label>\n            <input type=\"text\" data-bind=\"attr: {id: name}, value:koValue\" class=\"form-control\"></input>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"titleName\">\n                <span data-bind=\"text:$root.getLocString('pe.testService')\"></span>\n            </label>\n            <div class=\"form-control svd_custom_select\" style=\"display: block;\">\n                <select data-bind=\"options: question.koVisibleChoices, optionsText: 'text', optionsValue: 'value', optionsCaption: question.optionsCaption\"></select>\n            </div>\n        </div>\n    </form>\n</script>";

/***/ }),
/* 82 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-string\">\n    <input class=\"form-control svd_editor_control\" type=\"text\" data-bind=\"value: koValue, disable: readOnly, attr: {placeholder: defaultValue}\" style=\"width:100%\" />\n</script>";

/***/ }),
/* 83 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-text\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } --><!-- /ko -->\n</script>\n\n<script type=\"text/html\" id=\"propertyeditorcontent-text\">\n    <textarea class=\"form-control\" data-bind=\"value:koValue, disable: readOnly, attr: {rows: isDiplayNameVisible ? '2' : '5'}\" style=\"width:100%\" autofocus=\"autofocus\"></textarea>\n</script>";

/***/ }),
/* 84 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-textitems\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } -->\n    <!-- /ko -->\n</script>\n<script type=\"text/html\" id=\"propertyeditorcontent-textitems\">\n    <div class=\"panel card\">\n        <table class=\"table\" data-bind=\"visible: koIsList\">\n            <thead>\n                <tr>\n                    <th data-bind=\"text: $root.getLocString('pe.isRequired')\"></th>\n                    <th data-bind=\"text: $root.getLocString('pe.name'), style: {width: isTitleVisible? '': '100%'}\"></th>\n                    <th data-bind=\"visible: isTitleVisible, text: $root.getLocString('pe.title')\"></th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                <!-- ko foreach: koItems -->\n                <tr>\n                    <td>\n                        <!-- ko template: { name: \"propertyeditor-boolean\", data: { koValue: koIsRequired } } -->\n                        <!-- /ko -->\n                        <button type=\"button\" class=\"btn btn-sm\" data-bind=\"click: $parent.onEditItemClick, attr: { title: $root.getLocString('pe.edit') }\">\n                            <span class=\"glyphicon glyphicon-edit\" data-bind=\"text: $root.getLocString('pe.edit')\"></span>\n                        </button>\n                    </td>\n                    <td>\n                        <input type=\"text\" class=\"form-control\" data-bind=\"value:koName, style: {width: $parent.isTitleVisible? '180px': '100%'}\"\n                        />\n                    </td>\n                    <td data-bind=\"visible: $parent.isTitleVisible\">\n                        <input type=\"text\" class=\"form-control\" data-bind=\"value:koTitle\" style=\"width:180px\" />\n                    </td>\n                    <td>\n                        <button type=\"button\" class=\"btn btn-sm btn-danger\" data-bind=\"visible: $parent.koAllowAddRemoveItems, click: $parent.onDeleteClick, attr: { title: $root.getLocString('pe.delete') }\">\n                            <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\n                        </button>\n                    </td>\n                </tr>\n                <!-- /ko -->\n                <tr>\n                    <td colspan=\"4\">\n                        <input type=\"button\" class=\"btn btn-primary\" data-bind=\"visible: koAllowAddRemoveItems, click: onAddClick, value: $root.getLocString('pe.addNew')\"\n                        />\n                        <input type=\"button\" class=\"btn btn-danger\" data-bind=\"visible: koAllowAddRemoveItems, click: onClearClick, value: $root.getLocString('pe.removeAll')\"\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <!-- ko if: !koIsList() -->\n        <!-- ko template: { name: \"propertyeditorcontent-nested\", data: $data } -->\n        <!-- /ko -->\n        <!-- /ko -->\n    </div>\n</script>";

/***/ }),
/* 85 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-triggers\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } -->\n    <!-- /ko -->\n</script>\n<script type=\"text/html\" id=\"propertyeditorcontent-triggers\">\n    <div class=\"propertyeditor-triggers\">\n        <div class=\"input-group form-group\">\n            <div class=\"input-group-addon first-addon\" data-bind=\"visible: koAllowAddRemoveItems\">\n                <div class=\"ddmenu-container\">\n                    <div style=\"-webkit-tap-highlight-color:rgba(0,0,0,0)\" onclick=\"return true\"></div>\n\n                    <div class=\"ddmenu\">\n                        <span tabindex=\"0\" data-bind=\"attr: { title: $root.getLocString('pe.addNew') }\">\n                            <span class=\"glyphicon glyphicon-plus\"></span>\n                        </span>\n                        <div tabindex=\"0\" onclick=\"return true\"></div>\n                        <ul>\n                            <!-- ko foreach: koTriggers -->\n                            <li>\n                                <a data-bind=\"click: $parent.onAddClick, text:$data.text\"></a>\n                            </li>\n                            <!-- /ko  -->\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-control svd_custom_select\">\n                <select data-bind=\"options: koItems, optionsText: 'koText', value: koSelected\"></select>\n            </div>\n            <span data-bind=\"visible: koAllowAddRemoveItems, attr: { title: $root.getLocString('pe.delete') }, enable: koSelected() != null, click: onDeleteClick\"\n                class=\"input-group-addon btn-danger\">\n                <span class=\"glyphicon glyphicon-remove\"></span>\n            </span>\n        </div>\n        <div data-bind=\"visible: koSelected() == null\">\n            <div data-bind=\"visible: koQuestions().length == 0, text: $root.getLocString('pe.noquestions')\"></div>\n            <div data-bind=\"visible: koQuestions().length > 0, text: $root.getLocString('pe.createtrigger')\"></div>\n        </div>\n        <div data-bind=\"visible: koSelected() != null\">\n            <div data-bind=\"with: koSelected\">\n                <div class=\"form-inline form-group\">\n                    <span class=\"input-group\" data-bind=\"text: $root.getLocString('pe.triggerOn')\"></span>\n                    <div class=\"form-control svd_custom_select\">\n                        <select data-bind=\"options:$parent.koQuestions, value: koName\"></select>\n                    </div>\n                    <div class=\"form-control svd_custom_select\">\n                        <select data-bind=\"options:availableOperators, optionsValue: 'name', optionsText: 'text', value:koOperator\"></select>\n                    </div>\n                    <input class=\"form-control\" type=\"text\" data-bind=\"visible: koRequireValue, value:koValue\" />\n                </div>\n\n                <!-- ko if: koType() == 'visibletrigger' -->\n                <div class=\"row\">\n                    <div class=\"col-lg-6 col-sm-6\">\n                        <!-- ko template: { name: 'propertyeditor-triggersitems', data: pages } -->\n                        <!-- /ko -->\n                    </div>\n                    <div class=\"col-lg-6 col-sm-6\">\n                        <!-- ko template: { name: 'propertyeditor-triggersitems', data: questions } -->\n                        <!-- /ko -->\n                    </div>\n                </div>\n                <!-- /ko -->\n                <!-- ko if: koType() == 'completetrigger' -->\n                <div class=\"row\">\n                    <div style=\"margin: 10px\" data-bind=\"text: $root.getLocString('pe.triggerCompleteText')\"></div>\n                </div>\n                <!-- /ko -->\n                <!-- ko if: koType() == 'setvaluetrigger' -->\n                <div class=\"row\">\n                    <div class=\"col-lg-6 col-sm-6\">\n                        <div class=\"form-group\">\n                            <div data-bind=\"text: $root.getLocString('pe.triggerSetToName')\"></div>\n                            <input class=\"form-control\" type=\"text\" data-bind=\"value:kosetToName\" />\n                        </div>\n                    </div>\n                    <div class=\"col-lg-6 col-sm-6\">\n                        <div class=\"form-group\">\n                            <div data-bind=\"text: $root.getLocString('pe.triggerSetValue')\">\n                            </div>\n                            <input class=\"form-control\" type=\"text\" data-bind=\"value:kosetValue\" />\n                        </div>\n                    </div>\n                </div>\n                <!-- ko template: { name: \"propertyeditor-boolean\", data: { koValue: koisVariable, displayName: $root.getLocString('pe.triggerIsVariable') } } -->\n                <!-- /ko -->\n                <!-- /ko -->\n            </div>\n        </div>\n    </div>\n</script>";

/***/ }),
/* 86 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-triggersitems\">\n    <div>\n        <div class=\"form-group\" data-bind=\"text: title\"></div>\n        <div class=\"form-group input-group\">\n            <select class=\"form-control\" multiple=\"multiple\" data-bind=\"options:koChoosen, value: koChoosenSelected\"></select>\n            <span class=\"input-group-addon btn-danger\" data-bind=\"enable: koChoosenSelected() != null, click: onDeleteClick\">\n                <span class=\"glyphicon glyphicon-remove\"></span>\n            </span>\n        </div>\n        <div class=\"form-group input-group\">\n            <div class=\"form-control svd_custom_select\">\n                <select data-bind=\"options:koObjects, value: koSelected\"></select>\n            </div>\n            <span class=\"input-group-addon btn-default\" data-bind=\"enable: koSelected() != null, click: onAddClick\">\n                <span class=\"glyphicon glyphicon-plus\"></span>\n            </span>\n        </div>\n    </div>\n</script>";

/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor-validators\">\n    <!-- ko template: { name: 'propertyeditor-modal', data: $data } -->\n    <!-- /ko -->\n</script>\n<script type=\"text/html\" id=\"propertyeditorcontent-validators\">\n    <div class=\"propertyeditor-validators\">\n        <div class=\"input-group form-group\">\n            <div class=\"input-group-addon first-addon\" data-bind=\"visible: koAllowAddRemoveItems\">\n                <div class=\"ddmenu-container\">\n                    <div style=\"-webkit-tap-highlight-color:rgba(0,0,0,0)\" onclick=\"return true\"></div>\n\n                    <div class=\"ddmenu\">\n                        <span tabindex=\"0\">\n                            <span class=\"glyphicon glyphicon-plus\"></span>\n                        </span>\n\n                        <div tabindex=\"0\" onclick=\"return true\"></div>\n                        <ul>\n                            <!-- ko foreach: koValidators -->\n                            <li>\n                                <a href=\"#\" data-bind=\"click: $parent.onAddClick\">\n                                    <span data-bind=\"text:$data.text\"></span>\n                                </a>\n                            </li>\n                            <!-- /ko  -->\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-control svd_custom_select\">\n                <select data-bind=\"options: koItems, optionsText: 'text', value: koSelected\"></select>\n            </div>\n            <span class=\"input-group-addon btn-danger\" data-bind=\"visible: koAllowAddRemoveItems, enable: koSelected() != null, click: onDeleteClick\">\n                <span class=\"glyphicon glyphicon-remove\"></span>\n            </span>\n        </div>\n        <div data-bind=\"template: { name: 'objecteditor', data: selectedObjectEditor }\"></div>\n    </div>\n</script>";

/***/ }),
/* 88 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"propertyeditor\">\n    <label data-bind=\"text:displayName, visible: showDisplayNameOnTop\"></label>\n    <div class=\"alert alert-danger\" role=\"alert\" data-bind=\"visible:koHasError\">\n        <span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n        <span class=\"sr-only\">Error:</span>\n        <span data-bind=\"text:koErrorText\"></span>\n    </div>\n    <!-- ko template: {name: $data.contentTemplateName, data: $data} -->\n    <!-- /ko -->\n</script>";

/***/ }),
/* 89 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"questioneditor-content\">\n    <ul class=\"nav nav-tabs\" data-bind=\"foreach: koTabs\">\n        <li class=\"nav-item\" role=\"presentation\" data-bind=\"css: {active: $parent.koActiveTab() == $data.name}, click: $parent.onTabClick\"><a class=\"nav-link\" data-bind=\"css: {active: $parent.koActiveTab() == $data.name}\"><span data-bind=\"text:$data.title\"></span></a></li>\n    </ul>               \n    <!-- ko foreach: koTabs -->\n    <div data-bind=\"visible:$parent.koActiveTab() == $data.name\" style=\"margin-top:5px\">\n        <!-- ko template: { name: $data.htmlTemplate, data: $data.templateObject, afterRender: $data.koAfterRender } -->\n        <!-- /ko -->\n    </div>\n    <!-- /ko  -->\n</script>";

/***/ }),
/* 90 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"questioneditor\">\n    <div id=\"surveyquestioneditorwindow\" class=\"modal\" data-bind=\"with:koEditor\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <button type=\"button\" class=\"close\" data-bind=\"click: onResetClick\">&times;</button>\n                    <h4 class=\"modal-title\" data-bind=\"text:koTitle\"></h4>\n                </div>\n                <div class=\"modal-body svd_notopbottompaddings\">\n                    <!-- ko template: { name: \"questioneditor-content\", data: $data } -->\n                    <!-- /ko -->\n                </div>\n                <div class=\"modal-footer\">\n                    <input type=\"button\" class=\"btn btn-primary\" data-bind=\"visible: koShowApplyButton, click: onApplyClick, value: $root.getLocString('pe.apply')\"\n                        style=\"width:100px\" />\n                    <input type=\"button\" class=\"btn btn-default btn-secondary\" data-bind=\"click: onOkClick, value: $root.getLocString('pe.ok')\"\n                        style=\"width:100px\" />\n                    <input type=\"button\" class=\"btn btn-primary\" data-bind=\"click: onResetClick, value: $root.getLocString('pe.cancel')\" style=\"width:100px\"\n                    />\n                </div>\n            </div>\n        </div>\n    </div>\n</script>";

/***/ }),
/* 91 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"questioneditortab\">\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <!-- ko foreach: properties.rows -->\n            <div class=\"form-group\">\n                <!-- ko foreach: properties -->\n                    <!-- ko template: { name: 'propertyeditor', data: objectProperty.editor } --><!-- /ko -->\n                <!-- /ko  -->\n            </div>\n            <!-- /ko  -->\n        </div>\n    </div>\n</script>";

/***/ }),
/* 92 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"surveyembeding\">\n    <div class=\"row\">\n        <div class=\"form-control svd_custom_select svd_embed_tab\">\n            <select data-bind=\"value:koLibraryVersion\">\n                <option value=\"angular\" data-bind=\"text: $root.getLocString('ew.angular')\"></option>\n                <option value=\"jquery\" data-bind=\"text: $root.getLocString('ew.jquery')\"></option>\n                <option value=\"knockout\" data-bind=\"text: $root.getLocString('ew.knockout')\"></option>\n                <option value=\"react\" data-bind=\"text: $root.getLocString('ew.react')\"></option>\n                <option value=\"vue\" data-bind=\"text: $root.getLocString('ew.vue')\"></option>\n            </select>\n        </div>\n        <div class=\"form-control svd_custom_select svd_embed_tab\">\n            <select data-bind=\"value:koScriptUsing\">\n                <option value=\"bootstrap\" data-bind=\"text: $root.getLocString('ew.bootstrap')\"></option>\n                <option value=\"standard\" data-bind=\"text: $root.getLocString('ew.standard')\"></option>\n            </select>\n        </div>\n        <div class=\"form-control svd_custom_select svd_embed_tab\">\n            <select data-bind=\"value:koShowAsWindow\">\n                <option value=\"page\" data-bind=\"text: $root.getLocString('ew.showOnPage')\"></option>\n                <option value=\"window\" data-bind=\"text: $root.getLocString('ew.showInWindow')\"></option>\n            </select>\n        </div>\n        <label class=\"checkbox-inline form-check-label\" data-bind=\"visible:koHasIds\">\n            <input type=\"checkbox\" data-bind=\"checked:koLoadSurvey\" />\n            <span data-bind=\"text: $root.getLocString('ew.loadFromServer')\"></span>\n        </label>\n    </div>\n    <div class=\"panel card\">\n        <div class=\"panel-heading card-header\" data-bind=\"text: $root.getLocString('ew.titleScript')\"></div>\n        <div data-bind=\"visible:hasAceEditor\">\n            <div id=\"surveyEmbedingHead\" style=\"height:70px;width:100%\"></div>\n        </div>\n        <textarea data-bind=\"visible:!hasAceEditor, text: koHeadText\" style=\"height:70px;width:100%\"></textarea>\n    </div>\n    <div class=\"panel card\" data-bind=\"visible: koVisibleHtml\">\n        <div class=\"panel-heading card-header\" data-bind=\"text: $root.getLocString('ew.titleHtml')\"></div>\n        <div data-bind=\"visible:hasAceEditor\">\n            <div id=\"surveyEmbedingBody\" style=\"height:30px;width:100%\"></div>\n        </div>\n        <textarea data-bind=\"visible:!hasAceEditor, text: koBodyText\" style=\"height:30px;width:100%\"></textarea>\n    </div>\n    <div class=\"panel card\">\n        <div class=\"panel-heading card-header\" data-bind=\"text: $root.getLocString('ew.titleJavaScript')\"></div>\n        <div data-bind=\"visible:hasAceEditor\">\n            <div id=\"surveyEmbedingJava\" style=\"height:300px;width:100%\"></div>\n        </div>\n        <textarea data-bind=\"visible:!hasAceEditor, text: koJavaText\" style=\"height:300px;width:100%\"></textarea>\n    </div>\n</script>";

/***/ }),
/* 93 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"surveylive\">\n    <div data-bind=\"visible: koIsRunning() && koPages().length > 1\">\n        <ul  class=\"nav nav-tabs\" data-bind=\"tabs:true\">\n            <li style=\"padding-top: 10px; padding-right: 10px\"><span data-bind=\"text: selectPageText\"></span></li>\n            <!-- ko foreach: koPages -->\n            <li data-bind=\"visible: koVisible, css: {active: koActive() == true}\"> \n                <a class=\"svd_page_nav\" href=\"#\" data-bind=\"click:$parent.selectPageClick\">\n                    <span data-bind=\"text: title\"></span>\n                </a>\n            </li>\n            <!-- /ko  -->\n        </ul>\n    </div>\n    <survey-widget params=\"survey: koSurvey\"></survey-widget>\n    <div data-bind=\"text: koResultText, visible: koIsRunning() == false\"></div>\n    <button data-bind=\"visible: koIsRunning() == false, click:selectTestClick, text: testSurveyAgainText\">Test Again</button>\n</script>";

/***/ }),
/* 94 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"svd-toolbar-button\">\n    <button type=\"button\" class=\"btn btn-primary\" data-bind=\"enable: $data.enabled || true, click: action, css: $data.innerCss\">\n        <span data-bind=\"text: title\"></span>\n    </button>\n</script>\n<script type=\"text/html\" id=\"svd-toolbar-options\">\n    <div class=\"ddmenu-container toolbar-options btn-group inline\">\n        <div style=\"-webkit-tap-highlight-color:rgba(0,0,0,0)\" onclick=\"return true\"></div>\n\n        <div class=\"ddmenu\">\n            <span class=\"btn btn-primary\" tabindex=\"0\">\n                <span data-bind=\"text: title\"></span>\n                <span class=\"caret\"></span>\n            </span>\n            <div tabindex=\"0\" onclick=\"return true\"></div>\n            <ul>\n                <!-- ko foreach: items -->\n                <li data-bind=\"css: $data.css\">\n                    <a href=\"#\" data-bind=\"click: action, text: title\"></a>\n                </li>\n                <!-- /ko -->\n            </ul>\n        </div>\n    </div>\n</script>\n<script type=\"text/html\" id=\"svd-toolbar-state\">\n    <span class=\"icon\" data-bind=\"css: innerCss\"></span>\n    <span data-bind=\"text: title\"></span>\n</script>";

/***/ }),
/* 95 */
/***/ (function(module, exports) {

module.exports = "<div class=\"svda-content\">\n    <span class=\"svda-title-editor-content\" data-bind=\"visible: isEditing\" style=\"display: none;\">\n        <input data-bind=\"textInput: editingName, event: { keyup: nameEditorKeypress, blur: postEdit }\" style=\"border-top: none; border-left: none; border-right: none; outline: none; background-color: transparent; display: inline-block; display: inline-block; width: calc(100% - 55px);\"\n        />\n        <span class=\"svda-edit-button\" data-bind=\"click: postEdit, enable: editingName() != ''\">✓</span>\n        <!-- <span class=\"svda-edit-button\" data-bind=\"click: cancelEdit\">✕</span> -->\n    </span>\n    <span class=\"svda-title-editor-content svda-title-editor-start\" data-bind=\"visible: !isEditing()\">\n        <span style=\"display: none;\" data-bind=\"text: editingName\"></span>\n        <span class=\"edit-survey-name icon-inplace-edit\" data-bind=\"click: startEdit, attr: { title: getLocString('pe.edit') }\">\n        </span>\n    </span>\n    <!-- ko if: notOther -->\n    <span class=\"svda-drag-handle icon-inplace-draggable\" data-bind=\"attr: { title: getLocString('pe.move') }, visible: !isEditing()\">\n    </span>\n    <!-- /ko -->\n    <span class=\"svda-delete-item icon-inplace-delete\" data-bind=\"click: deleteItem, attr: { title: getLocString('pe.delete') }, visible: !isEditing()\">\n    </span>\n</div>";

/***/ }),
/* 96 */
/***/ (function(module, exports) {

module.exports = "<div>\n    <span data-bind=\"text: type\"></span>\n</div>";

/***/ }),
/* 97 */
/***/ (function(module, exports) {

module.exports = "<div class=\"svda-content\">\n    <span class=\"svda-title-editor-content\" data-bind=\"visible: isEditing\" style=\"display: none;\">\n        <input data-bind=\"textInput: editingName, event: { keyup: nameEditorKeypress, blur: postEdit }\" style=\"border-top: none; border-left: none; border-right: none; outline: none; background-color: transparent; display: inline-block; width: calc(100% - 55px);\"\n        />\n        <span class=\"svda-edit-button\" data-bind=\"click: postEdit, enable: editingName() != ''\">✓</span>\n        <!-- <span class=\"svda-edit-button\" data-bind=\"click: cancelEdit\">✕</span> -->\n    </span>\n    <span class=\"svda-title-editor-content svda-title-editor-start\" data-bind=\"visible: !isEditing()\">\n        <span style=\"display: none;\" data-bind=\"text: editingName\"></span>\n        <span class=\"edit-survey-name icon-inplace-edit\" data-bind=\"click: startEdit, attr: { title: getLocString('pe.edit') }\">\n        </span>\n    </span>\n</div>";

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "" + __webpack_require__(61) + " " + __webpack_require__(62) + " " + __webpack_require__(64) + " " + __webpack_require__(65) + "\n" + __webpack_require__(93) + " " + __webpack_require__(92) + " " + __webpack_require__(90) + " " + __webpack_require__(89) + "\n" + __webpack_require__(91) + " " + __webpack_require__(88) + " " + __webpack_require__(66) + "\n" + __webpack_require__(71) + " " + __webpack_require__(73) + " " + __webpack_require__(68) + "\n" + __webpack_require__(72) + " " + __webpack_require__(74) + "\n" + __webpack_require__(78) + " " + __webpack_require__(79) + "\n" + __webpack_require__(75) + " " + __webpack_require__(76) + "" + __webpack_require__(77) + "\n" + __webpack_require__(80) + " " + __webpack_require__(81) + " " + __webpack_require__(70) + "\n" + __webpack_require__(82) + " " + __webpack_require__(83) + " " + __webpack_require__(67) + "\n" + __webpack_require__(84) + " " + __webpack_require__(85) + "\n" + __webpack_require__(86) + " " + __webpack_require__(87) + "\n" + __webpack_require__(69) + " " + __webpack_require__(63) + " " + __webpack_require__(94) + "";

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(101);
// On some exotic environments, it's not clear which object `setimmeidate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ }),
/* 100 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31), __webpack_require__(100)))

/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_knockout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_knockout__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__textWorker__ = __webpack_require__(14);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyJSONEditor; });


var SurveyJSONEditor = (function () {
    function SurveyJSONEditor() {
        this.isProcessingImmediately = false;
        this.timeoutId = -1;
        this.koText = __WEBPACK_IMPORTED_MODULE_0_knockout__["observable"]("");
        this.koErrors = __WEBPACK_IMPORTED_MODULE_0_knockout__["observableArray"]();
        var self = this;
        this.koText.subscribe(function (newValue) {
            self.onJsonEditorChanged();
        });
    }
    SurveyJSONEditor.prototype.init = function (editorElement) {
        if (!this.hasAceEditor)
            return;
        this.aceEditor = ace.edit(editorElement);
        var self = this;
        //TODO add event to change ace theme and mode
        //this.aceEditor.setTheme("ace/theme/monokai");
        //this.aceEditor.session.setMode("ace/mode/json");
        this.aceEditor.setShowPrintMargin(false);
        this.aceEditor.getSession().on("change", function () {
            self.onJsonEditorChanged();
        });
        this.aceEditor.getSession().setUseWorker(true);
        __WEBPACK_IMPORTED_MODULE_1__textWorker__["a" /* SurveyTextWorker */].newLineChar = this.aceEditor.session.doc.getNewLineCharacter();
    };
    Object.defineProperty(SurveyJSONEditor.prototype, "hasAceEditor", {
        get: function () {
            return typeof ace !== "undefined";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyJSONEditor.prototype, "text", {
        get: function () {
            if (!this.hasAceEditor)
                return this.koText();
            return this.aceEditor.getValue();
        },
        set: function (value) {
            this.isProcessingImmediately = true;
            this.koText(value);
            if (this.aceEditor) {
                this.aceEditor.setValue(value);
                this.aceEditor.renderer.updateFull(true);
            }
            this.processJson(value);
            this.isProcessingImmediately = false;
        },
        enumerable: true,
        configurable: true
    });
    SurveyJSONEditor.prototype.show = function (value) {
        this.text = value;
        if (this.aceEditor) {
            this.aceEditor.focus();
        }
    };
    Object.defineProperty(SurveyJSONEditor.prototype, "isJsonCorrect", {
        get: function () {
            this.textWorker = new __WEBPACK_IMPORTED_MODULE_1__textWorker__["a" /* SurveyTextWorker */](this.text);
            return this.textWorker.isJsonCorrect;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SurveyJSONEditor.prototype, "survey", {
        get: function () {
            return this.textWorker.survey;
        },
        enumerable: true,
        configurable: true
    });
    SurveyJSONEditor.prototype.onJsonEditorChanged = function () {
        if (this.timeoutId > -1) {
            clearTimeout(this.timeoutId);
        }
        if (this.isProcessingImmediately) {
            this.timeoutId = -1;
        }
        else {
            var self = this;
            this.timeoutId = window.setTimeout(function () {
                self.timeoutId = -1;
                self.processJson(self.text);
            }, SurveyJSONEditor.updateTextTimeout);
        }
    };
    SurveyJSONEditor.prototype.processJson = function (text) {
        this.textWorker = new __WEBPACK_IMPORTED_MODULE_1__textWorker__["a" /* SurveyTextWorker */](text);
        if (this.aceEditor) {
            this.aceEditor
                .getSession()
                .setAnnotations(this.createAnnotations(text, this.textWorker.errors));
        }
        else {
            this.koErrors(this.textWorker.errors);
        }
    };
    SurveyJSONEditor.prototype.createAnnotations = function (text, errors) {
        var annotations = new Array();
        for (var i = 0; i < errors.length; i++) {
            var error = errors[i];
            var annotation = {
                row: error.position.start.row,
                column: error.position.start.column,
                text: error.text,
                type: "error"
            };
            annotations.push(annotation);
        }
        return annotations;
    };
    return SurveyJSONEditor;
}());

SurveyJSONEditor.updateTextTimeout = 1000;


/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = function (menuItems, className) {
    var container = document.createElement("div");
    container.className = "ddmenu-container " + className;
    var ioshack = document.createElement("div");
    ioshack.onclick = function () {
        return true;
    };
    ioshack.style.webkitTapHighlightColor = "rgba(0,0,0,0)";
    var ddmenu = document.createElement("div");
    ddmenu.className = "ddmenu";
    var icon = document.createElement("span");
    icon.onclick = function () {
        return true;
    };
    icon.setAttribute("tabindex", "0");
    icon.className = "glyphicon glyphicon-option-horizontal";
    var div = document.createElement("div");
    div.onclick = function () {
        return true;
    };
    div.setAttribute("tabindex", "0");
    var ul = document.createElement("ul");
    for (var i = 0; i < menuItems.length; i++) {
        ul.appendChild(menuItems[i]);
    }
    ddmenu.appendChild(icon);
    ddmenu.appendChild(div);
    ddmenu.appendChild(ul);
    container.appendChild(ioshack);
    container.appendChild(ddmenu);
    return container;
};;


/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_custom_checkbox_scss__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_custom_checkbox_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__utils_custom_checkbox_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_custom_select_scss__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_custom_select_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__utils_custom_select_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ddmenu_scss__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_ddmenu_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__utils_ddmenu_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__main_scss__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__main_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__main_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__dragdrophelper__ = __webpack_require__(18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DragDropHelper", function() { return __WEBPACK_IMPORTED_MODULE_4__dragdrophelper__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__propertyEditors_propertyEditorBase__ = __webpack_require__(10);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyEditorBase", function() { return __WEBPACK_IMPORTED_MODULE_5__propertyEditors_propertyEditorBase__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__propertyEditors_propertyCustomEditor__ = __webpack_require__(20);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyCustomEditor", function() { return __WEBPACK_IMPORTED_MODULE_6__propertyEditors_propertyCustomEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__propertyEditors_propertyEditorFactory__ = __webpack_require__(4);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyEditorFactory", function() { return __WEBPACK_IMPORTED_MODULE_7__propertyEditors_propertyEditorFactory__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyStringPropertyEditor", function() { return __WEBPACK_IMPORTED_MODULE_7__propertyEditors_propertyEditorFactory__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyDropdownPropertyEditor", function() { return __WEBPACK_IMPORTED_MODULE_7__propertyEditors_propertyEditorFactory__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyBooleanPropertyEditor", function() { return __WEBPACK_IMPORTED_MODULE_7__propertyEditors_propertyEditorFactory__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyNumberPropertyEditor", function() { return __WEBPACK_IMPORTED_MODULE_7__propertyEditors_propertyEditorFactory__["e"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__propertyEditors_propertyTextItemsEditor__ = __webpack_require__(55);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyTextItemsEditor", function() { return __WEBPACK_IMPORTED_MODULE_8__propertyEditors_propertyTextItemsEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__propertyEditors_propertyItemsEditor__ = __webpack_require__(7);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyItemsEditor", function() { return __WEBPACK_IMPORTED_MODULE_9__propertyEditors_propertyItemsEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__propertyEditors_propertyItemValuesEditor__ = __webpack_require__(51);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyItemValuesEditor", function() { return __WEBPACK_IMPORTED_MODULE_10__propertyEditors_propertyItemValuesEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__propertyEditors_propertyMultipleValuesEditor__ = __webpack_require__(53);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyMultipleValuesEditor", function() { return __WEBPACK_IMPORTED_MODULE_11__propertyEditors_propertyMultipleValuesEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__propertyEditors_propertyNestedPropertyEditor__ = __webpack_require__(13);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyNestedPropertyEditor", function() { return __WEBPACK_IMPORTED_MODULE_12__propertyEditors_propertyNestedPropertyEditor__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyNestedPropertyEditorItem", function() { return __WEBPACK_IMPORTED_MODULE_12__propertyEditors_propertyNestedPropertyEditor__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__propertyEditors_propertyMatrixDropdownColumnsEditor__ = __webpack_require__(52);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyDropdownColumnsEditor", function() { return __WEBPACK_IMPORTED_MODULE_13__propertyEditors_propertyMatrixDropdownColumnsEditor__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyMatrixDropdownColumnsItem", function() { return __WEBPACK_IMPORTED_MODULE_13__propertyEditors_propertyMatrixDropdownColumnsEditor__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__propertyEditors_propertyModalEditor__ = __webpack_require__(6);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyModalEditor", function() { return __WEBPACK_IMPORTED_MODULE_14__propertyEditors_propertyModalEditor__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyTextEditor", function() { return __WEBPACK_IMPORTED_MODULE_14__propertyEditors_propertyModalEditor__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__propertyEditors_propertyConditionEditor__ = __webpack_require__(49);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyConditionEditor", function() { return __WEBPACK_IMPORTED_MODULE_15__propertyEditors_propertyConditionEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__propertyEditors_propertyRestfullEditor__ = __webpack_require__(54);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyResultfullEditor", function() { return __WEBPACK_IMPORTED_MODULE_16__propertyEditors_propertyRestfullEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__propertyEditors_propertyDefaultValueEditor__ = __webpack_require__(50);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyDefaultValueEditor", function() { return __WEBPACK_IMPORTED_MODULE_17__propertyEditors_propertyDefaultValueEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__propertyEditors_propertyTriggersEditor__ = __webpack_require__(56);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyTriggersEditor", function() { return __WEBPACK_IMPORTED_MODULE_18__propertyEditors_propertyTriggersEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__propertyEditors_propertyValidatorsEditor__ = __webpack_require__(57);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyValidatorsEditor", function() { return __WEBPACK_IMPORTED_MODULE_19__propertyEditors_propertyValidatorsEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__propertyEditors_propertyCellsEditor__ = __webpack_require__(48);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyCellsEditor", function() { return __WEBPACK_IMPORTED_MODULE_20__propertyEditors_propertyCellsEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__surveyObjects__ = __webpack_require__(26);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyObjects", function() { return __WEBPACK_IMPORTED_MODULE_21__surveyObjects__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__editorLocalization__ = __webpack_require__(0);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "editorLocalization", function() { return __WEBPACK_IMPORTED_MODULE_22__editorLocalization__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "defaultStrings", function() { return __WEBPACK_IMPORTED_MODULE_22__editorLocalization__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__questionEditors_questionEditorProperties__ = __webpack_require__(22);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorProperties", function() { return __WEBPACK_IMPORTED_MODULE_23__questionEditors_questionEditorProperties__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorRow", function() { return __WEBPACK_IMPORTED_MODULE_23__questionEditors_questionEditorProperties__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorProperty", function() { return __WEBPACK_IMPORTED_MODULE_23__questionEditors_questionEditorProperties__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__questionEditors_questionEditorDefinition__ = __webpack_require__(21);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorDefinition", function() { return __WEBPACK_IMPORTED_MODULE_24__questionEditors_questionEditorDefinition__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__questionEditors_questionEditor__ = __webpack_require__(8);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPropertyEditorShowWindow", function() { return __WEBPACK_IMPORTED_MODULE_25__questionEditors_questionEditor__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditor", function() { return __WEBPACK_IMPORTED_MODULE_25__questionEditors_questionEditor__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyQuestionEditorTab", function() { return __WEBPACK_IMPORTED_MODULE_25__questionEditors_questionEditor__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__questionToolbox__ = __webpack_require__(23);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionToolbox", function() { return __WEBPACK_IMPORTED_MODULE_26__questionToolbox__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__objectProperty__ = __webpack_require__(9);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyObjectProperty", function() { return __WEBPACK_IMPORTED_MODULE_27__objectProperty__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__objectEditor__ = __webpack_require__(12);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyObjectEditor", function() { return __WEBPACK_IMPORTED_MODULE_28__objectEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__pagesEditor__ = __webpack_require__(19);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyPagesEditor", function() { return __WEBPACK_IMPORTED_MODULE_29__pagesEditor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__textWorker__ = __webpack_require__(14);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyTextWorker", function() { return __WEBPACK_IMPORTED_MODULE_30__textWorker__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__surveyHelper__ = __webpack_require__(5);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ObjType", function() { return __WEBPACK_IMPORTED_MODULE_31__surveyHelper__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyHelper", function() { return __WEBPACK_IMPORTED_MODULE_31__surveyHelper__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__surveylive__ = __webpack_require__(27);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyLiveTester", function() { return __WEBPACK_IMPORTED_MODULE_32__surveylive__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__surveyEmbedingWindow__ = __webpack_require__(25);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyEmbedingWindow", function() { return __WEBPACK_IMPORTED_MODULE_33__surveyEmbedingWindow__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__questionconverter__ = __webpack_require__(24);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "QuestionConverter", function() { return __WEBPACK_IMPORTED_MODULE_34__questionconverter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__undoredo__ = __webpack_require__(28);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyUndoRedo", function() { return __WEBPACK_IMPORTED_MODULE_35__undoredo__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "UndoRedoItem", function() { return __WEBPACK_IMPORTED_MODULE_35__undoredo__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__surveyjsObjects__ = __webpack_require__(11);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyForDesigner", function() { return __WEBPACK_IMPORTED_MODULE_36__surveyjsObjects__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "registerAdorner", function() { return __WEBPACK_IMPORTED_MODULE_36__surveyjsObjects__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "removeAdorners", function() { return __WEBPACK_IMPORTED_MODULE_36__surveyjsObjects__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__extentions__ = __webpack_require__(39);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Extentions", function() { return __WEBPACK_IMPORTED_MODULE_37__extentions__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__editor__ = __webpack_require__(38);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyEditor", function() { return __WEBPACK_IMPORTED_MODULE_38__editor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__manage__ = __webpack_require__(47);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SurveysManager", function() { return __WEBPACK_IMPORTED_MODULE_39__manage__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__localization_french__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__localization_spanish__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__localization_portuguese__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__localization_italian__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__localization_simplified_chinese__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__localization_persian__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__localization_polish__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__adorners_title_editor__ = __webpack_require__(17);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "titleAdorner", function() { return __WEBPACK_IMPORTED_MODULE_47__adorners_title_editor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__adorners_item_editor__ = __webpack_require__(36);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "itemAdorner", function() { return __WEBPACK_IMPORTED_MODULE_48__adorners_item_editor__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__adorners_question_actions__ = __webpack_require__(37);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "questionActionsAdorner", function() { return __WEBPACK_IMPORTED_MODULE_49__adorners_question_actions__["a"]; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return Version; });
// styles




var Version;
Version = "" + "1.0.14";






































//editorLocalization







//adorners





/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,